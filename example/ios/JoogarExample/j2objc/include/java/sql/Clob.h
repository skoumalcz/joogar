//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/Clob.java
//

#ifndef _JavaSqlClob_H_
#define _JavaSqlClob_H_

#include "J2ObjC_header.h"

@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;

/*!
 @brief A Java interface mapping for the SQL CLOB type.
 <p>
 An SQL <code>CLOB</code> type stores a large array of characters as the value in a
 column of a database.
 <p>
 The <code>java.sql.Clob</code> interface provides methods for setting and
 retrieving data in the <code>Clob</code>, for querying <code>Clob</code> data length,
 for searching for data within the <code>Clob</code>.
 */
@protocol JavaSqlClob < NSObject, JavaObject >

/*!
 @brief Gets the value of this <code>Clob</code> object as an ASCII stream.
 @return an ASCII <code>InputStream</code> giving access to the
 <code>Clob</code> data.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (JavaIoInputStream *)getAsciiStream;

/*!
 @brief Gets the data of this <code>Clob</code> object in a <code>java.io.Reader</code>.
 @return a character stream Reader object giving access to the <code>Clob</code>
  data.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (JavaIoReader *)getCharacterStream;

/*!
 @brief Gets a copy of a specified substring in this <code>Clob</code>.
 @param pos
 the index of the start of the substring in the <code>Clob</code>.
 @param length
 the length of the data to retrieve.
 @return A string containing the requested data.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (NSString *)getSubStringWithLong:(jlong)pos
                           withInt:(jint)length;

/*!
 @brief Retrieves the number of characters in this <code>Clob</code> object.
 @return a long value with the number of character in this <code>Clob</code>.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (jlong)length;

/*!
 @brief Retrieves the character position at which a specified <code>Clob</code> object
 appears in this <code>Clob</code> object.
 @param searchstr
 the specified <code>Clob</code> to search for.
 @param start
 the position within this <code>Clob</code> to start the search
 @return a long value with the position at which the specified <code>Clob</code>
  occurs within this <code>Clob</code>.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (jlong)positionWithJavaSqlClob:(id<JavaSqlClob>)searchstr
                        withLong:(jlong)start;

/*!
 @brief Retrieves the character position at which a specified substring appears
 in this <code>Clob</code> object.
 @param searchstr
 the string to search for.
 @param start
 the position at which to start the search within this <code>Clob</code>
 .
 @return a long value with the position at which the specified string
 occurs within this <code>Clob</code>.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (jlong)positionWithNSString:(NSString *)searchstr
                     withLong:(jlong)start;

/*!
 @brief Retrieves a stream which can be used to write Ascii characters to this
 <code>Clob</code> object, starting at specified position.
 @param pos
 the position at which to start the writing.
 @return an OutputStream which can be used to write ASCII characters to
 this <code>Clob</code>.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (JavaIoOutputStream *)setAsciiStreamWithLong:(jlong)pos;

/*!
 @brief Retrieves a stream which can be used to write a stream of unicode
 characters to this <code>Clob</code> object, at a specified position.
 @param pos
 the position at which to start the writing.
 @return a Writer which can be used to write unicode characters to this
 <code>Clob</code>.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (JavaIoWriter *)setCharacterStreamWithLong:(jlong)pos;

/*!
 @brief Writes a given Java String to this <code>Clob</code> object at a specified
 position.
 @param pos
 the position at which to start the writing.
 @param str
 the string to write.
 @return the number of characters written.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (jint)setStringWithLong:(jlong)pos
             withNSString:(NSString *)str;

/*!
 @brief Writes <code>len</code> characters of a string, starting at a specified
 character offset, to this <code>Clob</code>.
 @param pos
 the position at which to start the writing.
 @param str
 the String to write.
 @param offset
 the offset within <code>str</code> to start writing from.
 @param len
 the number of characters to write.
 @return the number of characters written.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (jint)setStringWithLong:(jlong)pos
             withNSString:(NSString *)str
                  withInt:(jint)offset
                  withInt:(jint)len;

/*!
 @brief Truncates this <code>Clob</code> after the specified number of characters.
 @param len
 the length in characters giving the place to
 truncate this <code>Clob</code>.
 @throws SQLException
 if an error occurs accessing the <code>Clob</code>.
 */
- (void)truncateWithLong:(jlong)len;

/*!
 @brief Frees any resources held by this clob.
 After <code>free</code> is called, calling
 method other than <code>free</code> will throw <code>SQLException</code> (calling <code>free</code>
 repeatedly will do nothing).
 @throws SQLException
 */
- (void)free;

/*!
 @brief Returns a <code>Reader</code> that reads <code>length</code> characters from this clob, starting
 at 1-based offset {code pos}.
 */
- (JavaIoReader *)getCharacterStreamWithLong:(jlong)pos
                                    withLong:(jlong)length;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlClob)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlClob)

#endif // _JavaSqlClob_H_
