//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/DriverManager.java
//

#ifndef _JavaSqlDriverManager_H_
#define _JavaSqlDriverManager_H_

#include "J2ObjC_header.h"

@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@class JavaUtilProperties;
@protocol JavaSqlConnection;
@protocol JavaSqlDriver;
@protocol JavaUtilEnumeration;

/*!
 @brief Provides facilities for managing JDBC drivers.
 The <code>android.database</code> and
 <code>android.database.sqlite</code> packages offer a higher-performance alternative for new
 code.
 <p>Note that Android does not include any JDBC drivers by default; you must provide your own.
 <p>The <code>DriverManager</code> class loads JDBC drivers during its initialization,
 from the list of drivers referenced by the system property <code>"jdbc.drivers"</code>
 .
 */
@interface JavaSqlDriverManager : NSObject

#pragma mark Public

/*!
 @brief Removes a driver from the <code>DriverManager</code>'s registered driver list.
 This will only succeed when the caller's class loader loaded the driver
 that is to be removed. If the driver was loaded by a different class
 loader, the removal of the driver fails silently.
 <p>
 If the removal succeeds, the <code>DriverManager</code> will not use this
 driver in the future when asked to get a <code>Connection</code>.
 @param driver
 the JDBC driver to remove.
 @throws SQLException
 if there is a problem interfering with accessing the
 database.
 */
+ (void)deregisterDriverWithJavaSqlDriver:(id<JavaSqlDriver>)driver;

/*!
 @brief Attempts to establish a connection to the given database URL.
 @param url
 a URL string representing the database target to connect with.
 @return a <code>Connection</code> to the database identified by the URL.
 <code>null</code> if no connection can be established.
 @throws SQLException
 if there is an error while attempting to connect to the
 database identified by the URL.
 */
+ (id<JavaSqlConnection>)getConnectionWithNSString:(NSString *)url;

/*!
 @brief Attempts to establish a connection to the given database URL.
 @param url
 a URL string representing the database target to connect with
 @param info
 a set of properties to use as arguments to set up the
 connection. Properties are arbitrary string/value pairs.
 Normally, at least the properties <code>"user"</code> and <code>"password"</code>
  should be passed, with appropriate settings for
 the user ID and its corresponding password to get access to
 the corresponding database.
 @return a <code>Connection</code> to the database identified by the URL.
 <code>null</code> if no connection can be established.
 @throws SQLException
 if there is an error while attempting to connect to the
 database identified by the URL.
 */
+ (id<JavaSqlConnection>)getConnectionWithNSString:(NSString *)url
                            withJavaUtilProperties:(JavaUtilProperties *)info;

/*!
 @brief Attempts to establish a connection to the given database URL.
 @param url
 a URL string representing the database target to connect with.
 @param user
 a user ID used to login to the database.
 @param password
 a password for the user ID to login to the database.
 @return a <code>Connection</code> to the database identified by the URL.
 <code>null</code> if no connection can be established.
 @throws SQLException
 if there is an error while attempting to connect to the
 database identified by the URL.
 */
+ (id<JavaSqlConnection>)getConnectionWithNSString:(NSString *)url
                                      withNSString:(NSString *)user
                                      withNSString:(NSString *)password;

/*!
 @brief Tries to find a driver that can interpret the supplied URL.
 @param url
 the URL of a database.
 @return a <code>Driver</code> that matches the provided URL. <code>null</code> if
 no <code>Driver</code> understands the URL
 @throws SQLException
 if there is any kind of problem accessing the database.
 */
+ (id<JavaSqlDriver>)getDriverWithNSString:(NSString *)url;

/*!
 @brief Returns an <code>Enumeration</code> that contains all of the loaded JDBC
 drivers that the current caller can access.
 @return An <code>Enumeration</code> containing all the currently loaded JDBC
 <code>Drivers</code>.
 */
+ (id<JavaUtilEnumeration>)getDrivers;

/*!
 @brief Returns the login timeout when connecting to a database in seconds.
 @return the login timeout in seconds.
 */
+ (jint)getLoginTimeout;

/*!
 @brief Gets the log <code>PrintStream</code> used by the <code>DriverManager</code> and
 all the JDBC Drivers.
 @return the <code>PrintStream</code> used for logging activities.
 */
+ (JavaIoPrintStream *)getLogStream;

/*!
 @brief Retrieves the log writer.
 @return A <code>PrintWriter</code> object used as the log writer. <code>null</code>
 if no log writer is set.
 */
+ (JavaIoPrintWriter *)getLogWriter;

/*!
 @brief Prints a message to the current JDBC log stream.
 This is either the
 <code>PrintWriter</code> or (deprecated) the <code>PrintStream</code>, if set.
 @param message
 the message to print to the JDBC log stream.
 */
+ (void)printlnWithNSString:(NSString *)message;

/*!
 @brief Registers a given JDBC driver with the <code>DriverManager</code>.
 <p>
 A newly loaded JDBC driver class should register itself with the
 <code>DriverManager</code> by calling this method.
 @param driver
 the <code>Driver</code> to register with the <code>DriverManager</code>.
 @throws SQLException
 if a database access error occurs.
 */
+ (void)registerDriverWithJavaSqlDriver:(id<JavaSqlDriver>)driver;

/*!
 @brief Sets the login timeout when connecting to a database in seconds.
 @param seconds
 seconds until timeout. 0 indicates wait forever.
 */
+ (void)setLoginTimeoutWithInt:(jint)seconds;

/*!
 @brief Sets the print stream to use for logging data from the <code>DriverManager</code>
  and the JDBC drivers.
 @param outArg
 the <code>PrintStream</code> to use for logging.
 */
+ (void)setLogStreamWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

/*!
 @brief Sets the <code>PrintWriter</code> that is used by all loaded drivers, and also
 the <code>DriverManager</code>.
 @param outArg
 the <code>PrintWriter</code> to be used.
 */
+ (void)setLogWriterWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg;

@end

J2OBJC_STATIC_INIT(JavaSqlDriverManager)

FOUNDATION_EXPORT void JavaSqlDriverManager_deregisterDriverWithJavaSqlDriver_(id<JavaSqlDriver> driver);

FOUNDATION_EXPORT id<JavaSqlConnection> JavaSqlDriverManager_getConnectionWithNSString_(NSString *url);

FOUNDATION_EXPORT id<JavaSqlConnection> JavaSqlDriverManager_getConnectionWithNSString_withJavaUtilProperties_(NSString *url, JavaUtilProperties *info);

FOUNDATION_EXPORT id<JavaSqlConnection> JavaSqlDriverManager_getConnectionWithNSString_withNSString_withNSString_(NSString *url, NSString *user, NSString *password);

FOUNDATION_EXPORT id<JavaSqlDriver> JavaSqlDriverManager_getDriverWithNSString_(NSString *url);

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaSqlDriverManager_getDrivers();

FOUNDATION_EXPORT jint JavaSqlDriverManager_getLoginTimeout();

FOUNDATION_EXPORT JavaIoPrintStream *JavaSqlDriverManager_getLogStream();

FOUNDATION_EXPORT JavaIoPrintWriter *JavaSqlDriverManager_getLogWriter();

FOUNDATION_EXPORT void JavaSqlDriverManager_printlnWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaSqlDriverManager_registerDriverWithJavaSqlDriver_(id<JavaSqlDriver> driver);

FOUNDATION_EXPORT void JavaSqlDriverManager_setLoginTimeoutWithInt_(jint seconds);

FOUNDATION_EXPORT void JavaSqlDriverManager_setLogStreamWithJavaIoPrintStream_(JavaIoPrintStream *outArg);

FOUNDATION_EXPORT void JavaSqlDriverManager_setLogWriterWithJavaIoPrintWriter_(JavaIoPrintWriter *outArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlDriverManager)

#endif // _JavaSqlDriverManager_H_
