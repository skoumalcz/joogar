//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/ResultSet.java
//

#ifndef _JavaSqlResultSet_H_
#define _JavaSqlResultSet_H_

#include "J2ObjC_header.h"
#include "java/lang/AutoCloseable.h"
#include "java/sql/Wrapper.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaNetURL;
@class JavaSqlDate;
@class JavaSqlSQLWarning;
@class JavaSqlTime;
@class JavaSqlTimestamp;
@class JavaUtilCalendar;
@protocol JavaSqlArray;
@protocol JavaSqlBlob;
@protocol JavaSqlClob;
@protocol JavaSqlNClob;
@protocol JavaSqlRef;
@protocol JavaSqlResultSetMetaData;
@protocol JavaSqlRowId;
@protocol JavaSqlSQLXML;
@protocol JavaSqlStatement;
@protocol JavaUtilMap;

#define JavaSqlResultSet_CLOSE_CURSORS_AT_COMMIT 2
#define JavaSqlResultSet_HOLD_CURSORS_OVER_COMMIT 1
#define JavaSqlResultSet_CONCUR_READ_ONLY 1007
#define JavaSqlResultSet_CONCUR_UPDATABLE 1008
#define JavaSqlResultSet_FETCH_FORWARD 1000
#define JavaSqlResultSet_FETCH_REVERSE 1001
#define JavaSqlResultSet_FETCH_UNKNOWN 1002
#define JavaSqlResultSet_TYPE_FORWARD_ONLY 1003
#define JavaSqlResultSet_TYPE_SCROLL_INSENSITIVE 1004
#define JavaSqlResultSet_TYPE_SCROLL_SENSITIVE 1005

/*!
 @brief An interface for an object which represents a database table entry, returned
 as the result of the query to the database.
 <p>
 <code>ResultSet</code>s have a cursor which points to the current data table row.
 When the <code>ResultSet</code> is created, the cursor's location is one position
 ahead of the first row. To move the cursor to the first and consecutive rows,
 use the <code>next</code> method. The <code>next</code> method returns <code>true</code> as
 long as there are more rows in the <code>ResultSet</code>, otherwise it returns
 <code>false</code>.
 <p>
 The default type of <code>ResultSet</code> can not be updated and its cursor can
 only advance forward through the rows of data. This means that it is only
 possible to read through it once. However, other kinds of <code>ResultSet</code>
 are implemented: an <i>updatable</i> type and also types where the cursor can
 be <i>scrolled</i> forward and backward through the rows of data. How such a
 <code>ResultSet</code> is created is demonstrated in the following example:
 <ul>
 <dd>
 <code>Connection con;</code></dd>
 <dd><code>Statement aStatement = con.createStatement(
 ResultSet.TYPE_SCROLL_SENSITIVE,</code>
 <code>ResultSet.CONCUR_UPDATABLE );</code></dd>
 <dd><code>ResultSet theResultSet =
 theStatement.executeQuery("SELECT price, quantity FROM STOCKTABLE");</code>
 </dd>
 <dd><code>// theResultSet is both scrollable and updatable</code></dd> </ul>
 <p>
 The <code>ResultSet</code> interface provides a series of methods for retrieving
 data from columns in the current row, such as <code>getDate</code> and <code>getFloat</code>
 . The columns are retrieved either by their index number (starting
 at 1) or by their name - there are separate methods for both techniques of
 column addressing. The column names are case insensitive. If several columns
 have the same name, then the getter methods use the first matching column.
 This means that if column names are used, it is not possible to guarantee
 that the name will retrieve data from the intended column - for certainty it
 is better to use column indexes. Ideally the columns should be read
 left-to-right and read once only, since not all databases are optimized to
 handle other techniques of reading the data.
 <p>
 When reading data via the appropriate getter methods, the JDBC driver maps
 the SQL data retrieved from the database to the Java type implied by the
 method invoked by the application. The JDBC specification has a table for the
 mappings from SQL types to Java types.
 <p>
 There are also methods for writing data into the <code>ResultSet</code>, such as
 <code>updateInt</code> and <code>updateString</code>. The update methods can be used
 either to modify the data of an existing row or to insert new data rows into
 the <code>ResultSet</code> . Modification of existing data involves moving the
 cursor to the row which needs modification and then using the update methods
 to modify the data, followed by calling the <code>ResultSet.updateRow</code>
 method. For insertion of new rows, the cursor is first moved to a special row
 called the <i>Insert Row</i>, data is added using the update methods,
 followed by calling the <code>ResultSet.insertRow</code> method.
 <p>
 A <code>ResultSet</code> is closed if the statement which generated it closes, the
 statement is executed again, or the same statement's next <code>ResultSet</code>
 is retrieved (if the statement returned of multiple results).
 */
@protocol JavaSqlResultSet < JavaSqlWrapper, JavaLangAutoCloseable, NSObject, JavaObject >

/*!
 @brief Moves the cursor to a specified row number in the <code>ResultSet</code>.
 @param row
 the index of the row starting at index 1. Index <code>-1</code>
 returns the last row.
 @return <code>true</code> if the new cursor position is on the <code>ResultSet</code>
 , <code>false</code> otherwise.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)absoluteWithInt:(jint)row;

/*!
 @brief Moves the cursor to the end of the <code>ResultSet</code>, after the last row.
 @throws SQLException
 if a database error happens.
 */
- (void)afterLast;

/*!
 @brief Moves the cursor to the start of the <code>ResultSet</code>, before the first
 row.
 @throws SQLException
 if a database error happens.
 */
- (void)beforeFirst;

/*!
 @brief Cancels any updates made to the current row in the <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (void)cancelRowUpdates;

/*!
 @brief Clears all warnings related to this <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (void)clearWarnings;

/*!
 @brief Releases this <code>ResultSet</code>'s database and JDBC resources.
 You are
 strongly advised to use this method rather than relying on the release
 being done when the <code>ResultSet</code>'s finalize method is called during
 garbage collection process. Note that the <code>close()</code> method might
 take some time to complete since it is dependent on the behavior of the
 connection to the database and the database itself.
 @throws SQLException
 if a database error happens.
 */
- (void)close;

/*!
 @brief Deletes the current row from the <code>ResultSet</code> and from the
 underlying database.
 @throws SQLException
 if a database error happens.
 */
- (void)deleteRow;

/*!
 @brief Gets the index number for a column in the <code>ResultSet</code> from the
 provided column name.
 @param columnName
 the column name.
 @return the column's index in the <code>ResultSet</code> identified by column
 name.
 @throws SQLException
 if a database error happens.
 */
- (jint)findColumnWithNSString:(NSString *)columnName;

/*!
 @brief Shifts the cursor position to the first row in the <code>ResultSet</code>.
 @return <code>true</code> if the position is in a legitimate row, <code>false</code>
  if the <code>ResultSet</code> contains no rows.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)first;

/*!
 @brief Gets the content of a column specified by column index in the current row
 of this <code>ResultSet</code> as a <code>java.sql.Array</code>.
 @param columnIndex
 the index of the column to read
 @return a <code>java.sql.Array</code> with the data from the column.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlArray>)getArrayWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>java.sql.Array</code>
 .
 @param colName
 the name of the column to read.
 @return a <code>java.sql.Array</code> with the data from the specified column.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlArray>)getArrayWithNSString:(NSString *)colName;

/*!
 @brief Gets the value of a column specified by column index as an ASCII
 character stream.
 @param columnIndex
 the index of the column to read.
 @return an <code>InputStream</code> with the data from the column.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoInputStream *)getAsciiStreamWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as an ASCII character
 stream.
 @param columnName
 the name of the column to read
 @return an <code>InputStream</code> with the data from the column.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoInputStream *)getAsciiStreamWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.math.BigDecimal</code>
 .
 @param columnIndex
 the index of the column to read.
 @return a <code>BigDecimal</code> with the value of the column.
 @throws SQLException
 if a database error happens.
 */
- (JavaMathBigDecimal *)getBigDecimalWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.math.BigDecimal</code>
 .
 @param columnIndex
 the index of the column to read.
 @param scale_
 the number of digits after the decimal point
 @return a <code>BigDecimal</code> with the value of the column.
 @throws SQLException
 if a database error happens.
 */
- (JavaMathBigDecimal *)getBigDecimalWithInt:(jint)columnIndex
                                     withInt:(jint)scale_;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.math.BigDecimal</code>
 .
 @param columnName
 the name of the column to read.
 @return a BigDecimal with value of the column.
 @throws SQLException
 if a database error happens.
 */
- (JavaMathBigDecimal *)getBigDecimalWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.math.BigDecimal</code>
 .
 @param columnName
 the name of the column to read.
 @param scale_
 the number of digits after the decimal point
 @return a BigDecimal with value of the column.
 @throws SQLException
 if a database error happens.
 */
- (JavaMathBigDecimal *)getBigDecimalWithNSString:(NSString *)columnName
                                          withInt:(jint)scale_;

/*!
 @brief Gets the value of a column specified by column index as a binary
 stream.
 <p>
 This method can be used to read <code>LONGVARBINARY</code> values. All of the
 data in the <code>InputStream</code> should be read before getting data from
 any other column. A further call to a getter method will implicitly close
 the <code>InputStream</code>.
 @param columnIndex
 the index of the column to read.
 @return an <code>InputStream</code> with the data from the column. If the
 column value is SQL <code>NULL</code>, <code>null</code> is returned.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoInputStream *)getBinaryStreamWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a binary stream.
 <p>
 This method can be used to read <code>LONGVARBINARY</code> values. All of the
 data in the <code>InputStream</code> should be read before getting data from
 any other column. A further call to a getter method will implicitly close
 the <code>InputStream</code>.
 @param columnName
 the name of the column to read.
 @return an <code>InputStream</code> with the data from the column if the
 column value is SQL <code>NULL</code>, <code>null</code> is returned.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoInputStream *)getBinaryStreamWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Blob</code>
  object.
 @param columnIndex
 the index of the column to read.
 @return a <code>java.sql.Blob</code> with the value of the column.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlBlob>)getBlobWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.sql.Blob</code>
  object.
 @param columnName
 the name of the column to read.
 @return a <code>java.sql.Blob</code> with the value of the column.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlBlob>)getBlobWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>boolean</code>
 .
 @param columnIndex
 the index of the column to read.
 @return a <code>boolean</code> value from the column. If the column is SQL
 <code>NULL</code>, <code>false</code> is returned.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)getBooleanWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name, as a <code>boolean</code>
 .
 @param columnName
 the name of the column to read.
 @return a <code>boolean</code> value from the column. If the column is SQL
 <code>NULL</code>, <code>false</code> is returned.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)getBooleanWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>byte</code>.
 @param columnIndex
 the index of the column to read.
 @return a <code>byte</code> equal to the value of the column. 0 if the value
 is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jbyte)getByteWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>byte</code>.
 @param columnName
 the name of the column to read.
 @return a <code>byte</code> equal to the value of the column. 0 if the value
 is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jbyte)getByteWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a byte array.
 @param columnIndex
 the index of the column to read.
 @return a byte array containing the value of the column. <code>null</code> if
 the column contains SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (IOSByteArray *)getBytesWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a byte array.
 @param columnName
 the name of the column to read.
 @return a byte array containing the value of the column. <code>null</code> if
 the column contains SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (IOSByteArray *)getBytesWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.io.Reader</code>
  object.
 @param columnIndex
 the index of the column to read.
 @return a <code>Reader</code> holding the value of the column. <code>null</code> if
 the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoReader *)getCharacterStreamWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>java.io.Reader</code>
  object.
 @param columnName
 the name of the column to read.
 @return a <code>Reader</code> holding the value of the column. <code>null</code> if
 the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoReader *)getCharacterStreamWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Clob</code>
 .
 @param columnIndex
 the index of the column to read.
 @return a <code>Clob</code> object representing the value in the column.
 <code>null</code> if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlClob>)getClobWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>java.sql.Clob</code>
 .
 @param colName
 the name of the column to read.
 @return a <code>Clob</code> object representing the value in the column.
 <code>null</code> if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlClob>)getClobWithNSString:(NSString *)colName;

/*!
 @brief Gets the concurrency mode of this <code>ResultSet</code>.
 @return the concurrency mode - one of: <code>ResultSet.CONCUR_READ_ONLY</code>
 , <code>ResultSet.CONCUR_UPDATABLE</code>.
 @throws SQLException
 if a database error happens.
 */
- (jint)getConcurrency;

/*!
 @brief Gets the name of the SQL cursor of this <code>ResultSet</code>.
 @return the SQL cursor name.
 @throws SQLException
 if a database error happens.
 */
- (NSString *)getCursorName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Date</code>
 .
 @param columnIndex
 the index of the column to read.
 @return a <code>java.sql.Date</code> matching the column value. <code>null</code>
 if the column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlDate *)getDateWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Date</code>
 .
 This method uses a supplied calendar to compute the Date.
 @param columnIndex
 the index of the column to read.
 @param cal
 a <code>java.util.Calendar</code> to use in constructing the Date.
 @return a <code>java.sql.Date</code> matching the column value. <code>null</code>
 if the column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlDate *)getDateWithInt:(jint)columnIndex
           withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a column specified by column name as a <code>java.sql.Date</code>
 .
 @param columnName
 the name of the column to read.
 @return a <code>java.sql.Date</code> matching the column value. <code>null</code>
 if the column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlDate *)getDateWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.sql.Date</code>
  object.
 @param columnName
 the name of the column to read.
 @param cal
 <code>java.util.Calendar</code> to use in constructing the Date.
 @return a <code>java.sql.Date</code> matching the column value. <code>null</code>
 if the column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlDate *)getDateWithNSString:(NSString *)columnName
                withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a column specified by column index as a <code>double</code>
 value.
 @param columnIndex
 the index of the column to read.
 @return a <code>double</code> equal to the column value. <code>0.0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jdouble)getDoubleWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>double</code>
 value.
 @param columnName
 the name of the column to read.
 @return a <code>double</code> equal to the column value. <code>0.0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jdouble)getDoubleWithNSString:(NSString *)columnName;

/*!
 @brief Gets the direction in which rows are fetched for this <code>ResultSet</code>
 object.
 @return the fetch direction. Will be one of:
 <ul>
 <li>ResultSet.FETCH_FORWARD</li><li>ResultSet.FETCH_REVERSE</li>
 <li>ResultSet.FETCH_UNKNOWN</li>
 </ul>
 @throws SQLException
 if a database error happens.
 */
- (jint)getFetchDirection;

/*!
 @brief Gets the fetch size (in number of rows) for this <code>ResultSet</code>.
 @return the fetch size as an int
 @throws SQLException
 if a database error happens.
 */
- (jint)getFetchSize;

/*!
 @brief Gets the value of a column specified by column index as a <code>float</code>
 value.
 @param columnIndex
 the index of the column to read.
 @return a <code>float</code> equal to the column value. <code>0.0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jfloat)getFloatWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>float</code>
 value.
 @param columnName
 the name of the column to read.
 @return a <code>float</code> equal to the column value. <code>0.0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jfloat)getFloatWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as an <code>int</code>
 value.
 @param columnIndex
 the index of the column to read.
 @return an <code>int</code> equal to the column value. <code>0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jint)getIntWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name, as an <code>int</code>
 value.
 @param columnName
 the name of the column to read.
 @return an <code>int</code> equal to the column value. <code>0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jint)getIntWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>long</code>
 value.
 @param columnIndex
 the index of the column to read.
 @return a <code>long</code> equal to the column value. <code>0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jlong)getLongWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name, as a <code>long</code>
 value.
 @param columnName
 the name of the column to read.
 @return a <code>long</code> equal to the column value. <code>0</code> if the
 column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jlong)getLongWithNSString:(NSString *)columnName;

/*!
 @brief Gets the metadata for this <code>ResultSet</code>.
 This defines the number,
 types and properties of the columns in the <code>ResultSet</code>.
 @return a <code>ResultSetMetaData</code> object with information about this
 <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlResultSetMetaData>)getMetaData;

/*!
 @brief Gets the value of a specified column as a Java <code>Object</code>.
 The type
 of the returned object will be the default according to the column's SQL
 type, following the JDBC specification for built-in types.
 <p>
 For SQL User Defined Types, if a column value is Structured or Distinct,
 this method behaves the same as a call to: <code>getObject(columnIndex,this.getStatement().getConnection().getTypeMap())</code>
 @param columnIndex
 the index of the column to read.
 @return an <code>Object</code> containing the value of the column. <code>null</code>
  if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (id)getObjectWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column index as a Java <code>Object</code>
 .
 <p>
 The type of the Java object will be determined by the supplied Map to
 perform the mapping of SQL <code>Struct</code> or Distinct types into Java
 objects.
 @param columnIndex
 the index of the column to read.
 @param map
 a <code>java.util.Map</code> containing a mapping from SQL Type
 names to Java classes.
 @return an <code>Object</code> containing the value of the column. <code>null</code>
  if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (id)getObjectWithInt:(jint)columnIndex
       withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Gets the value of a specified column as a Java <code>Object</code>.
 The type
 of the returned object will be the default according to the column's SQL
 type, following the JDBC specification for built-in types.
 <p>
 For SQL User Defined Types, if a column value is structured or distinct,
 this method behaves the same as a call to: <code>getObject(columnIndex,this.getStatement().getConnection().getTypeMap())</code>
 @param columnName
 the name of the column to read.
 @return an <code>Object</code> containing the value of the column. <code>null</code>
  if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (id)getObjectWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column name as a Java <code>Object</code>
 .
 <p>
 The type of the Java object will be determined by the supplied Map to
 perform the mapping of SQL Struct or Distinct types into Java objects.
 @param columnName
 the name of the column to read.
 @param map
 a <code>java.util.Map</code> containing a mapping from SQL Type names to
 Java classes.
 @return an <code>Object</code> containing the value of the column. <code>null</code>
  if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (id)getObjectWithNSString:(NSString *)columnName
            withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Gets the value of a column specified by column index as a Java <code>java.sql.Ref</code>
 .
 @param columnIndex
 the index of the column to read.
 @return a Ref representing the value of the SQL REF in the column
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlRef>)getRefWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a Java <code>java.sql.Ref</code>
 .
 @param colName
 the name of the column to read.
 @return a Ref representing the value of the SQL <code>REF</code> in the column
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlRef>)getRefWithNSString:(NSString *)colName;

/*!
 @brief Gets the number of the current row in the <code>ResultSet</code>.
 Row numbers
 start at 1 for the first row.
 @return the index number of the current row. <code>0</code> is returned if
 there is no current row.
 @throws SQLException
 if a database error happens.
 */
- (jint)getRow;

/*!
 @brief Gets the value of a column specified by column index as a short value.
 @param columnIndex
 the index of the column to read.
 @return a short value equal to the value of the column. <code>0</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jshort)getShortWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name, as a short value.
 @param columnName
 the name of the column to read.
 @return a short value equal to the value of the column. <code>0</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (jshort)getShortWithNSString:(NSString *)columnName;

/*!
 @brief Gets the statement that produced this <code>ResultSet</code>.
 If the <code>ResultSet</code>
  was not created by a statement (i.e. because it was returned
 from one of the <code>DatabaseMetaData</code> methods), <code>null</code> is
 returned.
 @return the Statement which produced this <code>ResultSet</code>, or <code>null</code>
  if the <code>ResultSet</code> was not created by a Statement.
 @throws SQLException
 if a database error happens.
 */
- (id<JavaSqlStatement>)getStatement;

/*!
 @brief Gets the value of a column specified by column index as a String.
 @param columnIndex
 the index of the column to read.
 @return the String representing the value of the column, <code>null</code> if
 the column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (NSString *)getStringWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name, as a String.
 @param columnName
 the name of the column to read.
 @return the String representing the value of the column, <code>null</code> if
 the column is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (NSString *)getStringWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Time</code>
  value.
 @param columnIndex
 the index of the column to read.
 @return a Time representing the column value, <code>null</code> if the column
 value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTime *)getTimeWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Time</code>
  value.
 The supplied <code>Calendar</code> is used to
 map the SQL <code>Time</code> value to a Java Time value.
 @param columnIndex
 the index of the column to read.
 @param cal
 a <code>Calendar</code> to use in creating the Java Time value.
 @return a Time representing the column value, <code>null</code> if the column
 value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTime *)getTimeWithInt:(jint)columnIndex
           withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.sql.Time</code>
  value.
 @param columnName
 the name of the column to read.
 @return the column value, <code>null</code> if the column value is SQL <code>NULL</code>
 .
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTime *)getTimeWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index, as a <code>java.sql.Time</code>
  value.
 The supplied <code>Calendar</code> is used to
 map the SQL <code>Time</code> value to a Java Time value.
 @param columnName
 the name of the column to read.
 @param cal
 a <code>Calendar</code> to use in creating the Java time value.
 @return a Time representing the column value, <code>null</code> if the column
 value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTime *)getTimeWithNSString:(NSString *)columnName
                withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.sql.Timestamp</code>
  value.
 @param columnIndex
 the index of the column to read.
 @return a timestamp representing the column value, <code>null</code> if the
 column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTimestamp *)getTimestampWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column index, as a <code>java.sql.Timestamp</code>
  value.
 The supplied Calendar is used when mapping
 the SQL <code>Timestamp</code> value to a Java <code>Timestamp</code> value.
 @param columnIndex
 the index of the column to read.
 @param cal
 Calendar to use in creating the Java timestamp value.
 @return a timestamp representing the column value, <code>null</code> if the
 column value is SQL NULL.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTimestamp *)getTimestampWithInt:(jint)columnIndex
                     withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.sql.Timestamp</code>
  value.
 @param columnName
 the name of the column to read.
 @return a timestamp representing the column value, <code>null</code> if the
 column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTimestamp *)getTimestampWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column name, as a <code>java.sql.Timestamp</code>
  value.
 The supplied Calendar is used when mapping
 the SQL <code>Timestamp</code> value to a Java <code>Timestamp</code> value.
 @param columnName
 the name of the column to read.
 @param cal
 Calendar to use in creating the Java <code>Timestamp</code> value.
 @return a timestamp representing the column value, <code>null</code> if the
 column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlTimestamp *)getTimestampWithNSString:(NSString *)columnName
                          withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the type of the <code>ResultSet</code>.
 @return The <code>ResultSet</code> type, one of:
 <ul>
 <li><code>ResultSet.TYPE_FORWARD_ONLY</code></li> <li><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>
 </li> <li><code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
 </li>
 </ul>
 @throws SQLException
 if there is a database error.
 */
- (jint)getType;

/*!
 @brief Gets the value of the column as an <code>InputStream</code> of unicode
 characters.
 @param columnIndex
 the index of the column to read.
 @return an <code>InputStream</code> holding the value of the column. <code>null</code>
  if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoInputStream *)getUnicodeStreamWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of the column as an <code>InputStream</code> of Unicode
 characters.
 @param columnName
 the name of the column to read.
 @return an <code>InputStream</code> holding the value of the column. <code>null</code>
  if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaIoInputStream *)getUnicodeStreamWithNSString:(NSString *)columnName;

/*!
 @brief Gets the value of a column specified by column index as a <code>java.net.URL</code>
 .
 @param columnIndex
 the index of the column to read.
 @return a URL. <code>null</code> if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaNetURL *)getURLWithInt:(jint)columnIndex;

/*!
 @brief Gets the value of a column specified by column name as a <code>java.net.URL</code>
  object.
 @param columnName
 the name of the column to read.
 @return the column vaule as a URL. <code>null</code> if the column value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error happens.
 */
- (JavaNetURL *)getURLWithNSString:(NSString *)columnName;

/*!
 @brief Gets the first warning generated by calls on this <code>ResultSet</code>.
 Subsequent warnings on this <code>ResultSet</code> are chained to the first
 one.
 <p>
 The warnings are cleared when a new Row is read from the <code>ResultSet</code>
 . The warnings returned by this method are only the warnings
 generated by <code>ResultSet</code> method calls - warnings generated by
 Statement methods are held by the Statement.
 <p>
 An <code>SQLException</code> is generated if this method is called on a closed
 <code>ResultSet</code>.
 @return an SQLWarning which is the first warning for this <code>ResultSet</code>
 . <code>null</code> if there are no warnings.
 @throws SQLException
 if a database error happens.
 */
- (JavaSqlSQLWarning *)getWarnings;

/*!
 @brief Insert the insert row into the <code>ResultSet</code> and into the underlying
 database.
 The cursor must be set to the Insert Row before this method is
 invoked.
 @throws SQLException
 if a database error happens. Particular cases include the
 cursor not being on the Insert Row or if any columns in the
 row do not have a value where the column is declared as
 not-nullable.
 */
- (void)insertRow;

/*!
 @brief Gets if the cursor is after the last row of the <code>ResultSet</code>.
 @return <code>true</code> if the cursor is after the last row in the <code>ResultSet</code>
 , <code>false</code> if the cursor is at any other position
 in the <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)isAfterLast;

/*!
 @brief Gets if the cursor is before the first row of the <code>ResultSet</code>.
 @return <code>true</code> if the cursor is before the first row in the <code>ResultSet</code>
 , <code>false</code> if the cursor is at any other position
 in the <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)isBeforeFirst;

/*!
 @brief Gets if the cursor is on the first row of the <code>ResultSet</code>.
 @return <code>true</code> if the cursor is on the first row in the <code>ResultSet</code>
 , <code>false</code> if the cursor is at any other position
 in the <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)isFirst;

/*!
 @brief Gets if the cursor is on the last row of the <code>ResultSet</code>
 @return <code>true</code> if the cursor is on the last row in the <code>ResultSet</code>
 , <code>false</code> if the cursor is at any other position
 in the <code>ResultSet</code>.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)isLast;

/*!
 @brief Shifts the cursor position to the last row of the <code>ResultSet</code>.
 @return <code>true</code> if the new position is in a legitimate row, <code>false</code>
  if the <code>ResultSet</code> contains no rows.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)last;

/*!
 @brief Moves the cursor to the remembered position, namely the
 row that was the current row before a call to <code>moveToInsertRow</code>.
 This only applies if the cursor is on the Insert Row.
 @throws SQLException
 if a database error happens.
 */
- (void)moveToCurrentRow;

/*!
 @brief Moves the cursor position to the Insert Row.
 The current position is
 remembered and the cursor is positioned at the Insert Row. The columns in
 the Insert Row should be filled in with the appropriate update methods,
 before calling <code>insertRow</code> to insert the new row into the database.
 @throws SQLException
 if a database error happens.
 */
- (void)moveToInsertRow;

/*!
 @brief Shifts the cursor position down one row in this <code>ResultSet</code> object.
 <p>
 Any input streams associated with the current row are closed and any
 warnings are cleared.
 @return <code>true</code> if the updated cursor position is pointing to a
 valid row, <code>false</code> otherwise (i.e. when the cursor is after
 the last row in the <code>ResultSet</code>).
 @throws SQLException
 if a database error happens.
 */
- (jboolean)next;

/*!
 @brief Relocates the cursor position to the preceding row in this <code>ResultSet</code>
 .
 @return <code>true</code> if the new position is in a legitimate row, <code>false</code>
  if the cursor is now before the first row.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)previous;

/*!
 @brief Refreshes the current row with its most up to date value in the database.
 Must not be called when the cursor is on the Insert Row.
 <p>
 If any columns in the current row have been updated but the <code>updateRow</code>
  has not been called, then the updates are lost when this
 method is called.
 @throws SQLException
 if a database error happens., including if the current row is
 the Insert row.
 */
- (void)refreshRow;

/*!
 @brief Moves the cursor position up or down by a specified number of rows.
 If
 the new position is beyond the start row (or end row), the cursor position is
 set before the first row (or, respectively, after the last row).
 @param rows
 a number of rows to move the cursor - may be positive or
 negative
 @return <code>true</code> if the new cursor position is on a row, <code>false</code>
  otherwise
 @throws SQLException
 if a database error happens.
 */
- (jboolean)relativeWithInt:(jint)rows;

/*!
 @brief Indicates whether a row has been deleted.
 This method depends on whether
 the JDBC driver and database can detect deletions.
 @return <code>true</code> if a row has been deleted and if deletions are
 detected, <code>false</code> otherwise.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)rowDeleted;

/*!
 @brief Indicates whether the current row has had an insertion operation.
 This
 method depends on whether the JDBC driver and database can detect
 insertions.
 @return <code>true</code> if a row has been inserted and if insertions are
 detected, <code>false</code> otherwise.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)rowInserted;

/*!
 @brief Indicates whether the current row has been updated.
 This method depends
 on whether the JDBC driver and database can detect updates.
 @return <code>true</code> if the current row has been updated and if updates
 can be detected, <code>false</code> otherwise.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)rowUpdated;

/*!
 @brief Indicates which direction (forward/reverse) will be used to process the
 rows of this <code>ResultSet</code> object.
 This is treated as a hint by the
 JDBC driver.
 @param direction
 can be <code>ResultSet.FETCH_FORWARD</code>, <code>ResultSet.FETCH_REVERSE</code>
 , or <code>ResultSet.FETCH_UNKNOWN</code>
 @throws SQLException
 if there is a database error.
 */
- (void)setFetchDirectionWithInt:(jint)direction;

/*!
 @brief Indicates the number of rows to fetch from the database when extra rows
 are required for this <code>ResultSet</code>.
 This used as a hint to the JDBC
 driver.
 @param rows
 the number of rows to fetch. <code>0</code> implies that the JDBC
 driver can make its own decision about the fetch size. The
 number should not be greater than the maximum number of rows
 established by the statement that generated the <code>ResultSet</code>
 .
 @throws SQLException
 if a database error happens.
 */
- (void)setFetchSizeWithInt:(jint)rows;

/*!
 @brief Updates a column specified by a column index with a <code>java.sql.Array</code>
  value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateArrayWithInt:(jint)columnIndex
          withJavaSqlArray:(id<JavaSqlArray>)x;

/*!
 @brief Updates a column specified by a column name with a <code>java.sql.Array</code>
 value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateArrayWithNSString:(NSString *)columnName
               withJavaSqlArray:(id<JavaSqlArray>)x;

/*!
 @brief Updates a column specified by a column index with an ASCII stream value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @param length
 the length of the data to write from the stream
 @throws SQLException
 if a database error happens.
 */
- (void)updateAsciiStreamWithInt:(jint)columnIndex
           withJavaIoInputStream:(JavaIoInputStream *)x
                         withInt:(jint)length;

/*!
 @brief Updates a column specified by a column name with an Ascii stream value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @param length
 the length of the data to write from the stream
 @throws SQLException
 if a database error happens.
 */
- (void)updateAsciiStreamWithNSString:(NSString *)columnName
                withJavaIoInputStream:(JavaIoInputStream *)x
                              withInt:(jint)length;

/*!
 @brief Updates a column specified by a column index with a <code>java.sql.BigDecimal</code>
  value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBigDecimalWithInt:(jint)columnIndex
         withJavaMathBigDecimal:(JavaMathBigDecimal *)x;

/*!
 @brief Updates a column specified by a column name with a <code>java.sql.BigDecimal</code>
  value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBigDecimalWithNSString:(NSString *)columnName
              withJavaMathBigDecimal:(JavaMathBigDecimal *)x;

/*!
 @brief Updates a column specified by a column index with a binary stream value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @param length
 the number of bytes to be read from the the stream.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBinaryStreamWithInt:(jint)columnIndex
            withJavaIoInputStream:(JavaIoInputStream *)x
                          withInt:(jint)length;

/*!
 @brief Updates a column specified by a column name with a binary stream value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @param length
 he number of bytes to be read from the the stream.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBinaryStreamWithNSString:(NSString *)columnName
                 withJavaIoInputStream:(JavaIoInputStream *)x
                               withInt:(jint)length;

/*!
 @brief Updates a column specified by a column index with a <code>java.sql.Blob</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBlobWithInt:(jint)columnIndex
          withJavaSqlBlob:(id<JavaSqlBlob>)x;

/*!
 @brief Updates a column specified by a column name with a <code>java.sql.Blob</code>
 value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBlobWithNSString:(NSString *)columnName
               withJavaSqlBlob:(id<JavaSqlBlob>)x;

/*!
 @brief Updates a column specified by a column index with a <code>boolean</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBooleanWithInt:(jint)columnIndex
                 withBoolean:(jboolean)x;

/*!
 @brief Updates a column specified by a column name with a <code>boolean</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBooleanWithNSString:(NSString *)columnName
                      withBoolean:(jboolean)x;

/*!
 @brief Updates a column specified by a column index with a <code>byte</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateByteWithInt:(jint)columnIndex
                 withByte:(jbyte)x;

/*!
 @brief Updates a column specified by a column name with a <code>byte</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateByteWithNSString:(NSString *)columnName
                      withByte:(jbyte)x;

/*!
 @brief Updates a column specified by a column index with a <code>byte</code> array
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBytesWithInt:(jint)columnIndex
             withByteArray:(IOSByteArray *)x;

/*!
 @brief Updates a column specified by a column name with a byte array value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateBytesWithNSString:(NSString *)columnName
                  withByteArray:(IOSByteArray *)x;

/*!
 @brief Updates a column specified by a column index with a character stream
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @param length
 the length of data to write from the stream
 @throws SQLException
 if a database error happens.
 */
- (void)updateCharacterStreamWithInt:(jint)columnIndex
                    withJavaIoReader:(JavaIoReader *)x
                             withInt:(jint)length;

/*!
 @brief Updates a column specified by a column name with a character stream
 value.
 @param columnName
 the name of the column to update.
 @param reader
 the new value for the specified column.
 @param length
 the length of data to write from the Reader
 @throws SQLException
 if a database error happens.
 */
- (void)updateCharacterStreamWithNSString:(NSString *)columnName
                         withJavaIoReader:(JavaIoReader *)reader
                                  withInt:(jint)length;

/*!
 @brief Updates a column specified by a column index with a <code>java.sql.Clob</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateClobWithInt:(jint)columnIndex
          withJavaSqlClob:(id<JavaSqlClob>)x;

/*!
 @brief Updates a column specified by a column name with a <code>java.sql.Clob</code>
 value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateClobWithNSString:(NSString *)columnName
               withJavaSqlClob:(id<JavaSqlClob>)x;

/*!
 @brief Updates a column specified by a column index with a <code>java.sql.Date</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateDateWithInt:(jint)columnIndex
          withJavaSqlDate:(JavaSqlDate *)x;

/*!
 @brief Updates a column specified by a column name with a <code>java.sql.Date</code>
 value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateDateWithNSString:(NSString *)columnName
               withJavaSqlDate:(JavaSqlDate *)x;

/*!
 @brief Updates a column specified by a column index with a <code>double</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateDoubleWithInt:(jint)columnIndex
                 withDouble:(jdouble)x;

/*!
 @brief Updates a column specified by a column name with a <code>double</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateDoubleWithNSString:(NSString *)columnName
                      withDouble:(jdouble)x;

/*!
 @brief Updates a column specified by a column index with a <code>float</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateFloatWithInt:(jint)columnIndex
                 withFloat:(jfloat)x;

/*!
 @brief Updates a column specified by a column name with a <code>float</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateFloatWithNSString:(NSString *)columnName
                      withFloat:(jfloat)x;

/*!
 @brief Updates a column specified by a column index with an <code>int</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateIntWithInt:(jint)columnIndex
                 withInt:(jint)x;

/*!
 @brief Updates a column specified by a column name with an <code>int</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateIntWithNSString:(NSString *)columnName
                      withInt:(jint)x;

/*!
 @brief Updates a column specified by a column index with a <code>long</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column..
 @throws SQLException
 if a database error happens.
 */
- (void)updateLongWithInt:(jint)columnIndex
                 withLong:(jlong)x;

/*!
 @brief Updates a column specified by a column name with a <code>long</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateLongWithNSString:(NSString *)columnName
                      withLong:(jlong)x;

/*!
 @brief Updates a column specified by a column index with a <code>null</code> value.
 @param columnIndex
 the index of the column to update.
 @throws SQLException
 if a database error happens.
 */
- (void)updateNullWithInt:(jint)columnIndex;

/*!
 @brief Updates a column specified by a column name with a <code>null</code> value.
 @param columnName
 the name of the column to update.
 @throws SQLException
 if a database error happens.
 */
- (void)updateNullWithNSString:(NSString *)columnName;

/*!
 @brief Updates a column specified by a column index with an <code>Object</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateObjectWithInt:(jint)columnIndex
                     withId:(id)x;

/*!
 @brief Updates a column specified by a column index with an <code>Object</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @param scale_
 for the types <code>java.sql.Types.DECIMAL</code> or <code>java.sql.Types.NUMERIC</code>
 , this specifies the number of digits
 after the decimal point.
 @throws SQLException
 if a database error happens.
 */
- (void)updateObjectWithInt:(jint)columnIndex
                     withId:(id)x
                    withInt:(jint)scale_;

/*!
 @brief Updates a column specified by a column name with an <code>Object</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateObjectWithNSString:(NSString *)columnName
                          withId:(id)x;

/*!
 @brief Updates a column specified by a column name with an <code>Object</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @param scale_
 for the types <code>java.sql.Types.DECIMAL</code> or <code>java.sql.Types.NUMERIC</code>
 , this specifies the number of digits
 after the decimal point.
 @throws SQLException
 if a database error happens.
 */
- (void)updateObjectWithNSString:(NSString *)columnName
                          withId:(id)x
                         withInt:(jint)scale_;

/*!
 @brief Updates a column specified by a column index with a <code>java.sql.Ref</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateRefWithInt:(jint)columnIndex
          withJavaSqlRef:(id<JavaSqlRef>)x;

/*!
 @brief Updates a column specified by a column name with a <code>java.sql.Ref</code>
 value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateRefWithNSString:(NSString *)columnName
               withJavaSqlRef:(id<JavaSqlRef>)x;

/*!
 @brief Updates the database with the new contents of the current row of this
 <code>ResultSet</code> object.
 @throws SQLException
 if a database error happens.
 */
- (void)updateRow;

/*!
 @brief Updates a column specified by a column index with a <code>short</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateShortWithInt:(jint)columnIndex
                 withShort:(jshort)x;

/*!
 @brief Updates a column specified by a column name with a <code>short</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateShortWithNSString:(NSString *)columnName
                      withShort:(jshort)x;

/*!
 @brief Updates a column specified by a column index with a <code>String</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateStringWithInt:(jint)columnIndex
               withNSString:(NSString *)x;

/*!
 @brief Updates a column specified by a column name with a <code>String</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateStringWithNSString:(NSString *)columnName
                    withNSString:(NSString *)x;

/*!
 @brief Updates a column specified by a column index with a <code>Time</code> value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateTimeWithInt:(jint)columnIndex
          withJavaSqlTime:(JavaSqlTime *)x;

/*!
 @brief Updates a column specified by a column name with a <code>Time</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateTimeWithNSString:(NSString *)columnName
               withJavaSqlTime:(JavaSqlTime *)x;

/*!
 @brief Updates a column specified by a column index with a <code>Timestamp</code>
 value.
 @param columnIndex
 the index of the column to update.
 @param x
 the new timestamp value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateTimestampWithInt:(jint)columnIndex
          withJavaSqlTimestamp:(JavaSqlTimestamp *)x;

/*!
 @brief Updates a column specified by column name with a <code>Timestamp</code> value.
 @param columnName
 the name of the column to update.
 @param x
 the new timestamp value for the specified column.
 @throws SQLException
 if a database error happens.
 */
- (void)updateTimestampWithNSString:(NSString *)columnName
               withJavaSqlTimestamp:(JavaSqlTimestamp *)x;

/*!
 @brief Determines whether the last column read from this <code>ResultSet</code>
 contained SQL <code>NULL</code>.
 @return <code></code> <code>true</code> if the last column contained SQL <code>NULL</code>
 , <code>false</code> otherwise
 @throws SQLException
 if a database error happens.
 */
- (jboolean)wasNull;

/*!
 @brief Returns a <code>RowId</code> corresponding to the SQL ROWID at the 1-based <code>columnIndex</code>.
 @throws SQLException
 */
- (id<JavaSqlRowId>)getRowIdWithInt:(jint)columnIndex;

/*!
 @brief Returns a <code>RowId</code> corresponding to the SQL ROWID at the named column.
 @throws SQLException
 */
- (id<JavaSqlRowId>)getRowIdWithNSString:(NSString *)columnLabel;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateRowIdWithInt:(jint)columnIndex
          withJavaSqlRowId:(id<JavaSqlRowId>)value;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateRowIdWithNSString:(NSString *)columnLabel
               withJavaSqlRowId:(id<JavaSqlRowId>)value;

/*!
 @brief Returns the holdability of this result set: <code>HOLD_CURSORS_OVER_COMMIT</code> or
 <code>CLOSE_CURSORS_AT_COMMIT</code>.
 @throws SQLException
 */
- (jint)getHoldability;

/*!
 @brief Returns true if this result set has been closed, false otherwise.
 @throws SQLException
 */
- (jboolean)isClosed;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNStringWithInt:(jint)columnIndex
                withNSString:(NSString *)nString;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNStringWithNSString:(NSString *)columnLabel
                     withNSString:(NSString *)nString;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNClobWithInt:(jint)columnIndex
          withJavaSqlNClob:(id<JavaSqlNClob>)nClob;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNClobWithNSString:(NSString *)columnLabel
               withJavaSqlNClob:(id<JavaSqlNClob>)nClob;

/*!
 @brief Returns an <code>NClob</code> corresponding to the value at the 1-based <code>columnIndex</code>.
 @throws SQLException
 */
- (id<JavaSqlNClob>)getNClobWithInt:(jint)columnIndex;

/*!
 @brief Returns an <code>NClob</code> corresponding to the value in the named column.
 @throws SQLException
 */
- (id<JavaSqlNClob>)getNClobWithNSString:(NSString *)columnLabel;

/*!
 @brief Returns an <code>SQLXML</code> corresponding to the value at the 1-based <code>columnIndex</code>.
 @throws SQLException
 */
- (id<JavaSqlSQLXML>)getSQLXMLWithInt:(jint)columnIndex;

/*!
 @brief Returns an <code>SQLXML</code> corresponding to the value in the named column.
 @throws SQLException
 */
- (id<JavaSqlSQLXML>)getSQLXMLWithNSString:(NSString *)columnLabel;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateSQLXMLWithInt:(jint)columnIndex
          withJavaSqlSQLXML:(id<JavaSqlSQLXML>)xmlObject;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateSQLXMLWithNSString:(NSString *)columnLabel
               withJavaSqlSQLXML:(id<JavaSqlSQLXML>)xmlObject;

/*!
 @brief Returns a <code>String</code> corresponding to the value at the 1-based <code>columnIndex</code>.
 @throws SQLException
 */
- (NSString *)getNStringWithInt:(jint)columnIndex;

/*!
 @brief Returns a <code>String</code> corresponding to the value in the named column.
 @throws SQLException
 */
- (NSString *)getNStringWithNSString:(NSString *)columnLabel;

/*!
 @brief Returns a <code>Reader</code> corresponding to the value at the 1-based <code>columnIndex</code>.
 @throws SQLException
 */
- (JavaIoReader *)getNCharacterStreamWithInt:(jint)columnIndex;

/*!
 @brief Returns a <code>Reader</code> corresponding to the value in the named column.
 @throws SQLException
 */
- (JavaIoReader *)getNCharacterStreamWithNSString:(NSString *)columnLabel;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNCharacterStreamWithInt:(jint)columnIndex
                     withJavaIoReader:(JavaIoReader *)x
                             withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNCharacterStreamWithNSString:(NSString *)columnLabel
                          withJavaIoReader:(JavaIoReader *)reader
                                  withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateAsciiStreamWithInt:(jint)columnIndex
           withJavaIoInputStream:(JavaIoInputStream *)x
                        withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBinaryStreamWithInt:(jint)columnIndex
            withJavaIoInputStream:(JavaIoInputStream *)x
                         withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateCharacterStreamWithInt:(jint)columnIndex
                    withJavaIoReader:(JavaIoReader *)x
                            withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateAsciiStreamWithNSString:(NSString *)columnLabel
                withJavaIoInputStream:(JavaIoInputStream *)x
                             withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBinaryStreamWithNSString:(NSString *)columnLabel
                 withJavaIoInputStream:(JavaIoInputStream *)x
                              withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateCharacterStreamWithNSString:(NSString *)columnLabel
                         withJavaIoReader:(JavaIoReader *)reader
                                 withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBlobWithInt:(jint)columnIndex
    withJavaIoInputStream:(JavaIoInputStream *)inputStream
                 withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBlobWithNSString:(NSString *)columnLabel
         withJavaIoInputStream:(JavaIoInputStream *)inputStream
                      withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateClobWithInt:(jint)columnIndex
         withJavaIoReader:(JavaIoReader *)reader
                 withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateClobWithNSString:(NSString *)columnLabel
              withJavaIoReader:(JavaIoReader *)reader
                      withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNClobWithInt:(jint)columnIndex
          withJavaIoReader:(JavaIoReader *)reader
                  withLong:(jlong)length;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNClobWithNSString:(NSString *)columnLabel
               withJavaIoReader:(JavaIoReader *)reader
                       withLong:(jlong)length;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNCharacterStreamWithInt:(jint)columnIndex
                     withJavaIoReader:(JavaIoReader *)x;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNCharacterStreamWithNSString:(NSString *)columnLabel
                          withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateAsciiStreamWithInt:(jint)columnIndex
           withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBinaryStreamWithInt:(jint)columnIndex
            withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateCharacterStreamWithInt:(jint)columnIndex
                    withJavaIoReader:(JavaIoReader *)x;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateAsciiStreamWithNSString:(NSString *)columnLabel
                withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBinaryStreamWithNSString:(NSString *)columnLabel
                 withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateCharacterStreamWithNSString:(NSString *)columnLabel
                         withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBlobWithInt:(jint)columnIndex
    withJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateBlobWithNSString:(NSString *)columnLabel
         withJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateClobWithInt:(jint)columnIndex
         withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateClobWithNSString:(NSString *)columnLabel
              withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Updates the value at the 1-based <code>columnIndex</code>.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNClobWithInt:(jint)columnIndex
          withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Updates the value in the named column.
 The underlying database isn't changed until the next row update or insert operation.
 @throws SQLException
 */
- (void)updateNClobWithNSString:(NSString *)columnLabel
               withJavaIoReader:(JavaIoReader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlResultSet)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, CLOSE_CURSORS_AT_COMMIT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, HOLD_CURSORS_OVER_COMMIT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, CONCUR_READ_ONLY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, CONCUR_UPDATABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, FETCH_FORWARD, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, FETCH_REVERSE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, FETCH_UNKNOWN, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, TYPE_FORWARD_ONLY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, TYPE_SCROLL_INSENSITIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSet, TYPE_SCROLL_SENSITIVE, jint)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlResultSet)

#endif // _JavaSqlResultSet_H_
