//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/SQLInput.java
//

#ifndef _JavaSqlSQLInput_H_
#define _JavaSqlSQLInput_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaNetURL;
@class JavaSqlDate;
@class JavaSqlTime;
@class JavaSqlTimestamp;
@protocol JavaSqlArray;
@protocol JavaSqlBlob;
@protocol JavaSqlClob;
@protocol JavaSqlNClob;
@protocol JavaSqlRef;
@protocol JavaSqlRowId;
@protocol JavaSqlSQLXML;

/*!
 @brief The <code>SQLInput</code> interface defines operations which apply to a type of
 input stream which carries a series of values representing an instance of
 an SQL structured type or SQL distinct type.
 <p>
 This interface is used to define custom mappings of SQL <i>User Defined
 Types</i> (UDTs) to Java classes. It is used by JDBC drivers, therefore
 application programmers do not normally use the <code>SQLInput</code> methods
 directly. Reader methods such as <code>readLong</code> and <code>readBytes</code>
 provide means to read values from an <code>SQLInput</code> stream.
 <p>
 When the <code>getObject</code> method is called with an object which implements
 the <code>SQLData</code> interface, the JDBC driver determines the SQL type of the
 UDT being mapped by calling the <code>SQLData.getSQLType</code> method. The driver
 creates an instance of an <code>SQLInput</code> stream, filling the stream with
 the attributes of the UDT. The <code>SQLInput</code> stream is passed to the
 <code>SQLData.readSQL</code> method which then calls the <code>SQLInput</code> reader
 methods to read the attributes.
 */
@protocol JavaSqlSQLInput < NSObject, JavaObject >

/*!
 @brief Returns the next attribute in the stream in the form of a <code>String</code>.
 @return the next attribute. <code>null</code> if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)readString;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>boolean</code>
 .
 @return the next attribute as a <code>boolean</code>. <code>false</code> if the
 value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)readBoolean;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>byte</code>.
 @return the next attribute as a <code>byte</code>. 0 if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jbyte)readByte;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>short</code>.
 @return the next attribute as a <code>short</code>. 0 if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jshort)readShort;

/*!
 @brief Returns the next attribute in the stream in the form of an <code>int</code>.
 @return the next attribute as an <code>int</code>. 0 if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jint)readInt;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>long</code>.
 @return the next attribute as a <code>long</code>. 0 if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jlong)readLong;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>float</code>.
 @return the next attribute as a <code>float</code>. 0 if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jfloat)readFloat;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>double</code>.
 @return the next attribute as a <code>double</code>. 0 if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (jdouble)readDouble;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.math.BigDecimal</code>
 .
 @return the attribute as a <code>java.math.BigDecimal</code>. <code>null</code> if
 the read returns SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaMathBigDecimal *)readBigDecimal;

/*!
 @brief Returns the next attribute in the stream in the form of a byte array.
 @return the attribute as a byte array. <code>null</code> if the read returns
 SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (IOSByteArray *)readBytes;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Date</code>
 .
 @return the next attribute as a <code>java.sql.Date</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaSqlDate *)readDate;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Time</code>
 .
 @return the attribute as a <code>java.sql.Time</code>. <code>null</code> if the
 read returns SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaSqlTime *)readTime;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Timestamp</code>
 .
 @return the attribute as a <code>java.sql.Timestamp</code>. <code>null</code> if
 the read returns SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaSqlTimestamp *)readTimestamp;

/*!
 @brief Returns the next attribute in the stream in the form of a Unicode
 character stream embodied as a <code>java.io.Reader</code>.
 @return the next attribute as a <code>java.io.Reader</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaIoReader *)readCharacterStream;

/*!
 @brief Returns the next attribute in the stream in the form of an ASCII
 character stream embodied as a <code>java.io.InputStream</code>.
 @return the next attribute as a <code>java.io.InputStream</code>. <code>null</code>
 if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaIoInputStream *)readAsciiStream;

/*!
 @brief Returns the next attribute in the stream in the form of a stream of bytes
 embodied as a <code>java.io.InputStream</code>.
 @return the next attribute as a <code>java.io.InputStream</code>. <code>null</code>
 if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaIoInputStream *)readBinaryStream;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.lang.Object</code>
 .
 <p>
 The type of the <code>Object</code> returned is determined by the type mapping
 for this JDBC driver, including any customized mappings, if present. A
 type map is given to the <code>SQLInput</code> by the JDBC driver before the
 <code>SQLInput</code> is given to the application.
 <p>
 If the attribute is an SQL structured or distinct type, its SQL type is
 determined. If the stream's type map contains an element for that SQL
 type, the driver creates an object for the relevant type and invokes the
 method <code>SQLData.readSQL</code> on it, which reads supplementary data from
 the stream using whichever protocol is defined for that method.
 @return the next attribute as an Object. <code>null</code> if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id)readObject;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Ref</code>
 .
 @return the next attribute as a <code>java.sql.Ref</code>. <code>null</code> if the
 value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlRef>)readRef;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Blob</code>
 .
 @return the next attribute as a <code>java.sql.Blob</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlBlob>)readBlob;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Clob</code>
 .
 @return the next attribute as a <code>java.sql.Clob</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlClob>)readClob;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.Array</code>
 .
 @return the next attribute as an <code>Array</code>. <code>null</code> if the value
 is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlArray>)readArray;

/*!
 @brief Reports whether the last value read was SQL <code>NULL</code>.
 @return <code>true</code> if the last value read was SQL <code>NULL</code>, <code>false</code>
  otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)wasNull;

/*!
 @brief Reads the next attribute in the stream (SQL DATALINK value) and returns
 it as a <code>java.net.URL</code> object.
 @return the next attribute as a <code>java.net.URL</code>. <code>null</code> if the
 value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (JavaNetURL *)readURL;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.NClob</code>
 .
 @return the next attribute as a <code>java.sql.NClob</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlNClob>)readNClob;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.lang.String</code>
 .
 Used for the NCHAR, NVARCHAR and LONGNVARCHAR types.
 See <code>readString</code> otherwise.
 @return the next attribute as a <code>java.lang.String</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)readNString;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.SQLXML</code>
 .
 @return the next attribute as a <code>java.sql.SQLXML</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlSQLXML>)readSQLXML;

/*!
 @brief Returns the next attribute in the stream in the form of a <code>java.sql.RowId</code>
 .
 Used for the ROWID type.
 @return the next attribute as a <code>java.sql.RowId</code>. <code>null</code> if
 the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a database error.
 */
- (id<JavaSqlRowId>)readRowId;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLInput)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLInput)

#endif // _JavaSqlSQLInput_H_
