//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/CallableStatement.java
//

#ifndef _JavaSqlCallableStatement_H_
#define _JavaSqlCallableStatement_H_

#include "J2ObjC_header.h"
#include "java/sql/PreparedStatement.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaNetURL;
@class JavaSqlDate;
@class JavaSqlTime;
@class JavaSqlTimestamp;
@class JavaUtilCalendar;
@protocol JavaSqlArray;
@protocol JavaSqlBlob;
@protocol JavaSqlClob;
@protocol JavaSqlNClob;
@protocol JavaSqlRef;
@protocol JavaSqlRowId;
@protocol JavaSqlSQLXML;
@protocol JavaUtilMap;

/*!
 @brief An interface used to call <i>Stored Procedures</i>.
 <p>
 The JDBC API provides an SQL escape syntax allowing <i>Stored Procedures</i>
 to be called in a standard way for all databases. The JDBC escape syntax has
 two forms. One form includes a result parameter. The second form does not
 include a result parameter. Where the result parameter is used, it must be
 declared as an <code>OUT</code> parameter. Other parameters can be declared as
 <code>IN</code>, <code>OUT</code>, or <code>INOUT</code>. Parameters are referenced either by
 name or by a numerical index starting at 1.
 <p>
 The correct syntax is:
 <dd>
 <dl>
 { ?= call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
 </dl>
 <dl>
 { call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
 </dl>
 </code></dd>
 <code>IN</code> parameters are set before calling the procedure,
 using the setter methods which are inherited from <code>PreparedStatement</code>.
 For <code>OUT</code> parameters, their type must be registered before executing
 the stored procedure. The values are retrieved using the getter methods
 defined in the <code>CallableStatement</code> interface.
 <p>
 <code>CallableStatement</code>s can return one or more <code>ResultSets</code>. In the
 event that multiple <code>ResultSets</code> are returned, they are accessed using
 the methods inherited from the <code>Statement</code> interface.
 */
@protocol JavaSqlCallableStatement < JavaSqlPreparedStatement, NSObject, JavaObject >

/*!
 @brief Gets the value of a specified JDBC <code>ARRAY</code> parameter as a
 <code>java.sql.Array</code>.
 @param parameterIndex
 the parameter index, where the first parameter has
 index 1.
 @return a <code>java.sql.Array</code> containing the parameter value.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlArray>)getArrayWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>ARRAY</code> parameter as a <code>java.sql.Array</code>
 .
 @param parameterName
 the desired parameter's name.
 @return a <code>java.sql.Array</code> containing the parameter's value.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (id<JavaSqlArray>)getArrayWithNSString:(NSString *)parameterName;

/*!
 @brief Returns a new <code>BigDecimal</code> representation of the JDBC <code>NUMERIC</code>
  parameter specified by the input index.
 @param parameterIndex
 the parameter number index where the first parameter has index
 1.
 @return a <code>java.math.BigDecimal</code> representing the value of the
 specified parameter. The value <code>null</code> is returned if
 the parameter in question is an SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaMathBigDecimal *)getBigDecimalWithInt:(jint)parameterIndex;

/*!
 @brief Returns a new <code>BigDecimal</code> representation of the JDBC <code>NUMERIC</code>
  parameter specified by the input index.
 The number of digits
 after the decimal point is specified by <code>scale</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @param scale_
 the number of digits after the decimal point to get.
 @return a <code>java.math.BigDecimal</code> representing the value of the
 specified parameter. The value <code>null</code> is returned if
 the parameter in question is an SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaMathBigDecimal *)getBigDecimalWithInt:(jint)parameterIndex
                                     withInt:(jint)scale_;

/*!
 @brief Returns a new <code>BigDecimal</code> representation of the JDBC <code>NUMERIC</code>
  parameter specified by the input name.
 @param parameterName
 the desired parameter's name.
 @return a <code>java.math.BigDecimal</code> representing the value of the
 specified parameter. The value <code>null</code> is returned if
 the parameter in question is an SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaMathBigDecimal *)getBigDecimalWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>BLOB</code> parameter as a <code>java.sql.Blob</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return a <code>java.sql.Blob</code> representing the value of the
 specified parameter. The value <code>null</code> is returned if
 the parameter in question is an SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlBlob>)getBlobWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>BLOB</code> parameter as a <code>java.sql.Blob</code>
 .
 @param parameterName
 the desired parameter's name.
 @return a <code>java.sql.Blob</code> representing the value of the
 specified parameter. The value <code>null</code> is returned if
 the parameter in question is an SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlBlob>)getBlobWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>BIT</code> parameter as a boolean.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return a <code>boolean</code> representing the parameter value. <code>false</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jboolean)getBooleanWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>BIT</code> parameter as a <code>boolean</code>
 .
 @param parameterName
 the desired parameter's name.
 @return a <code>boolean</code> representation of the value of the parameter.
 <code>false</code> is returned if the SQL value is <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jboolean)getBooleanWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>TINYINT</code> parameter as a <code>byte</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return a <code>byte</code> representation of the value of the parameter.
 <code>0</code> is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jbyte)getByteWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>TINYINT</code> parameter as a Java
 <code>byte</code>.
 @param parameterName
 the desired parameter's name.
 @return a <code>byte</code> representation of the value of the parameter.
 <code>0</code> is returned if the SQL value is <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jbyte)getByteWithNSString:(NSString *)parameterName;

/*!
 @brief Returns a byte array representation of the indexed JDBC <code>BINARY</code> or
 <code>VARBINARY</code> parameter.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return an array of bytes giving the value of the parameter. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (IOSByteArray *)getBytesWithInt:(jint)parameterIndex;

/*!
 @brief Returns a byte array representation of the named JDBC <code>BINARY</code> or
 <code>VARBINARY</code> parameter.
 @param parameterName
 the name of the parameter.
 @return an array of bytes giving the value of the parameter. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (IOSByteArray *)getBytesWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>CLOB</code> parameter as a <code>java.sql.Clob</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return a <code>java.sql.Clob</code> representing the value of the
 parameter. <code>null</code> is returned if the value is SQL
 <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlClob>)getClobWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>CLOB</code> parameter as a <code>java.sql.Clob</code>
 .
 @param parameterName
 the name of the parameter.
 @return a <code>java.sql.Clob</code> with the value of the parameter. <code>null</code>
  is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlClob>)getClobWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of the specified JDBC <code>DATE</code> parameter as a <code>java.sql.Date</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the <code>java.sql.Date</code> representing the parameter's value.
 <code>null</code> is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlDate *)getDateWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of the specified JDBC <code>DATE</code> parameter as a <code>java.sql.Date</code>
 , using the specified <code>Calendar</code> to construct the date.
 <p>The JDBC driver uses the calendar to create the Date using a particular
 timezone and locale. The default behavior of the driver is to use the VM defaults.
 See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @param cal
 the <code>Calendar</code> to use to construct the date
 @return the <code>java.sql.Date</code> giving the parameter's value. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlDate *)getDateWithInt:(jint)parameterIndex
           withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of the specified JDBC <code>DATE</code> parameter as a <code>java.sql.Date</code>
 .
 @param parameterName
 the name of the desired parameter.
 @return the <code>java.sql.Date</code> giving the parameter's value. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlDate *)getDateWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of the specified JDBC <code>DATE</code> parameter as a <code>java.sql.Date</code>
 , using the specified <code>Calendar</code> to construct the date.
 <p>The JDBC driver uses the calendar to create the date using a particular
 timezone and locale. The default behavior of the driver is to use the VM defaults.
 See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
 @param parameterName
 the name of the desired parameter.
 @param cal
 used for creating the returned <code>Date</code>.
 @return the <code>java.sql.Date</code> giving the parameter's value. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlDate *)getDateWithNSString:(NSString *)parameterName
                withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of the specified JDBC <code>DOUBLE</code> parameter as a
 <code>double</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the parameter's value as a <code>double</code>. <code>0.0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jdouble)getDoubleWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of the specified JDBC <code>DOUBLE</code> parameter as a
 <code>double</code>.
 @param parameterName
 the name of the desired parameter.
 @return the parameter's value as a <code>double</code>. <code>0.0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (jdouble)getDoubleWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of the specified JDBC <code>FLOAT</code> parameter as a <code>float</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the parameter's value as a <code>float</code>. <code>0.0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jfloat)getFloatWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of the specified JDBC <code>FLOAT</code> parameter as a Java
 <code>float</code>.
 @param parameterName
 the name of the desired parameter.
 @return the parameter's value as a <code>float</code>. <code>0.0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (jfloat)getFloatWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of the specified JDBC <code>INTEGER</code> parameter as an
 <code>int</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the <code>int</code> giving the parameter's value. <code>0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jint)getIntWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of the specified JDBC <code>INTEGER</code> parameter as an
 <code>int</code>.
 @param parameterName
 the name of the desired parameter.
 @return the <code>int</code> giving the parameter's value. <code>0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jint)getIntWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of the specified JDBC <code>BIGINT</code> parameter as a
 <code>long</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the <code>long</code> giving the parameter's value. <code>0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jlong)getLongWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of the specified JDBC <code>BIGINT</code> parameter as a
 <code>long</code>.
 @param parameterName
 the name of the desired parameter.
 @return the <code>long</code> giving the parameter's value. <code>0</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jlong)getLongWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of the specified parameter as a Java <code>Object</code>.
 <p>
 The object type returned is the JDBC type registered for the parameter
 with a <code>registerOutParameter</code> call. If a parameter was registered
 as a <code>java.sql.Types.OTHER</code> then it may hold abstract types that
 are particular to the connected database.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return an Object holding the value of the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (id)getObjectWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of the specified parameter as an <code>Object</code>.
 The
 <code>Map</code> gives the correspondence between SQL types and Java classes.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @param map
 the <code>Map</code> giving the correspondence between SQL
 types and Java classes.
 @return an Object holding the value of the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (id)getObjectWithInt:(jint)parameterIndex
       withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Gets the value of the specified parameter as an <code>Object</code>.
 <p>
 The object type returned is the JDBC type that was registered for
 the parameter by an earlier call to <code>registerOutParameter</code>.
 If a parameter was registered as a <code>java.sql.Types.OTHER</code>
 then it may hold abstract types that are particular to the
 connected database.
 @param parameterName
 the parameter name.
 @return the Java <code>Object</code> representation of the value of the
 parameter.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (id)getObjectWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified parameter as an <code>Object</code>.
 The
 actual return type is determined by the <code>Map</code> parameter which
 gives the correspondence between SQL types and Java classes.
 @param parameterName
 the parameter name.
 @param map
 the <code>Map</code> of SQL types to their Java counterparts
 @return an <code>Object</code> holding the value of the parameter.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (id)getObjectWithNSString:(NSString *)parameterName
            withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Gets the value of a specified SQL <code>REF(<structured type>)</code>
 parameter as a <code>java.sql.Ref</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return a <code>java.sql.Ref</code> with the parameter value. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlRef>)getRefWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified SQL <code>REF(<structured type>)</code>
 parameter as a <code>java.sql.Ref</code>.
 @param parameterName
 the desired parameter's name.
 @return the parameter's value in the form of a <code>java.sql.Ref</code>
 . A <code>null</code> reference is returned if the
 parameter's value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (id<JavaSqlRef>)getRefWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>SMALLINT</code> parameter as a
 <code>short</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the parameter's value as a <code>short</code>. 0 is returned
 if the parameter's value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (jshort)getShortWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>SMALLINT</code> parameter as a
 <code>short</code>.
 @param parameterName
 the desired parameter's name.
 @return the parameter's value as a <code>short</code>. 0 is returned
 if the parameter's value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (jshort)getShortWithNSString:(NSString *)parameterName;

/*!
 @brief Returns the indexed parameter's value as a <code>String</code>.
 The
 parameter value must be one of the JDBC types <code>CHAR</code>,
 <code>VARCHAR</code> or <code>LONGVARCHAR</code>.
 <p>
 The <code>String</code> corresponding to a <code>CHAR</code> of fixed length
 will be of identical length to the value in the database inclusive
 of padding characters.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the parameter's value as a <code>String</code>. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (NSString *)getStringWithInt:(jint)parameterIndex;

/*!
 @brief Returns the named parameter's value as a string.
 The parameter value must
 be one of the JDBC types <code>CHAR</code>, <code>VARCHAR</code> or <code>LONGVARCHAR</code>
 .
 <p>
 The string corresponding to a <code>CHAR</code> of fixed length will be of
 identical length to the value in the database inclusive of padding
 characters.
 @param parameterName
 the desired parameter's name.
 @return the parameter's value as a <code>String</code>. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if there is a problem accessing the database.
 */
- (NSString *)getStringWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>TIME</code> parameter as a <code>java.sql.Time</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return the parameter's value as a <code>java.sql.Time</code>.
 <code>null</code> is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTime *)getTimeWithInt:(jint)parameterIndex;

/*!
 @brief Gets the value of a specified JDBC <code>TIME</code> parameter as a <code>java.sql.Time</code>
 , using the supplied <code>Calendar</code> to construct the
 time.
 The JDBC driver uses the calendar to handle specific timezones
 and locales in order to determine <code>Time</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @param cal
 the calendar to use in constructing <code>Time</code>.
 @return the parameter's value as a <code>java.sql.Time</code>.
 <code>null</code> is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTime *)getTimeWithInt:(jint)parameterIndex
           withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a specified JDBC <code>TIME</code> parameter as a <code>java.sql.Time</code>
 .
 @param parameterName
 the name of the desired parameter.
 @return a new <code>java.sql.Time</code> with the parameter's value. A <code>null</code>
  reference is returned for an SQL value of <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTime *)getTimeWithNSString:(NSString *)parameterName;

/*!
 @brief Gets the value of a specified JDBC <code>TIME</code> parameter as a <code>java.sql.Time</code>
 , using the supplied <code>Calendar</code> to construct
 the time.
 The JDBC driver uses the calendar to handle specific
 timezones and locales when creating <code>Time</code>.
 @param parameterName
 the name of the desired parameter.
 @param cal
 used for creating the returned <code>Time</code>
 @return a new <code>java.sql.Time</code> with the parameter's value. A <code>null</code>
  reference is returned for an SQL value of <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTime *)getTimeWithNSString:(NSString *)parameterName
                withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Returns the indexed parameter's <code>TIMESTAMP</code> value as a <code>java.sql.Timestamp</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1
 @return the parameter's value as a <code>java.sql.Timestamp</code>. A
 <code>null</code> reference is returned for an SQL value of <code>NULL</code>
 .
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTimestamp *)getTimestampWithInt:(jint)parameterIndex;

/*!
 @brief Returns the indexed parameter's <code>TIMESTAMP</code> value as a <code>java.sql.Timestamp</code>
 .
 The JDBC driver uses the supplied <code>Calendar</code>
 to handle specific timezones and locales when creating the result.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1
 @param cal
 used for creating the returned <code>Timestamp</code>
 @return the parameter's value as a <code>java.sql.Timestamp</code>. A
 <code>null</code> reference is returned for an SQL value of <code>NULL</code>
 .
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTimestamp *)getTimestampWithInt:(jint)parameterIndex
                     withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Returns the named parameter's <code>TIMESTAMP</code> value as a <code>java.sql.Timestamp</code>
 .
 @param parameterName
 the name of the desired parameter.
 @return the parameter's value as a <code>java.sql.Timestamp</code>. A
 <code>null</code> reference is returned for an SQL value of <code>NULL</code>
 .
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTimestamp *)getTimestampWithNSString:(NSString *)parameterName;

/*!
 @brief Returns the indexed parameter's <code>TIMESTAMP</code> value as a <code>java.sql.Timestamp</code>
 .
 The JDBC driver uses the supplied <code>Calendar</code>
 to handle specific timezones and locales when creating the result.
 @param parameterName
 the name of the desired parameter.
 @param cal
 used for creating the returned <code>Timestamp</code>
 @return the parameter's value as a <code>java.sql.Timestamp</code>. A
 <code>null</code> reference is returned for an SQL value of <code>NULL</code>
 .
 @throws SQLException
 if a database error occurs.
 */
- (JavaSqlTimestamp *)getTimestampWithNSString:(NSString *)parameterName
                          withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Gets the value of a specified JDBC <code>DATALINK</code> parameter as a
 <code>java.net.URL</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @return a <code>URL</code> giving the parameter's value. <code>null</code>
 is returned if the value is SQL <code>NULL</code>.
 @throws SQLException
 if a database error occurs.
 */
- (JavaNetURL *)getURLWithInt:(jint)parameterIndex;

/*!
 @brief Returns the named parameter's JDBC <code>DATALINK</code> value in a new Java
 <code>java.net.URL</code>.
 @param parameterName
 the name of the desired parameter.
 @return a new <code>java.net.URL</code> encapsulating the parameter value. A
 <code>null</code> reference is returned for an SQL value of <code>NULL</code>
 .
 @throws SQLException
 if a database error occurs.
 */
- (JavaNetURL *)getURLWithNSString:(NSString *)parameterName;

/*!
 @brief Defines the type of a specified <code>OUT</code> parameter.
 All <code>OUT</code>
 parameters must have their type defined before a stored procedure is
 executed.
 <p>
 The type supplied in the <code>sqlType</code> parameter fixes the
 type that will be returned by the getter methods of
 <code>CallableStatement</code>.
 If a database specific type is expected for a parameter, the Type <code>java.sql.Types.OTHER</code>
  should be used. Note that there is another variant
 of this method for User Defined Types or a <code>REF</code> type.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1
 @param sqlType
 the JDBC type as defined by <code>java.sql.Types</code>. The JDBC
 types <code>NUMERIC</code> and <code>DECIMAL</code> should be defined
 using <code>registerOutParameter(int,int,int)</code>.
 @throws SQLException
 if a database error occurs.
 */
- (void)registerOutParameterWithInt:(jint)parameterIndex
                            withInt:(jint)sqlType;

/*!
 @brief Defines the Type of a specified <code>OUT</code> parameter.
 All <code>OUT</code>
 parameters must have their type defined before a stored procedure is
 executed. This version of the <code>registerOutParameter</code> method, which
 has a scale parameter, should be used for the JDBC types <code>NUMERIC</code>
 and <code>DECIMAL</code>, where there is a need to specify the number of
 digits expected after the decimal point.
 <p>
 The type supplied in the <code>sqlType</code> parameter fixes the
 type that will be returned by the getter methods of
 <code>CallableStatement</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1
 @param sqlType
 the JDBC type as defined by <code>java.sql.Types</code>.
 @param scale_
 the number of digits after the decimal point. Must be greater
 than or equal to 0.
 @throws SQLException
 if a database error occurs.
 */
- (void)registerOutParameterWithInt:(jint)parameterIndex
                            withInt:(jint)sqlType
                            withInt:(jint)scale_;

/*!
 @brief Defines the Type of a specified <code>OUT</code> parameter.
 This variant
 of the method is designed for use with parameters that are
 <i>User Defined Types</i> (UDT) or a <code>REF</code> type, although it
 can be used for any type.
 @param paramIndex
 the parameter number index, where the first parameter has
 index 1.
 @param sqlType
 a JDBC type expressed as a constant from <code>Types</code>.
 @param typeName
 an SQL type name. For a <code>REF</code> type, this name should be
 the fully qualified name of the referenced type.
 @throws SQLException
 if a database error occurs.
 */
- (void)registerOutParameterWithInt:(jint)paramIndex
                            withInt:(jint)sqlType
                       withNSString:(NSString *)typeName;

/*!
 @brief Defines the Type of a specified <code>OUT</code> parameter.
 All OUT parameters
 must have their Type defined before a stored procedure is executed.
 <p>
 The type supplied in the <code>sqlType</code> parameter fixes the
 type that will be returned by the getter methods of
 <code>CallableStatement</code>.
 If a database-specific type is expected for a parameter, the Type <code>java.sql.Types.OTHER</code>
  should be used. Note that there is another variant
 of this method for User Defined Types or a <code>REF</code> type.
 @param parameterName
 the parameter name.
 @param sqlType
 a JDBC type expressed as a constant from <code>Types</code>. Types
 <code>NUMERIC</code> and <code>DECIMAL</code> should be defined using
 the variant of this method that takes a <code>scale</code>
 parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)registerOutParameterWithNSString:(NSString *)parameterName
                                 withInt:(jint)sqlType;

/*!
 @brief Defines the Type of a specified <code>OUT</code> parameter.
 All <code>OUT</code>
 parameters must have their Type defined before a stored procedure is
 executed. This version of the <code>registerOutParameter</code> method, which
 has a scale parameter, should be used for the JDBC types <code>NUMERIC</code>
 and <code>DECIMAL</code>, where there is a need to specify the number of
 digits expected after the decimal point.
 <p>
 The type supplied in the <code>sqlType</code> parameter fixes the
 type that will be returned by the getter methods of
 <code>CallableStatement</code>.
 @param parameterName
 the parameter name.
 @param sqlType
 a JDBC type expressed as a constant from <code>Types</code>.
 @param scale_
 the number of digits after the decimal point. Must be greater
 than or equal to 0.
 @throws SQLException
 if a database error occurs.
 */
- (void)registerOutParameterWithNSString:(NSString *)parameterName
                                 withInt:(jint)sqlType
                                 withInt:(jint)scale_;

/*!
 @brief Defines the Type of a specified <code>OUT</code> parameter.
 This variant of
 the method is designed for use with parameters that are <i>User Defined
 Types</i> (UDT) or a <code>REF</code> type, although it can be used for any
 type.
 @param parameterName
 the parameter name
 @param sqlType
 a JDBC type expressed as a constant from <code>Types</code>
 @param typeName
 the fully qualified name of an SQL structured type. For a
 <code>REF</code> type, this name should be the fully qualified name
 of the referenced type.
 @throws SQLException
 if a database error occurs.
 */
- (void)registerOutParameterWithNSString:(NSString *)parameterName
                                 withInt:(jint)sqlType
                            withNSString:(NSString *)typeName;

/*!
 @brief Sets the value of a specified parameter to the content of a supplied
 <code>InputStream</code>, which has a specified number of bytes.
 <p>
 This is a good method for setting an SQL <code>LONGVARCHAR</code> parameter
 where the length of the data is large. Data is read from the <code>InputStream</code>
  until end-of-file is reached or the specified number of
 bytes is copied.
 @param parameterName
 the parameter name
 @param theInputStream
 the ASCII input stream carrying the data to update the
 parameter with.
 @param length
 the number of bytes in the <code>InputStream</code> to copy to the
 parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setAsciiStreamWithNSString:(NSString *)parameterName
             withJavaIoInputStream:(JavaIoInputStream *)theInputStream
                           withInt:(jint)length;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>java.math.BigDecimal</code>
  value.
 @param parameterName
 the name of the parameter.
 @param theBigDecimal
 the <code>java.math.BigInteger</code> value to set.
 @throws SQLException
 if a database error occurs.
 */
- (void)setBigDecimalWithNSString:(NSString *)parameterName
           withJavaMathBigDecimal:(JavaMathBigDecimal *)theBigDecimal;

/*!
 @brief Sets the value of a specified parameter to the content of a supplied
 binary <code>InputStream</code>, which has a specified number of bytes.
 <p>
 Use this method when a large amount of data needs to be set into a
 <code>LONGVARBINARY</code> parameter.
 @param parameterName
 the name of the parameter.
 @param theInputStream
 the binary <code>InputStream</code> carrying the data to update the
 parameter.
 @param length
 the number of bytes in the <code>InputStream</code> to copy to the
 parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setBinaryStreamWithNSString:(NSString *)parameterName
              withJavaIoInputStream:(JavaIoInputStream *)theInputStream
                            withInt:(jint)length;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>boolean</code>
 value.
 @param parameterName
 the parameter name.
 @param theBoolean
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setBooleanWithNSString:(NSString *)parameterName
                   withBoolean:(jboolean)theBoolean;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>byte</code> value.
 @param parameterName
 the parameter name.
 @param theByte
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setByteWithNSString:(NSString *)parameterName
                   withByte:(jbyte)theByte;

/*!
 @brief Sets the value of a specified parameter to a supplied array of bytes.
 The
 array is mapped to <code>VARBINARY</code> or else <code>LONGVARBINARY</code> in the
 connected database.
 @param parameterName
 the parameter name.
 @param theBytes
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setBytesWithNSString:(NSString *)parameterName
               withByteArray:(IOSByteArray *)theBytes;

/*!
 @brief Sets the value of a specified parameter to the character content of a
 <code>Reader</code> object, with the specified length of character data.
 @param parameterName
 the parameter name.
 @param reader
 the new value with which to update the parameter.
 @param length
 a count of the characters contained in <code>reader</code>.
 @throws SQLException
 if a database error occurs.
 */
- (void)setCharacterStreamWithNSString:(NSString *)parameterName
                      withJavaIoReader:(JavaIoReader *)reader
                               withInt:(jint)length;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>java.sql.Date</code>
  value.
 @param parameterName
 the parameter name.
 @param theDate
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setDateWithNSString:(NSString *)parameterName
            withJavaSqlDate:(JavaSqlDate *)theDate;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>java.sql.Date</code>
  value, using a supplied calendar to map the date.
 The
 calendar allows the application to control the timezone used to compute
 the SQL <code>DATE</code> in the database. In case that no calendar is
 supplied, the driver uses the default timezone of the Java virtual
 machine.
 @param parameterName
 the parameter name.
 @param theDate
 the new value with which to update the parameter.
 @param cal
 a <code>Calendar</code> to use to construct the SQL <code>DATE</code>
 value.
 @throws SQLException
 if a database error occurs.
 */
- (void)setDateWithNSString:(NSString *)parameterName
            withJavaSqlDate:(JavaSqlDate *)theDate
       withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>double</code>
 value.
 @param parameterName
 the parameter name.
 @param theDouble
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setDoubleWithNSString:(NSString *)parameterName
                   withDouble:(jdouble)theDouble;

/*!
 @brief Sets the value of a specified parameter to to a supplied <code>float</code>
 value.
 @param parameterName
 the parameter name.
 @param theFloat
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setFloatWithNSString:(NSString *)parameterName
                   withFloat:(jfloat)theFloat;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>int</code> value.
 @param parameterName
 the parameter name.
 @param theInt
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setIntWithNSString:(NSString *)parameterName
                   withInt:(jint)theInt;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>long</code> value.
 @param parameterName
 the parameter name.
 @param theLong
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setLongWithNSString:(NSString *)parameterName
                   withLong:(jlong)theLong;

/*!
 @brief Sets the value of a specified parameter to SQL <code>NULL</code>.
 Don't use
 this version of <code>setNull</code> for <i>User Defined Types</i> (UDT) or
 for <code>REF</code> type parameters.
 @param parameterName
 the parameter name.
 @param sqlType
 a JDBC type expressed as a constant from <code>Types</code>.
 @throws SQLException
 if a database error occurs.
 */
- (void)setNullWithNSString:(NSString *)parameterName
                    withInt:(jint)sqlType;

/*!
 @brief Sets the value of a specified parameter to be SQL <code>NULL</code> where the
 parameter type is either <code>REF</code> or user defined (e.g.
 <code>STRUCT</code>
 , <code>JAVA_OBJECT</code> etc).
 <p>
 For reasons of portability, the caller is expected to supply both the SQL
 type code and type name (which is just the parameter name if the type is
 user defined, referred to as a <code>UDT</code>, or the name of the referenced
 type in case of a <code>REF</code> type).
 @param parameterName
 the parameter name.
 @param sqlType
 a JDBC type expressed as a constant from <code>Types</code>.
 @param typeName
 if the target parameter is a user defined type then this
 should contain the full type name. The fully qualified name of
 a <code>UDT</code> or <code>REF</code> type is ignored if the parameter
 is not a <code>UDT</code>.
 @throws SQLException
 if a database error occurs.
 */
- (void)setNullWithNSString:(NSString *)parameterName
                    withInt:(jint)sqlType
               withNSString:(NSString *)typeName;

/*!
 @brief Sets the value of a specified parameter using a supplied object.
 Prior to
 issuing this request to the connected database <code>theObject</code> is
 transformed to the corresponding SQL type according to the standard Java
 to SQL mapping rules.
 <p>
 If the object's class implements the interface <code>SQLData</code>, the JDBC
 driver calls <code>SQLData.writeSQL</code> to write it to the SQL data stream.
 If <code>theObject</code> implements any of the following interfaces then the
 driver is in charge of mapping the value to the appropriate SQL type.
 <ul><li><code>Ref</code></li>
 <li><code>Struct</code></li>
 <li><code>Array</code></li>
 <li><code>Clob</code></li>
 <li><code>Blob</code></li> </ul>
 @param parameterName
 the parameter name
 @param theObject
 the new value with which to update the parameter
 @throws SQLException
 if a database error occurs.
 */
- (void)setObjectWithNSString:(NSString *)parameterName
                       withId:(id)theObject;

/*!
 @brief Sets the value of a specified parameter using a supplied object.
 <p>
 The parameter <code>theObject</code> is converted to the given <code>targetSqlType</code>
  before it is sent to the database. If the object has a
 custom mapping (its class implements the interface <code>SQLData</code>), the
 JDBC driver calls the method <code>SQLData.writeSQL</code> to write it to the
 SQL data stream. If <code>theObject</code> is an instance of one of the
 following types
 <ul>
 <li><code>Ref</code></li>
 <li><code>Struct</code></li>
 <li><code>Array</code></li>
 <li><code>Clob</code></li>
 <li><code>Blob</code></li>
 </ul>
 then the driver is in charge of mapping the value to the appropriate
 SQL type and deliver it to the database.
 @param parameterName
 the parameter name.
 @param theObject
 the new value with which to update the parameter.
 @param targetSqlType
 a JDBC type expressed as a constant from <code>Types</code>.
 @throws SQLException
 if a database error occurs.
 */
- (void)setObjectWithNSString:(NSString *)parameterName
                       withId:(id)theObject
                      withInt:(jint)targetSqlType;

/*!
 @brief Sets the value of a specified parameter using a supplied object.
 <p>
 The object is converted to the given <code>targetSqlType</code> before it is
 sent to the database. If the object has a custom mapping (its class
 implements the interface <code>SQLData</code>), the JDBC driver calls the
 method <code>SQLData.writeSQL</code> to write it to the SQL data stream. If
 <code>theObject</code> implements any of the following interfaces
 <ul>
 <li><code>Ref</code></li>
 <li><code>Struct</code></li>
 <li><code>Array</code></li>
 <li><code>Clob</code></li>
 <li><code>Blob</code></li>
 </ul>
 then the driver is charge of mapping the value to the appropriate
 SQL type.
 @param parameterName
 the parameter name.
 @param theObject
 the new value with which to update the parameter.
 @param targetSqlType
 a JDBC type expressed as a constant from <code>Types</code>.
 @param scale_
 where applicable, the number of digits after the decimal.
 point.
 @throws SQLException
 if a database error occurs.
 */
- (void)setObjectWithNSString:(NSString *)parameterName
                       withId:(id)theObject
                      withInt:(jint)targetSqlType
                      withInt:(jint)scale_;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>short</code>
 value.
 @param parameterName
 the name of the parameter.
 @param theShort
 a short value to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setShortWithNSString:(NSString *)parameterName
                   withShort:(jshort)theShort;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>String</code>.
 @param parameterName
 the name of the parameter.
 @param theString
 a <code>String</code> value to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setStringWithNSString:(NSString *)parameterName
                 withNSString:(NSString *)theString;

/*!
 @brief Sets the value of the parameter named <code>parameterName</code> to the value
 of the supplied <code>java.sql.Time</code>.
 @param parameterName
 the parameter name.
 @param theTime
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setTimeWithNSString:(NSString *)parameterName
            withJavaSqlTime:(JavaSqlTime *)theTime;

/*!
 @brief Sets the value of the parameter named <code>parameterName</code> to the value
 of the supplied <code>java.sql.Time</code> using the supplied calendar.
 <p>The driver uses the supplied <code>Calendar</code> to create the SQL
 <code>TIME</code> value, which allows it to use a custom timezone -
 otherwise the driver uses the VM defaults.
 See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
 @param parameterName
 the parameter name.
 @param theTime
 the new value with which to update the parameter.
 @param cal
 used for creating the new SQL <code>TIME</code> value.
 @throws SQLException
 if a database error occurs.
 */
- (void)setTimeWithNSString:(NSString *)parameterName
            withJavaSqlTime:(JavaSqlTime *)theTime
       withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>java.sql.Timestamp</code>
  value.
 @param parameterName
 the parameter name.
 @param theTimestamp
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setTimestampWithNSString:(NSString *)parameterName
            withJavaSqlTimestamp:(JavaSqlTimestamp *)theTimestamp;

/*!
 @brief Sets the value of a specified parameter to a supplied <code>java.sql.Timestamp</code>
  value, using the supplied calendar.
 <p>The driver uses the supplied calendar to create the SQL <code>TIMESTAMP</code>
 value, which allows it to use a custom timezone - otherwise the driver
 uses the VM defaults.
 See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
 @param parameterName
 the parameter name.
 @param theTimestamp
 the new value with which to update the parameter.
 @param cal
 used for creating the new SQL <code>TIME</code> value.
 @throws SQLException
 if a database error occurs.
 */
- (void)setTimestampWithNSString:(NSString *)parameterName
            withJavaSqlTimestamp:(JavaSqlTimestamp *)theTimestamp
            withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the value of a specified parameter to the supplied <code>java.net.URL</code>
 .
 @param parameterName
 the parameter name.
 @param theURL
 the new value with which to update the parameter.
 @throws SQLException
 if a database error occurs.
 */
- (void)setURLWithNSString:(NSString *)parameterName
            withJavaNetURL:(JavaNetURL *)theURL;

/*!
 @brief Gets whether the value of the last <code>OUT</code> parameter read was SQL
 <code>NULL</code>.
 @return true if the last parameter was SQL <code>NULL</code>, <code>false</code>
 otherwise.
 @throws SQLException
 if a database error occurs.
 */
- (jboolean)wasNull;

/*!
 @brief Gets the value of a specified <code>ROWID</code> parameter as a <code>java.sql.RowId</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlRowId>)getRowIdWithInt:(jint)parameterIndex;

/*!
 @brief Returns the value of the specified SQL ROWID parameter as a <code>java.sql.RowId</code>
 .
 @param parameterName the parameter name
 @throws SQLException if a database error occurs
 */
- (id<JavaSqlRowId>)getRowIdWithNSString:(NSString *)parameterName;

/*!
 @brief Sets the named parameter to the given <code>rowId</code>.
 @throws SQLException if a database error occurs
 */
- (void)setRowIdWithNSString:(NSString *)parameterName
            withJavaSqlRowId:(id<JavaSqlRowId>)rowId;

/*!
 @brief Sets the named parameter to the given <code>string</code>.
 @throws SQLException if a database error occurs
 */
- (void)setNStringWithNSString:(NSString *)parameterName
                  withNSString:(NSString *)string;

/*!
 @brief Sets the named parameter to the characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setNCharacterStreamWithNSString:(NSString *)parameterName
                       withJavaIoReader:(JavaIoReader *)reader
                               withLong:(jlong)length;

/*!
 @brief Sets the named parameter to the given <code>nclob</code>.
 @throws SQLException if a database error occurs
 */
- (void)setNClobWithNSString:(NSString *)parameterName
            withJavaSqlNClob:(id<JavaSqlNClob>)nclob;

/*!
 @brief Sets the named parameter to the next <code>length</code> characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setClobWithNSString:(NSString *)parameterName
           withJavaIoReader:(JavaIoReader *)reader
                   withLong:(jlong)length;

/*!
 @brief Sets the named parameter to the next <code>length</code> bytes from the given <code>inputStream</code>.
 @throws SQLException if a database error occurs
 */
- (void)setBlobWithNSString:(NSString *)parameterName
      withJavaIoInputStream:(JavaIoInputStream *)inputStream
                   withLong:(jlong)length;

/*!
 @brief Sets the named parameter to the next <code>length</code> characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setNClobWithNSString:(NSString *)parameterName
            withJavaIoReader:(JavaIoReader *)reader
                    withLong:(jlong)length;

/*!
 @brief Returns the value of the specified SQL NCLOB parameter as a <code>java.sql.NClob</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlNClob>)getNClobWithInt:(jint)parameterIndex;

/*!
 @brief Returns the value of the specified SQL NCLOB parameter as a <code>java.sql.NClob</code>
 .
 @param parameterName the parameter name
 @throws SQLException if a database error occurs
 */
- (id<JavaSqlNClob>)getNClobWithNSString:(NSString *)parameterName;

/*!
 @brief Sets the named parameter to the given <code>sqlXml</code>.
 @throws SQLException if a database error occurs
 */
- (void)setSQLXMLWithNSString:(NSString *)parameterName
            withJavaSqlSQLXML:(id<JavaSqlSQLXML>)sqlXml;

/*!
 @brief Returns the value of the specified SQL XML parameter as a <code>java.sql.SQLXML</code>
 .
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @throws SQLException
 if a database error occurs.
 */
- (id<JavaSqlSQLXML>)getSQLXMLWithInt:(jint)parameterIndex;

/*!
 @brief Returns the value of the specified SQL XML parameter as a <code>java.sql.SQLXML</code>
 .
 @param parameterName the parameter name
 @throws SQLException if a database error occurs
 */
- (id<JavaSqlSQLXML>)getSQLXMLWithNSString:(NSString *)parameterName;

/*!
 @brief Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a
 <code>java.lang.String</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @throws SQLException
 if a database error occurs.
 */
- (NSString *)getNStringWithInt:(jint)parameterIndex;

/*!
 @brief Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a <code>java.lang.String</code>
 .
 @param parameterName the parameter name
 @throws SQLException if a database error occurs
 */
- (NSString *)getNStringWithNSString:(NSString *)parameterName;

/*!
 @brief Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter
 as a <code>Reader</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @throws SQLException
 if a database error occurs.
 */
- (JavaIoReader *)getNCharacterStreamWithInt:(jint)parameterIndex;

/*!
 @brief Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a <code>java.io.Reader</code>
 .
 @param parameterName the parameter name
 @throws SQLException if a database error occurs
 */
- (JavaIoReader *)getNCharacterStreamWithNSString:(NSString *)parameterName;

/*!
 @brief Returns the value of the specified parameter as a <code>java.io.Reader</code>.
 @param parameterIndex
 the parameter number index, where the first parameter has
 index 1.
 @throws SQLException
 if a database error occurs.
 */
- (JavaIoReader *)getCharacterStreamWithInt:(jint)parameterIndex;

/*!
 @brief Returns the value of the specified parameter as a <code>java.io.Reader</code>.
 @param parameterName the parameter name
 @throws SQLException if a database error occurs
 */
- (JavaIoReader *)getCharacterStreamWithNSString:(NSString *)parameterName;

/*!
 @brief Sets the named parameter to the given <code>blob</code>.
 @throws SQLException if a database error occurs
 */
- (void)setBlobWithNSString:(NSString *)parameterName
            withJavaSqlBlob:(id<JavaSqlBlob>)blob;

/*!
 @brief Sets the named parameter to the given <code>clob</code>.
 @throws SQLException if a database error occurs
 */
- (void)setClobWithNSString:(NSString *)parameterName
            withJavaSqlClob:(id<JavaSqlClob>)clob;

/*!
 @brief Sets the named parameter to the next <code>length</code> bytes from the given <code>inputStream</code>.
 @throws SQLException if a database error occurs
 */
- (void)setAsciiStreamWithNSString:(NSString *)parameterName
             withJavaIoInputStream:(JavaIoInputStream *)x
                          withLong:(jlong)length;

/*!
 @brief Sets the named parameter to the bytes from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setAsciiStreamWithNSString:(NSString *)parameterName
             withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Sets the named parameter to the next <code>length</code> bytes from the given <code>inputStream</code>.
 @throws SQLException if a database error occurs
 */
- (void)setBinaryStreamWithNSString:(NSString *)parameterName
              withJavaIoInputStream:(JavaIoInputStream *)x
                           withLong:(jlong)length;

/*!
 @brief Sets the named parameter to the bytes from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setBinaryStreamWithNSString:(NSString *)parameterName
              withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Sets the named parameter to the next <code>length</code> characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setCharacterStreamWithNSString:(NSString *)parameterName
                      withJavaIoReader:(JavaIoReader *)reader
                              withLong:(jlong)length;

/*!
 @brief Sets the named parameter to the characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setCharacterStreamWithNSString:(NSString *)parameterName
                      withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Sets the named parameter to the characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setNCharacterStreamWithNSString:(NSString *)parameterName
                       withJavaIoReader:(JavaIoReader *)value;

/*!
 @brief Sets the named parameter to the characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setClobWithNSString:(NSString *)parameterName
           withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Sets the named parameter to the bytes from the given <code>inputStream</code>.
 @throws SQLException if a database error occurs
 */
- (void)setBlobWithNSString:(NSString *)parameterName
      withJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Sets the named parameter to the characters from the given <code>reader</code>.
 @throws SQLException if a database error occurs
 */
- (void)setNClobWithNSString:(NSString *)parameterName
            withJavaIoReader:(JavaIoReader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlCallableStatement)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlCallableStatement)

#endif // _JavaSqlCallableStatement_H_
