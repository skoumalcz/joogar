//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/ResultSetMetaData.java
//

#ifndef _JavaSqlResultSetMetaData_H_
#define _JavaSqlResultSetMetaData_H_

#include "J2ObjC_header.h"
#include "java/sql/Wrapper.h"

#define JavaSqlResultSetMetaData_columnNoNulls 0
#define JavaSqlResultSetMetaData_columnNullable 1
#define JavaSqlResultSetMetaData_columnNullableUnknown 2

/*!
 @brief Provides information about the columns returned in a <code>ResultSet</code>.
 */
@protocol JavaSqlResultSetMetaData < JavaSqlWrapper, NSObject, JavaObject >

/*!
 @brief Returns the title of an indexed column's catalog.
 @param column
 the column index, starting at 1.
 @return the catalog title.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getCatalogNameWithInt:(jint)column;

/*!
 @brief Returns the fully-qualified type of the class that is produced when
 invoking <code>ResultSet.getObject</code> to recover this column's value.
 @param column
 the column index, starting at 1.
 @return the fully-qualified class name.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getColumnClassNameWithInt:(jint)column;

/*!
 @brief Returns number of columns contained in the associated result set.
 @return the column count.
 @throws SQLException
 if there is a database error.
 */
- (jint)getColumnCount;

/*!
 @brief Returns the indexed column's standard maximum width, expressed in number
 of characters.
 @param column
 the column index, starting at 1.
 @return the column's max width.
 @throws SQLException
 if there is a database error.
 */
- (jint)getColumnDisplaySizeWithInt:(jint)column;

/*!
 @brief Returns a recommended title for the indexed column, to be used when the
 title needs to be displayed.
 @param column
 the column index, starting at 1.
 @return the column's title.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getColumnLabelWithInt:(jint)column;

/*!
 @brief Returns the title of the indexed column.
 @param column
 the column index, starting at 1.
 @return the column title.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getColumnNameWithInt:(jint)column;

/*!
 @brief Returns the type of the indexed column as SQL type code.
 @param column
 the column index, starting at 1.
 @return the column type code.
 @throws SQLException
 if there is a database error.
 */
- (jint)getColumnTypeWithInt:(jint)column;

/*!
 @brief Returns the type name of the indexed column.
 @param column
 the column index, starting at 1.
 @return the type name.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getColumnTypeNameWithInt:(jint)column;

/*!
 @brief Returns the decimal precision of the indexed column.
 @param column
 the column index, starting at 1.
 @return the precision.
 @throws SQLException
 if there is a database error.
 */
- (jint)getPrecisionWithInt:(jint)column;

/*!
 @brief Returns the number of digits to the right of the decimal point of the
 indexed column.
 @param column
 the column index, starting at 1.
 @return number of decimal places.
 @throws SQLException
 if there is a database error.
 */
- (jint)getScaleWithInt:(jint)column;

/*!
 @brief Returns the name of the indexed columns schema.
 @param column
 the column index, starting at 1.
 @return the name of the columns schema.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getSchemaNameWithInt:(jint)column;

/*!
 @brief Returns the title of the indexed columns table.
 @param column
 the column index, starting at 1.
 @return the table title.
 @throws SQLException
 if there is a database error.
 */
- (NSString *)getTableNameWithInt:(jint)column;

/*!
 @brief Returns an indication of whether the indexed column is automatically
 incremented and is therefore read-only.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if it is automatically numbered, <code>false</code>
 otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isAutoIncrementWithInt:(jint)column;

/*!
 @brief Returns an indication of whether the case of the indexed column is
 important.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if case matters, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isCaseSensitiveWithInt:(jint)column;

/*!
 @brief Returns whether the indexed column contains a monetary amount.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if it is a monetary value, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isCurrencyWithInt:(jint)column;

/*!
 @brief Returns an indication of whether writing to the indexed column is
 guaranteed to be successful.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if the write is guaranteed, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isDefinitelyWritableWithInt:(jint)column;

/*!
 @brief Returns whether the indexed column is nullable.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if it is nullable, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jint)isNullableWithInt:(jint)column;

/*!
 @brief Returns an indication of whether writing to the indexed column is
 guaranteed to be unsuccessful.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if the column is read-only, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isReadOnlyWithInt:(jint)column;

/*!
 @brief Returns an indication of whether the indexed column is searchable.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if the indexed column is searchable, <code>false</code>
 otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isSearchableWithInt:(jint)column;

/*!
 @brief Returns an indication of whether the values contained in the indexed
 column are signed.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if they are signed, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isSignedWithInt:(jint)column;

/*!
 @brief Returns an indication of whether writing to the indexed column is
 possible.
 @param column
 the column index, starting at 1.
 @return <code>true</code> if it is possible to write, <code>false</code> otherwise.
 @throws SQLException
 if there is a database error.
 */
- (jboolean)isWritableWithInt:(jint)column;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlResultSetMetaData)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSetMetaData, columnNoNulls, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSetMetaData, columnNullable, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaSqlResultSetMetaData, columnNullableUnknown, jint)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlResultSetMetaData)

#endif // _JavaSqlResultSetMetaData_H_
