//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/Struct.java
//

#ifndef _JavaSqlStruct_H_
#define _JavaSqlStruct_H_

#include "J2ObjC_header.h"

@class IOSObjectArray;
@protocol JavaUtilMap;

/*!
 @brief An interface which provides facilities for manipulating an SQL structured type
 as a Java object.
 The <code>Struct</code> object has a value for each attribute of the SQL structured
 type.
 */
@protocol JavaSqlStruct < NSObject, JavaObject >

/*!
 @brief Gets the SQL Type name of the SQL structured type that this <code>Struct</code>
  represents.
 @return the fully qualified name of SQL structured type.
 @throws SQLException
 if a database error occurs.
 */
- (NSString *)getSQLTypeName;

/*!
 @brief Gets the values of the attributes of this SQL structured type.
 This
 method uses the type map associated with the <code>Connection</code> for
 customized type mappings. Where there is no entry in the type mapping
 which matches this structured type, the JDBC driver uses the standard
 mapping.
 @return an <code>Object</code> array containing the ordered attributes.
 @throws SQLException
 if a database error occurs.
 */
- (IOSObjectArray *)getAttributes;

/*!
 @brief Gets the values of the attributes of this SQL structured type.
 This
 method uses the supplied type mapping to determine how to map SQL types
 to their corresponding Java objects. In the
 case where there is no entry in the type mapping which matches this
 structured type, the JDBC driver uses the default mapping. The <code>Connection</code>
  type map is <i>never</i> utilized by this method.
 @param theMap
 a Map describing how SQL Type names are mapped to classes.
 @return an Object array containing the ordered attributes,.
 @throws SQLException
 if a database error occurs.
 */
- (IOSObjectArray *)getAttributesWithJavaUtilMap:(id<JavaUtilMap>)theMap;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlStruct)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlStruct)

#endif // _JavaSqlStruct_H_
