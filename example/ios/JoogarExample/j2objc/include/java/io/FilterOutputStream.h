//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/FilterOutputStream.java
//

#ifndef _JavaIoFilterOutputStream_H_
#define _JavaIoFilterOutputStream_H_

#include "J2ObjC_header.h"
#include "java/io/OutputStream.h"

@class IOSByteArray;

/*!
 @brief Wraps an existing <code>OutputStream</code> and performs some transformation on
 the output data while it is being written.
 Transformations can be anything
 from a simple byte-wise filtering output data to an on-the-fly compression or
 decompression of the underlying stream. Output streams that wrap another
 output stream and provide some additional functionality on top of it usually
 inherit from this class.
 */
@interface JavaIoFilterOutputStream : JavaIoOutputStream {
 @public
  /*!
   @brief The target output stream for this filter stream.
   */
  JavaIoOutputStream *out_;
}

#pragma mark Public

/*!
 @brief Constructs a new <code>FilterOutputStream</code> with <code>out</code> as its
 target stream.
 @param outArg
 the target stream that this stream writes to.
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Closes this stream.
 This implementation closes the target stream.
 @throws IOException
 if an error occurs attempting to close this stream.
 */
- (void)close;

/*!
 @brief Ensures that all pending data is sent out to the target stream.
 This
 implementation flushes the target stream.
 @throws IOException
 if an error occurs attempting to flush this stream.
 */
- (void)flush;

/*!
 @brief Writes <code>count</code> bytes from the byte array <code>buffer</code> starting at
 <code>offset</code> to the target stream.
 @param buffer
 the buffer to write.
 @param offset
 the index of the first byte in <code>buffer</code> to write.
 @param length
 the number of bytes in <code>buffer</code> to write.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if
 <code>offset + count</code> is bigger than the length of
 <code>buffer</code>.
 @throws IOException
 if an I/O error occurs while writing to this stream.
 */
- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)length;

/*!
 @brief Writes one byte to the target stream.
 Only the low order byte of the
 integer <code>oneByte</code> is written.
 @param oneByte
 the byte to be written.
 @throws IOException
 if an I/O error occurs while writing to this stream.
 */
- (void)writeWithInt:(jint)oneByte;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoFilterOutputStream)

J2OBJC_FIELD_SETTER(JavaIoFilterOutputStream, out_, JavaIoOutputStream *)

FOUNDATION_EXPORT void JavaIoFilterOutputStream_initWithJavaIoOutputStream_(JavaIoFilterOutputStream *self, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT JavaIoFilterOutputStream *new_JavaIoFilterOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoFilterOutputStream)

#endif // _JavaIoFilterOutputStream_H_
