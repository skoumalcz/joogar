//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/PushbackReader.java
//

#ifndef _JavaIoPushbackReader_H_
#define _JavaIoPushbackReader_H_

#include "J2ObjC_header.h"
#include "java/io/FilterReader.h"

@class IOSCharArray;
@class JavaIoReader;

/*!
 @brief Wraps an existing <code>Reader</code> and adds functionality to "push back"
 characters that have been read, so that they can be read again.
 Parsers may
 find this useful. The number of characters which may be pushed back can be
 specified during construction. If the buffer of pushed back bytes is empty,
 characters are read from the underlying reader.
 */
@interface JavaIoPushbackReader : JavaIoFilterReader {
 @public
  /*!
   @brief The <code>char</code> array containing the chars to read.
   */
  IOSCharArray *buf_;
  /*!
   @brief The current position within the char array <code>buf</code>.
   A value
 equal to buf.length indicates no chars available. A value of 0 indicates
 the buffer is full.
   */
  jint pos_;
}

#pragma mark Public

/*!
 @brief Constructs a new <code>PushbackReader</code> with the specified reader as
 source.
 The size of the pushback buffer is set to the default value of 1
 character.
 @param inArg
 the source reader.
 */
- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg;

/*!
 @brief Constructs a new <code>PushbackReader</code> with <code>in</code> as source reader.
 The size of the pushback buffer is set to <code>size</code>.
 @param inArg
 the source reader.
 @param size
 the size of the pushback buffer.
 @throws IllegalArgumentException
 if <code>size</code> is negative.
 */
- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg
                             withInt:(jint)size;

/*!
 @brief Closes this reader.
 This implementation closes the source reader
 and releases the pushback buffer.
 @throws IOException
 if an error occurs while closing this reader.
 */
- (void)close;

/*!
 @brief Marks the current position in this stream.
 Setting a mark is not
 supported in this class; this implementation always throws an
 <code>IOException</code>.
 @param readAheadLimit
 the number of character that can be read from this reader
 before the mark is invalidated; this parameter is ignored.
 @throws IOException
 if this method is called.
 */
- (void)markWithInt:(jint)readAheadLimit;

/*!
 @brief Indicates whether this reader supports the <code>mark(int)</code> and
 <code>reset()</code> methods.
 <code>PushbackReader</code> does not support them, so
 it returns <code>false</code>.
 @return always <code>false</code>.
 */
- (jboolean)markSupported;

/*!
 @brief Reads a single character from this reader and returns it as an integer
 with the two higher-order bytes set to 0.
 Returns -1 if the end of the
 reader has been reached. If the pushback buffer does not contain any
 available characters then a character from the source reader is returned.
 Blocks until one character has been read, the end of the source reader is
 detected or an exception is thrown.
 @return the character read or -1 if the end of the source reader has been
 reached.
 @throws IOException
 if this reader is closed or an I/O error occurs while reading
 from this reader.
 */
- (jint)read;

/*!
 @brief Reads up to <code>count</code> characters from this reader and stores them in
 character array <code>buffer</code> starting at <code>offset</code>.
 Characters are
 read from the pushback buffer first, then from the source reader if more
 bytes are required. Blocks until <code>count</code> characters have been read,
 the end of the source reader is detected or an exception is thrown.
 Returns the number of bytes read or -1 if the end of the source reader has been reached.
 @throws IndexOutOfBoundsException
 if <code>offset < 0 || count < 0 || offset + count > buffer.length</code>.
 @throws IOException
 if this reader is closed or another I/O error occurs while
 reading from this reader.
 */
- (jint)readWithCharArray:(IOSCharArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)count;

/*!
 @brief Indicates whether this reader is ready to be read without blocking.
 Returns <code>true</code> if this reader will not block when <code>read</code> is
 called, <code>false</code> if unknown or blocking will occur.
 @return <code>true</code> if the receiver will not block when
 <code>read()</code> is called, <code>false</code> if unknown
 or blocking will occur.
 @throws IOException
 if this reader is closed or some other I/O error occurs.
 */
- (jboolean)ready;

/*!
 @brief Resets this reader to the last marked position.
 Resetting the reader is
 not supported in this class; this implementation always throws an
 <code>IOException</code>.
 @throws IOException
 if this method is called.
 */
- (void)reset;

/*!
 @brief Skips <code>charCount</code> characters in this reader.
 This implementation skips
 characters in the pushback buffer first and then in the source reader if
 necessary.
 @return the number of characters actually skipped.
 @throws IllegalArgumentException if <code>charCount < 0</code>.
 @throws IOException
 if this reader is closed or another I/O error occurs.
 */
- (jlong)skipWithLong:(jlong)charCount;

/*!
 @brief Pushes all the characters in <code>buffer</code> back to this reader.
 The
 characters are pushed back in such a way that the next character read
 from this reader is buffer[0], then buffer[1] and so on.
 <p>
 If this reader's internal pushback buffer cannot store the entire
 contents of <code>buffer</code>, an <code>IOException</code> is thrown. Parts of
 <code>buffer</code> may have already been copied to the pushback buffer when
 the exception is thrown.
 @param buffer
 the buffer containing the characters to push back to this
 reader.
 @throws IOException
 if this reader is closed or the free space in the internal
 pushback buffer is not sufficient to store the contents of
 <code>buffer</code>.
 */
- (void)unreadWithCharArray:(IOSCharArray *)buffer;

/*!
 @brief Pushes a subset of the characters in <code>buffer</code> back to this reader.
 The subset is defined by the start position <code>offset</code> within
 <code>buffer</code> and the number of characters specified by <code>length</code>.
 The bytes are pushed back in such a way that the next byte read from this
 stream is <code>buffer[offset]</code>, then <code>buffer[1]</code> and so on.
 <p>
 If this stream's internal pushback buffer cannot store the selected
 subset of <code>buffer</code>, an <code>IOException</code> is thrown. Parts of
 <code>buffer</code> may have already been copied to the pushback buffer when
 the exception is thrown.
 @param buffer
 the buffer containing the characters to push back to this
 reader.
 @param offset
 the index of the first byte in <code>buffer</code> to push back.
 @param length
 the number of bytes to push back.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if
 <code>offset + count</code> is greater than the length of
 <code>buffer</code>.
 @throws IOException
 if this reader is closed or the free space in the internal
 pushback buffer is not sufficient to store the selected
 contents of <code>buffer</code>.
 @throws NullPointerException
 if <code>buffer</code> is <code>null</code>.
 */
- (void)unreadWithCharArray:(IOSCharArray *)buffer
                    withInt:(jint)offset
                    withInt:(jint)length;

/*!
 @brief Pushes the specified character <code>oneChar</code> back to this reader.
 This
 is done in such a way that the next character read from this reader is
 <code>(char) oneChar</code>.
 <p>
 If this reader's internal pushback buffer cannot store the character, an
 <code>IOException</code> is thrown.
 @param oneChar
 the character to push back to this stream.
 @throws IOException
 if this reader is closed or the internal pushback buffer is
 full.
 */
- (void)unreadWithInt:(jint)oneChar;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoPushbackReader)

J2OBJC_FIELD_SETTER(JavaIoPushbackReader, buf_, IOSCharArray *)

FOUNDATION_EXPORT void JavaIoPushbackReader_initWithJavaIoReader_(JavaIoPushbackReader *self, JavaIoReader *inArg);

FOUNDATION_EXPORT JavaIoPushbackReader *new_JavaIoPushbackReader_initWithJavaIoReader_(JavaIoReader *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPushbackReader_initWithJavaIoReader_withInt_(JavaIoPushbackReader *self, JavaIoReader *inArg, jint size);

FOUNDATION_EXPORT JavaIoPushbackReader *new_JavaIoPushbackReader_initWithJavaIoReader_withInt_(JavaIoReader *inArg, jint size) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoPushbackReader)

#endif // _JavaIoPushbackReader_H_
