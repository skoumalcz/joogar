//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/CharArrayWriter.java
//

#ifndef _JavaIoCharArrayWriter_H_
#define _JavaIoCharArrayWriter_H_

#include "J2ObjC_header.h"
#include "java/io/Writer.h"

@class IOSCharArray;
@protocol JavaLangCharSequence;

/*!
 @brief A specialized <code>Writer</code> for class for writing content to an (internal)
 char array.
 As bytes are written to this writer, the char array may be
 expanded to hold more characters. When the writing is considered to be
 finished, a copy of the char array can be requested from the class.
 */
@interface JavaIoCharArrayWriter : JavaIoWriter {
 @public
  /*!
   @brief The buffer for characters.
   */
  IOSCharArray *buf_;
  /*!
   @brief The ending index of the buffer.
   */
  jint count_;
}

#pragma mark Public

/*!
 @brief Constructs a new <code>CharArrayWriter</code> which has a buffer allocated
 with the default size of 32 characters.
 This buffer is also used as the
 <code>lock</code> to synchronize access to this writer.
 */
- (instancetype)init;

/*!
 @brief Constructs a new <code>CharArrayWriter</code> which has a buffer allocated
 with the size of <code>initialSize</code> characters.
 The buffer is also used
 as the <code>lock</code> to synchronize access to this writer.
 @param initialSize
 the initial size of this CharArrayWriters buffer.
 @throws IllegalArgumentException
 if <code>initialSize < 0</code>.
 */
- (instancetype)initWithInt:(jint)initialSize;

/*!
 @brief Appends a char <code>c</code> to the <code>CharArrayWriter</code>.
 The method works
 the same way as <code>write(c)</code>.
 @param c
 the character appended to the CharArrayWriter.
 @return this CharArrayWriter.
 */
- (JavaIoCharArrayWriter *)appendWithChar:(jchar)c;

/*!
 @brief Appends a <code>CharSequence</code> to the <code>CharArrayWriter</code>.
 The method
 works the same way as <code>write(csq.toString())</code>. If <code>csq</code> is
 <code>null</code>, then it will be substituted with the string <code>"null"</code>.
 @param csq
 the <code>CharSequence</code> appended to the <code>CharArrayWriter</code>
 , may be <code>null</code>.
 @return this CharArrayWriter.
 */
- (JavaIoCharArrayWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq;

/*!
 @brief Append a subsequence of a <code>CharSequence</code> to the <code>CharArrayWriter</code>
 .
 The first and last characters of the subsequence are
 specified by the parameters <code>start</code> and <code>end</code>. A call to
 <code>CharArrayWriter.append(csq)</code> works the same way as <code>CharArrayWriter.write(csq.subSequence(start, end).toString)</code>
 . If <code>csq</code>
  is <code>null</code>, then it will be substituted with the string <code>"null"</code>
 .
 @param csq
 the <code>CharSequence</code> appended to the <code>CharArrayWriter</code>
 , may be <code>null</code>.
 @param start
 the index of the first character in the <code>CharSequence</code>
 appended to the <code>CharArrayWriter</code>.
 @param end
 the index of the character after the last one in the <code>CharSequence</code>
  appended to the <code>CharArrayWriter</code>.
 @return this CharArrayWriter.
 @throws IndexOutOfBoundsException
 if <code>start < 0</code>, <code>end < 0</code>, <code>start > end</code>,
 or if <code>end</code> is greater than the length of <code>csq</code>.
 */
- (JavaIoCharArrayWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                  withInt:(jint)start
                                                  withInt:(jint)end;

/*!
 @brief Closes this writer.
 The implementation in <code>CharArrayWriter</code> does nothing.
 */
- (void)close;

/*!
 @brief Flushes this writer.
 The implementation in <code>CharArrayWriter</code> does nothing.
 */
- (void)flush;

/*!
 @brief Resets this writer.
 The current write position is reset to the beginning
 of the buffer. All written characters are lost and the size of this
 writer is set to 0.
 */
- (void)reset;

/*!
 @brief Returns the size of this writer, that is the number of characters it
 stores.
 This number changes if this writer is reset or when more
 characters are written to it.
 @return this CharArrayWriter's current size in characters.
 */
- (jint)size;

/*!
 @brief Returns the contents of the receiver as a char array.
 The array returned
 is a copy and any modifications made to this writer after calling this
 method are not reflected in the result.
 @return this CharArrayWriter's contents as a new char array.
 */
- (IOSCharArray *)toCharArray;

/*!
 @brief Returns the contents of this <code>CharArrayWriter</code> as a string.
 The
 string returned is a copy and any modifications made to this writer after
 calling this method are not reflected in the result.
 @return this CharArrayWriters contents as a new string.
 */
- (NSString *)description;

/*!
 @brief Writes <code>count</code> characters starting at <code>offset</code> in <code>c</code>
 to this writer.
 @param buffer
 the non-null array containing characters to write.
 @param offset
 the index of the first character in <code>buf</code> to write.
 @param len
 maximum number of characters to write.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>len < 0</code>, or if
 <code>offset + len</code> is bigger than the size of <code>c</code>.
 */
- (void)writeWithCharArray:(IOSCharArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)len;

/*!
 @brief Writes the specified character <code>oneChar</code> to this writer.
 This implementation writes the two low order bytes of the integer
 <code>oneChar</code> to the buffer.
 @param oneChar
 the character to write.
 */
- (void)writeWithInt:(jint)oneChar;

/*!
 @brief Writes <code>count</code> characters starting at <code>offset</code> from
 the string <code>str</code> to this CharArrayWriter.
 @throws NullPointerException
 if <code>str</code> is <code>null</code>.
 @throws StringIndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if
 <code>offset + count</code> is bigger than the length of
 <code>str</code>.
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)offset
                  withInt:(jint)count;

/*!
 @brief Writes the contents of this <code>CharArrayWriter</code> to another <code>Writer</code>
 .
 The output is all the characters that have been written to the
 receiver since the last reset or since it was created.
 @param outArg
 the non-null <code>Writer</code> on which to write the contents.
 @throws NullPointerException
 if <code>out</code> is <code>null</code>.
 @throws IOException
 if an error occurs attempting to write out the contents.
 */
- (void)writeToWithJavaIoWriter:(JavaIoWriter *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoCharArrayWriter)

J2OBJC_FIELD_SETTER(JavaIoCharArrayWriter, buf_, IOSCharArray *)

FOUNDATION_EXPORT void JavaIoCharArrayWriter_init(JavaIoCharArrayWriter *self);

FOUNDATION_EXPORT JavaIoCharArrayWriter *new_JavaIoCharArrayWriter_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoCharArrayWriter_initWithInt_(JavaIoCharArrayWriter *self, jint initialSize);

FOUNDATION_EXPORT JavaIoCharArrayWriter *new_JavaIoCharArrayWriter_initWithInt_(jint initialSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoCharArrayWriter)

#endif // _JavaIoCharArrayWriter_H_
