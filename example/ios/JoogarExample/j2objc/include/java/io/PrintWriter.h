//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/PrintWriter.java
//

#ifndef _JavaIoPrintWriter_H_
#define _JavaIoPrintWriter_H_

#include "J2ObjC_header.h"
#include "java/io/Writer.h"

@class IOSCharArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoOutputStream;
@class JavaUtilLocale;
@protocol JavaLangCharSequence;

/*!
 @brief Wraps either an existing <code>OutputStream</code> or an existing <code>Writer</code>
 and provides convenience methods for printing common data types in a human
 readable format.
 No <code>IOException</code> is thrown by this class. Instead,
 callers should use <code>checkError()</code> to see if a problem has occurred in
 this writer.
 */
@interface JavaIoPrintWriter : JavaIoWriter {
 @public
  /*!
   @brief The writer to print data to.
   */
  JavaIoWriter *out_;
}

#pragma mark Public

/*!
 @brief Constructs a new <code>PrintWriter</code> with <code>file</code> as its target.
 The
 VM's default character set is used for character encoding.
 The print writer does not automatically flush its contents to the target
 file when a newline is encountered. The output to the file is buffered.
 @param file
 the target file. If the file already exists, its contents are
 removed, otherwise a new file is created.
 @throws FileNotFoundException
 if an error occurs while opening or creating the target file.
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Constructs a new <code>PrintWriter</code> with <code>file</code> as its target.
 The
 character set named <code>csn</code> is used for character encoding.
 The print writer does not automatically flush its contents to the target
 file when a newline is encountered. The output to the file is buffered.
 @param file
 the target file. If the file already exists, its contents are
 removed, otherwise a new file is created.
 @param csn
 the name of the character set used for character encoding.
 @throws FileNotFoundException
 if an error occurs while opening or creating the target file.
 @throws NullPointerException
 if <code>csn</code> is <code>null</code>.
 @throws UnsupportedEncodingException
 if the encoding specified by <code>csn</code> is not supported.
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                      withNSString:(NSString *)csn;

/*!
 @brief Constructs a new <code>PrintWriter</code> with <code>out</code> as its target
 stream.
 By default, the new print writer does not automatically flush its
 contents to the target stream when a newline is encountered.
 @param outArg
 the target output stream.
 @throws NullPointerException
 if <code>out</code> is <code>null</code>.
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Constructs a new <code>PrintWriter</code> with <code>out</code> as its target
 stream.
 The parameter <code>autoFlush</code> determines if the print writer
 automatically flushes its contents to the target stream when a newline is
 encountered.
 @param outArg
 the target output stream.
 @param autoFlush
 indicates whether contents are flushed upon encountering a
 newline sequence.
 @throws NullPointerException
 if <code>out</code> is <code>null</code>.
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                               withBoolean:(jboolean)autoFlush;

/*!
 @brief Constructs a new <code>PrintWriter</code> with the file identified by <code>fileName</code>
  as its target.
 The VM's default character set is
 used for character encoding. The print writer does not automatically
 flush its contents to the target file when a newline is encountered. The
 output to the file is buffered.
 @param fileName
 the target file's name. If the file already exists, its
 contents are removed, otherwise a new file is created.
 @throws FileNotFoundException
 if an error occurs while opening or creating the target file.
 */
- (instancetype)initWithNSString:(NSString *)fileName;

/*!
 @brief Constructs a new <code>PrintWriter</code> with the file identified by <code>fileName</code>
  as its target.
 The character set named <code>csn</code> is used for
 character encoding. The print writer does not automatically flush its
 contents to the target file when a newline is encountered. The output to
 the file is buffered.
 @param fileName
 the target file's name. If the file already exists, its
 contents are removed, otherwise a new file is created.
 @param csn
 the name of the character set used for character encoding.
 @throws FileNotFoundException
 if an error occurs while opening or creating the target file.
 @throws NullPointerException
 if <code>csn</code> is <code>null</code>.
 @throws UnsupportedEncodingException
 if the encoding specified by <code>csn</code> is not supported.
 */
- (instancetype)initWithNSString:(NSString *)fileName
                    withNSString:(NSString *)csn;

/*!
 @brief Constructs a new <code>PrintWriter</code> with <code>wr</code> as its target
 writer.
 By default, the new print writer does not automatically flush its
 contents to the target writer when a newline is encountered.
 @param wr
 the target writer.
 @throws NullPointerException
 if <code>wr</code> is <code>null</code>.
 */
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)wr;

/*!
 @brief Constructs a new <code>PrintWriter</code> with <code>out</code> as its target
 writer.
 The parameter <code>autoFlush</code> determines if the print writer
 automatically flushes its contents to the target writer when a newline is
 encountered.
 @param wr
 the target writer.
 @param autoFlush
 indicates whether to flush contents upon encountering a
 newline sequence.
 @throws NullPointerException
 if <code>out</code> is <code>null</code>.
 */
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)wr
                         withBoolean:(jboolean)autoFlush;

/*!
 @brief Appends the character <code>c</code> to the target.
 @param c
 the character to append to the target.
 @return this writer.
 */
- (JavaIoPrintWriter *)appendWithChar:(jchar)c;

/*!
 @brief Appends the character sequence <code>csq</code> to the target.
 This
 method works the same way as <code>PrintWriter.print(csq.toString())</code>.
 If <code>csq</code> is <code>null</code>, then the string "null" is written
 to the target.
 @param csq
 the character sequence appended to the target.
 @return this writer.
 */
- (JavaIoPrintWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq;

/*!
 @brief Appends a subsequence of the character sequence <code>csq</code> to the
 target.
 This method works the same way as <code>PrintWriter.print(csq.subsequence(start, end).toString())</code>
 . If <code>csq</code>
  is <code>null</code>, then the specified subsequence of the string "null"
 will be written to the target.
 @param csq
 the character sequence appended to the target.
 @param start
 the index of the first char in the character sequence appended
 to the target.
 @param end
 the index of the character following the last character of the
 subsequence appended to the target.
 @return this writer.
 @throws StringIndexOutOfBoundsException
 if <code>start > end</code>, <code>start < 0</code>, <code>end < 0</code> or
 either <code>start</code> or <code>end</code> are greater or equal than
 the length of <code>csq</code>.
 */
- (JavaIoPrintWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                              withInt:(jint)start
                                              withInt:(jint)end;

/*!
 @brief Flushes this writer and returns the value of the error flag.
 @return <code>true</code> if either an <code>IOException</code> has been thrown
 previously or if <code>setError()</code> has been called;
 <code>false</code> otherwise.
 */
- (jboolean)checkError;

/*!
 @brief Closes this print writer.
 Flushes this writer and then closes the target.
 If an I/O error occurs, this writer's error flag is set to <code>true</code>.
 */
- (void)close;

/*!
 @brief Ensures that all pending data is sent out to the target.
 It also
 flushes the target. If an I/O error occurs, this writer's error
 state is set to <code>true</code>.
 */
- (void)flush;

/*!
 @brief Writes a string formatted by an intermediate <code>Formatter</code> to the
 target using the specified locale, format string and arguments.
 If
 automatic flushing is enabled then this writer is flushed.
 @param l
 the locale used in the method. No localization will be applied
 if <code>l</code> is <code>null</code>.
 @param format the format string (see <code>java.util.Formatter.format</code>)
 @param args
 the list of arguments passed to the formatter. If there are
 more arguments than required by <code>format</code>,
 additional arguments are ignored.
 @return this writer.
 @throws IllegalFormatException
 if the format string is illegal or incompatible with the
 arguments, if there are not enough arguments or if any other
 error regarding the format string or arguments is detected.
 @throws NullPointerException if <code>format == null</code>
 */
- (JavaIoPrintWriter *)formatWithJavaUtilLocale:(JavaUtilLocale *)l
                                   withNSString:(NSString *)format
                              withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Formats <code>args</code> according to the format string <code>format</code>, and writes the result
 to this stream.
 This method uses the user's default locale.
 See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
 If automatic flushing is enabled then the buffer is flushed as well.
 @param format the format string (see <code>java.util.Formatter.format</code>)
 @param args
 the list of arguments passed to the formatter. If there are
 more arguments than required by <code>format</code>,
 additional arguments are ignored.
 @return this writer.
 @throws IllegalFormatException
 if the format string is illegal or incompatible with the
 arguments, if there are not enough arguments or if any other
 error regarding the format string or arguments is detected.
 @throws NullPointerException if <code>format == null</code>
 */
- (JavaIoPrintWriter *)formatWithNSString:(NSString *)format
                        withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Prints the string representation of the specified boolean to the target.
 @param bool_
 the boolean value to print the target.
 */
- (void)printWithBoolean:(jboolean)bool_;

/*!
 @brief Prints the string representation of the specified character to the
 target.
 @param ch
 the character to print to the target.
 */
- (void)printWithChar:(jchar)ch;

/*!
 @brief Prints the string representation of the specified character array
 to the target.
 @param charArray
 the character array to print to the target.
 */
- (void)printWithCharArray:(IOSCharArray *)charArray;

/*!
 @brief Prints the string representation of the specified double to the target.
 @param dnum
 the double value to print to the target.
 */
- (void)printWithDouble:(jdouble)dnum;

/*!
 @brief Prints the string representation of the specified float to the target.
 @param fnum
 the float value to print to the target.
 */
- (void)printWithFloat:(jfloat)fnum;

/*!
 @brief Prints the string representation of the specified integer to the target.
 @param inum
 the integer value to print to the target.
 */
- (void)printWithInt:(jint)inum;

/*!
 @brief Prints the string representation of the specified long to the target.
 @param lnum
 the long value to print to the target.
 */
- (void)printWithLong:(jlong)lnum;

/*!
 @brief Prints the string representation of the specified object to the target.
 @param obj
 the object to print to the target.
 */
- (void)printWithId:(id)obj;

/*!
 @brief Prints a string to the target.
 The string is converted to an array of
 bytes using the encoding chosen during the construction of this writer.
 The bytes are then written to the target with <code>write(int)</code>.
 <p>
 If an I/O error occurs, this writer's error flag is set to <code>true</code>.
 @param str
 the string to print to the target.
 */
- (void)printWithNSString:(NSString *)str;

/*!
 @brief Prints a formatted string.
 The behavior of this method is the same as
 this writer's <code>#format(Locale, String, Object...)</code> method.
 @param l
 the locale used in the method. No localization will be applied
 if <code>l</code> is <code>null</code>.
 @param format the format string (see <code>java.util.Formatter.format</code>)
 @param args
 the list of arguments passed to the formatter. If there are
 more arguments than required by <code>format</code>,
 additional arguments are ignored.
 @return this writer.
 @throws IllegalFormatException
 if the format string is illegal or incompatible with the
 arguments, if there are not enough arguments or if any other
 error regarding the format string or arguments is detected.
 @throws NullPointerException if <code>format == null</code>
 */
- (JavaIoPrintWriter *)printfWithJavaUtilLocale:(JavaUtilLocale *)l
                                   withNSString:(NSString *)format
                              withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Prints a formatted string.
 The behavior of this method is the same as
 this writer's <code>#format(String, Object...)</code> method.
 <p>The <code>Locale</code> used is the user's default locale.
 See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
 @param format the format string (see <code>java.util.Formatter.format</code>)
 @param args
 the list of arguments passed to the formatter. If there are
 more arguments than required by <code>format</code>,
 additional arguments are ignored.
 @return this writer.
 @throws IllegalFormatException
 if the format string is illegal or incompatible with the
 arguments, if there are not enough arguments or if any other
 error regarding the format string or arguments is detected.
 @throws NullPointerException if <code>format == null</code>
 */
- (JavaIoPrintWriter *)printfWithNSString:(NSString *)format
                        withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Prints a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)println;

/*!
 @brief Prints the string representation of the boolean <code>b</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithBoolean:(jboolean)b;

/*!
 @brief Prints the string representation of the char <code>c</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithChar:(jchar)c;

/*!
 @brief Prints the string representation of the character array <code>chars</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithCharArray:(IOSCharArray *)chars;

/*!
 @brief Prints the string representation of the double <code>d</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithDouble:(jdouble)d;

/*!
 @brief Prints the string representation of the float <code>f</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithFloat:(jfloat)f;

/*!
 @brief Prints the string representation of the int <code>i</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithInt:(jint)i;

/*!
 @brief Prints the string representation of the long <code>l</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithLong:(jlong)l;

/*!
 @brief Prints the string representation of the object <code>o</code>, or <code>"null</code>,
 followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 */
- (void)printlnWithId:(id)obj;

/*!
 @brief Prints the string representation of the string <code>s</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code>.
 <p>The string is converted to an array of bytes using the
 encoding chosen during the construction of this writer. The bytes are
 then written to the target with <code>write(int)</code>. Finally, this writer
 is flushed if the autoFlush flag is set to <code>true</code>.
 <p>If an I/O error occurs, this writer's error flag is set to <code>true</code>.
 */
- (void)printlnWithNSString:(NSString *)str;

/*!
 @brief Writes the character buffer <code>buf</code> to the target.
 @param buf
 the non-null array containing characters to write.
 */
- (void)writeWithCharArray:(IOSCharArray *)buf;

/*!
 @brief Writes <code>count</code> characters from <code>buffer</code> starting at <code>offset</code>
  to the target.
 <p>
 This writer's error flag is set to <code>true</code> if this writer is closed
 or an I/O error occurs.
 @param buf
 the buffer to write to the target.
 @param offset
 the index of the first character in <code>buffer</code> to write.
 @param count
 the number of characters in <code>buffer</code> to write.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if <code>offset + count</code>
  is greater than the length of <code>buf</code>.
 */
- (void)writeWithCharArray:(IOSCharArray *)buf
                   withInt:(jint)offset
                   withInt:(jint)count;

/*!
 @brief Writes one character to the target.
 Only the two least significant bytes
 of the integer <code>oneChar</code> are written.
 <p>
 This writer's error flag is set to <code>true</code> if this writer is closed
 or an I/O error occurs.
 @param oneChar
 the character to write to the target.
 */
- (void)writeWithInt:(jint)oneChar;

/*!
 @brief Writes the characters from the specified string to the target.
 @param str
 the non-null string containing the characters to write.
 */
- (void)writeWithNSString:(NSString *)str;

/*!
 @brief Writes <code>count</code> characters from <code>str</code> starting at <code>offset</code>
  to the target.
 @param str
 the non-null string containing the characters to write.
 @param offset
 the index of the first character in <code>str</code> to write.
 @param count
 the number of characters from <code>str</code> to write.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if <code>offset + count</code>
  is greater than the length of <code>str</code>.
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)offset
                  withInt:(jint)count;

#pragma mark Protected

/*!
 @brief Sets the error state of the stream to false.
 @since 1.6
 */
- (void)clearError;

/*!
 @brief Sets the error flag of this writer to true.
 */
- (void)setError;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoPrintWriter)

J2OBJC_FIELD_SETTER(JavaIoPrintWriter, out_, JavaIoWriter *)

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithJavaIoOutputStream_(JavaIoPrintWriter *self, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JavaIoPrintWriter *self, JavaIoOutputStream *outArg, jboolean autoFlush);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JavaIoOutputStream *outArg, jboolean autoFlush) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithJavaIoWriter_(JavaIoPrintWriter *self, JavaIoWriter *wr);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithJavaIoWriter_(JavaIoWriter *wr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(JavaIoPrintWriter *self, JavaIoWriter *wr, jboolean autoFlush);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(JavaIoWriter *wr, jboolean autoFlush) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithJavaIoFile_(JavaIoPrintWriter *self, JavaIoFile *file);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithJavaIoFile_withNSString_(JavaIoPrintWriter *self, JavaIoFile *file, NSString *csn);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *csn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithNSString_(JavaIoPrintWriter *self, NSString *fileName);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithNSString_(NSString *fileName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPrintWriter_initWithNSString_withNSString_(JavaIoPrintWriter *self, NSString *fileName, NSString *csn);

FOUNDATION_EXPORT JavaIoPrintWriter *new_JavaIoPrintWriter_initWithNSString_withNSString_(NSString *fileName, NSString *csn) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoPrintWriter)

#endif // _JavaIoPrintWriter_H_
