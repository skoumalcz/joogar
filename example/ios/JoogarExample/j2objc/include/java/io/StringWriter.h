//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/StringWriter.java
//

#ifndef _JavaIoStringWriter_H_
#define _JavaIoStringWriter_H_

#include "J2ObjC_header.h"
#include "java/io/Writer.h"

@class IOSCharArray;
@class JavaLangStringBuffer;
@protocol JavaLangCharSequence;

/*!
 @brief A specialized <code>Writer</code> that writes characters to a <code>StringBuffer</code>
 in a sequential manner, appending them in the process.
 The result can later
 be queried using the <code>StringWriter(int)</code> or <code>toString()</code>
 methods.
 */
@interface JavaIoStringWriter : JavaIoWriter

#pragma mark Public

/*!
 @brief Constructs a new <code>StringWriter</code> which has a <code>StringBuffer</code>
 allocated with the default size of 16 characters.
 The <code>StringBuffer</code>
  is also the <code>lock</code> used to synchronize access to this
 writer.
 */
- (instancetype)init;

/*!
 @brief Constructs a new <code>StringWriter</code> which has a <code>StringBuffer</code>
 allocated with a size of <code>initialSize</code> characters.
 The <code>StringBuffer</code>
  is also the <code>lock</code> used to synchronize access to this
 writer.
 @param initialSize
 the initial size of the target string buffer.
 */
- (instancetype)initWithInt:(jint)initialSize;

/*!
 @brief Appends the character <code>c</code> to this writer's <code>StringBuffer</code>.
 This method works the same way as <code>write(int)</code>.
 @param c
 the character to append to the target stream.
 @return this writer.
 */
- (JavaIoStringWriter *)appendWithChar:(jchar)c;

/*!
 @brief Appends the character sequence <code>csq</code> to this writer's <code>StringBuffer</code>
 .
 This method works the same way as <code>StringWriter.write(csq.toString())</code>
 . If <code>csq</code> is <code>null</code>, then
 the string "null" is written to the target stream.
 @param csq
 the character sequence appended to the target.
 @return this writer.
 */
- (JavaIoStringWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq;

/*!
 @brief Appends a subsequence of the character sequence <code>csq</code> to this
 writer's <code>StringBuffer</code>.
 This method works the same way as <code>StringWriter.writer(csq.subsequence(start, end).toString())</code>
 . If <code>csq</code>
  is <code>null</code>, then the specified subsequence of the string "null"
 will be written to the target.
 @param csq
 the character sequence appended to the target.
 @param start
 the index of the first char in the character sequence appended
 to the target.
 @param end
 the index of the character following the last character of the
 subsequence appended to the target.
 @return this writer.
 @throws IndexOutOfBoundsException
 if <code>start > end</code>, <code>start < 0</code>, <code>end < 0</code> or
 either <code>start</code> or <code>end</code> are greater or equal than
 the length of <code>csq</code>.
 */
- (JavaIoStringWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                               withInt:(jint)start
                                               withInt:(jint)end;

/*!
 @brief Calling this method has no effect.
 In contrast to most <code>Writer</code> subclasses,
 the other methods in <code>StringWriter</code> do not throw an <code>IOException</code> if
 <code>close()</code> has been called.
 @throws IOException
 if an error occurs while closing this writer.
 */
- (void)close;

/*!
 @brief Calling this method has no effect.
 */
- (void)flush;

/*!
 @brief Gets a reference to this writer's internal <code>StringBuffer</code>.
 Any
 changes made to the returned buffer are reflected in this writer.
 @return a reference to this writer's internal <code>StringBuffer</code>.
 */
- (JavaLangStringBuffer *)getBuffer;

/*!
 @brief Gets a copy of the contents of this writer as a string.
 @return this writer's contents as a string.
 */
- (NSString *)description;

/*!
 @brief Writes <code>count</code> characters starting at <code>offset</code> in <code>buf</code>
 to this writer's <code>StringBuffer</code>.
 @param chars
 the non-null character array to write.
 @param offset
 the index of the first character in <code>chars</code> to write.
 @param count
 the maximum number of characters to write.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if <code>offset + count</code>
  is greater than the size of <code>buf</code>.
 */
- (void)writeWithCharArray:(IOSCharArray *)chars
                   withInt:(jint)offset
                   withInt:(jint)count;

/*!
 @brief Writes one character to this writer's <code>StringBuffer</code>.
 Only the two
 least significant bytes of the integer <code>oneChar</code> are written.
 @param oneChar
 the character to write to this writer's <code>StringBuffer</code>.
 */
- (void)writeWithInt:(jint)oneChar;

/*!
 @brief Writes the characters from the specified string to this writer's <code>StringBuffer</code>
 .
 @param str
 the non-null string containing the characters to write.
 */
- (void)writeWithNSString:(NSString *)str;

/*!
 @brief Writes <code>count</code> characters from <code>str</code> starting at <code>offset</code>
  to this writer's <code>StringBuffer</code>.
 @param str
 the non-null string containing the characters to write.
 @param offset
 the index of the first character in <code>str</code> to write.
 @param count
 the number of characters from <code>str</code> to write.
 @throws StringIndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if <code>offset + count</code>
  is greater than the length of <code>str</code>.
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)offset
                  withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoStringWriter)

FOUNDATION_EXPORT void JavaIoStringWriter_init(JavaIoStringWriter *self);

FOUNDATION_EXPORT JavaIoStringWriter *new_JavaIoStringWriter_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoStringWriter_initWithInt_(JavaIoStringWriter *self, jint initialSize);

FOUNDATION_EXPORT JavaIoStringWriter *new_JavaIoStringWriter_initWithInt_(jint initialSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoStringWriter)

#endif // _JavaIoStringWriter_H_
