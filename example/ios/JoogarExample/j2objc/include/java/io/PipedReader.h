//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/PipedReader.java
//

#ifndef _JavaIoPipedReader_H_
#define _JavaIoPipedReader_H_

#include "J2ObjC_header.h"
#include "java/io/Reader.h"

@class IOSCharArray;
@class JavaIoPipedWriter;

/*!
 @brief Receives information on a communications pipe.
 When two threads want to pass
 data back and forth, one creates a piped writer and the other creates a piped
 reader.
 */
@interface JavaIoPipedReader : JavaIoReader {
 @public
  /*!
   @brief Indicates if this pipe is connected
   */
  jboolean isConnected_;
}

#pragma mark Public

/*!
 @brief Constructs a new unconnected <code>PipedReader</code>.
 The resulting reader
 must be connected to a <code>PipedWriter</code> before data may be read from
 it.
 */
- (instancetype)init;

/*!
 @brief Constructs a new unconnected <code>PipedReader</code> with the given buffer size.
 The resulting reader must be connected to a <code>PipedWriter</code> before
 data may be read from it.
 @param pipeSize the size of the buffer in chars.
 @throws IllegalArgumentException if pipeSize is less than or equal to zero.
 @since 1.6
 */
- (instancetype)initWithInt:(jint)pipeSize;

/*!
 @brief Constructs a new <code>PipedReader</code> connected to the <code>PipedWriter</code>
 <code>out</code>.
 Any data written to the writer can be read from the this
 reader.
 @param outArg
 the <code>PipedWriter</code> to connect to.
 @throws IOException
 if <code>out</code> is already connected.
 */
- (instancetype)initWithJavaIoPipedWriter:(JavaIoPipedWriter *)outArg;

/*!
 @brief Constructs a new <code>PipedReader</code> connected to the given <code>PipedWriter</code>,
 with the given buffer size.
 Any data written to the writer can be read from
 this reader.
 @param outArg the <code>PipedWriter</code> to connect to.
 @param pipeSize the size of the buffer in chars.
 @throws IOException if an I/O error occurs
 @throws IllegalArgumentException if pipeSize is less than or equal to zero.
 @since 1.6
 */
- (instancetype)initWithJavaIoPipedWriter:(JavaIoPipedWriter *)outArg
                                  withInt:(jint)pipeSize;

/*!
 @brief Closes this reader.
 This implementation releases the buffer used for
 the pipe and notifies all threads waiting to read or write.
 @throws IOException
 if an error occurs while closing this reader.
 */
- (void)close;

/*!
 @brief Connects this <code>PipedReader</code> to a <code>PipedWriter</code>.
 Any data
 written to the writer becomes readable in this reader.
 @param src
 the writer to connect to.
 @throws IOException
 if this reader is closed or already connected, or if <code>src</code>
  is already connected.
 */
- (void)connectWithJavaIoPipedWriter:(JavaIoPipedWriter *)src;

/*!
 @brief Reads a single character from this reader and returns it as an integer
 with the two higher-order bytes set to 0.
 Returns -1 if the end of the
 reader has been reached. If there is no data in the pipe, this method
 blocks until data is available, the end of the reader is detected or an
 exception is thrown.
 <p>
 Separate threads should be used to read from a <code>PipedReader</code> and to
 write to the connected <code>PipedWriter</code>. If the same thread is used,
 a deadlock may occur.
 @return the character read or -1 if the end of the reader has been
 reached.
 @throws IOException
 if this reader is closed or some other I/O error occurs.
 */
- (jint)read;

/*!
 @brief Reads at most <code>count</code> characters from this reader and stores them
 in the character array <code>buffer</code> starting at <code>offset</code>.
 If
 there is no data in the pipe, this method blocks until at least one byte
 has been read, the end of the reader is detected or an exception is
 thrown.
 <p>
 Separate threads should be used to read from a <code>PipedReader</code> and to
 write to the connected <code>PipedWriter</code>. If the same thread is used, a
 deadlock may occur.
 @param buffer
 the character array in which to store the characters read.
 @param offset
 the initial position in <code>bytes</code> to store the characters
 read from this reader.
 @param count
 the maximum number of characters to store in <code>buffer</code>.
 @return the number of characters read or -1 if the end of the reader has
 been reached.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if <code>offset + count</code>
  is greater than the size of <code>buffer</code>.
 @throws InterruptedIOException
 if the thread reading from this reader is interrupted.
 @throws IOException
 if this reader is closed or not connected to a writer, or if
 the thread writing to the connected writer is no longer
 alive.
 */
- (jint)readWithCharArray:(IOSCharArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)count;

/*!
 @brief Indicates whether this reader is ready to be read without blocking.
 Returns <code>true</code> if this reader will not block when <code>read</code> is
 called, <code>false</code> if unknown or blocking will occur. This
 implementation returns <code>true</code> if the internal buffer contains
 characters that can be read.
 @return always <code>false</code>.
 @throws IOException
 if this reader is closed or not connected, or if some other
 I/O error occurs.
 */
- (jboolean)ready;

#pragma mark Package-Private

- (void)done;

/*!
 @brief Establishes the connection to the PipedWriter.
 @throws IOException
 If this Reader is already connected.
 */
- (void)establishConnection;

/*!
 @brief Receives a char and stores it into the PipedReader.
 This called by
 PipedWriter.write() when writes occur.
 <P>
 If the buffer is full and the thread sending #receive is interrupted, the
 InterruptedIOException will be thrown.
 @param oneChar
 the char to store into the pipe.
 @throws IOException
 If the stream is already closed or another IOException
 occurs.
 */
- (void)receiveWithChar:(jchar)oneChar;

/*!
 @brief Receives a char array and stores it into the PipedReader.
 This called by
 PipedWriter.write() when writes occur.
 <P>
 If the buffer is full and the thread sending #receive is interrupted, the
 InterruptedIOException will be thrown.
 @throws IOException
 If the stream is already closed or another IOException
 occurs.
 */
- (void)receiveWithCharArray:(IOSCharArray *)chars
                     withInt:(jint)offset
                     withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoPipedReader)

FOUNDATION_EXPORT void JavaIoPipedReader_init(JavaIoPipedReader *self);

FOUNDATION_EXPORT JavaIoPipedReader *new_JavaIoPipedReader_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPipedReader_initWithJavaIoPipedWriter_(JavaIoPipedReader *self, JavaIoPipedWriter *outArg);

FOUNDATION_EXPORT JavaIoPipedReader *new_JavaIoPipedReader_initWithJavaIoPipedWriter_(JavaIoPipedWriter *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPipedReader_initWithInt_(JavaIoPipedReader *self, jint pipeSize);

FOUNDATION_EXPORT JavaIoPipedReader *new_JavaIoPipedReader_initWithInt_(jint pipeSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaIoPipedReader_initWithJavaIoPipedWriter_withInt_(JavaIoPipedReader *self, JavaIoPipedWriter *outArg, jint pipeSize);

FOUNDATION_EXPORT JavaIoPipedReader *new_JavaIoPipedReader_initWithJavaIoPipedWriter_withInt_(JavaIoPipedWriter *outArg, jint pipeSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoPipedReader)

#endif // _JavaIoPipedReader_H_
