//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/EmulatedFieldsForDumping.java
//

#ifndef _JavaIoEmulatedFieldsForDumping_H_
#define _JavaIoEmulatedFieldsForDumping_H_

#include "J2ObjC_header.h"
#include "java/io/ObjectOutputStream.h"

@class JavaIoEmulatedFields;
@class JavaIoObjectStreamClass;
@protocol JavaIoObjectOutput;

/*!
 @brief An EmulatedFieldsForDumping is an object that represents a set of emulated
 fields for an object being dumped.
 It is a concrete implementation for
 ObjectOutputStream.PutField
 */
@interface JavaIoEmulatedFieldsForDumping : JavaIoObjectOutputStream_PutField

#pragma mark Public

/*!
 @brief Find and set the boolean value of a given field named <code>name</code>
 in the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
            withBoolean:(jboolean)value;

/*!
 @brief Find and set the byte value of a given field named <code>name</code> in
 the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
               withByte:(jbyte)value;

/*!
 @brief Find and set the char value of a given field named <code>name</code> in
 the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
               withChar:(jchar)value;

/*!
 @brief Find and set the double value of a given field named <code>name</code>
 in the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
             withDouble:(jdouble)value;

/*!
 @brief Find and set the float value of a given field named <code>name</code>
 in the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
              withFloat:(jfloat)value;

/*!
 @brief Find and set the int value of a given field named <code>name</code> in
 the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
                withInt:(jint)value;

/*!
 @brief Find and set the long value of a given field named <code>name</code> in
 the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
               withLong:(jlong)value;

/*!
 @brief Find and set the Object value of a given field named <code>name</code>
 in the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
                 withId:(id)value;

/*!
 @brief Find and set the short value of a given field named <code>name</code>
 in the receiver.
 @param name
 A String, the name of the field to set
 @param value
 New value for the field.
 */
- (void)putWithNSString:(NSString *)name
              withShort:(jshort)value;

/*!
 @brief Write the field values to the specified ObjectOutput.
 @param output
 the ObjectOutput
 @throws IOException
 If an IO exception happened when writing the field values.
 */
- (void)writeWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)output;

#pragma mark Package-Private

/*!
 @brief Constructs a new instance of EmulatedFieldsForDumping.
 @param streamClass
 a ObjectStreamClass, which describe the fields to be emulated
 (names, types, etc).
 */
- (instancetype)initWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos
                     withJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)streamClass;

/*!
 @brief Return the actual EmulatedFields instance used by the receiver.
 We have
 the actual work in a separate class so that the code can be shared. The
 receiver has to be of a subclass of PutField.
 @return array of ObjectSlot the receiver represents.
 */
- (JavaIoEmulatedFields *)emulatedFields;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoEmulatedFieldsForDumping)

FOUNDATION_EXPORT void JavaIoEmulatedFieldsForDumping_initWithJavaIoObjectOutputStream_withJavaIoObjectStreamClass_(JavaIoEmulatedFieldsForDumping *self, JavaIoObjectOutputStream *oos, JavaIoObjectStreamClass *streamClass);

FOUNDATION_EXPORT JavaIoEmulatedFieldsForDumping *new_JavaIoEmulatedFieldsForDumping_initWithJavaIoObjectOutputStream_withJavaIoObjectStreamClass_(JavaIoObjectOutputStream *oos, JavaIoObjectStreamClass *streamClass) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaIoEmulatedFieldsForDumping)

#endif // _JavaIoEmulatedFieldsForDumping_H_
