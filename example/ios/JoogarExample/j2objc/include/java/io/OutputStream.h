//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/io/OutputStream.java
//

#ifndef _JavaIoOutputStream_H_
#define _JavaIoOutputStream_H_

#include "J2ObjC_header.h"
#include "java/io/Closeable.h"
#include "java/io/Flushable.h"

@class IOSByteArray;

/*!
 @brief A writable sink for bytes.
 <p>Most clients will use output streams that write data to the file system
 (<code>FileOutputStream</code>), the network (<code>java.net.Socket.getOutputStream()</code>/<code>java.net.HttpURLConnection.getOutputStream()</code>
 ), or to an in-memory byte array
 (<code>ByteArrayOutputStream</code>).
 <p>Use <code>OutputStreamWriter</code> to adapt a byte stream like this one into a
 character stream.
 <p>Most clients should wrap their output stream with <code>BufferedOutputStream</code>
 . Callers that do only bulk writes may omit buffering.
 <h3>Subclassing OutputStream</h3>
 Subclasses that decorate another output stream should consider subclassing
 <code>FilterOutputStream</code>, which delegates all calls to the target output
 stream.
 <p>All output stream subclasses should override <strong>both</strong> <code>write(int)</code>
  and <code>write(byte[],int,int)</code>. The
 three argument overload is necessary for bulk access to the data. This is
 much more efficient than byte-by-byte access.
 */
@interface JavaIoOutputStream : NSObject < JavaIoCloseable, JavaIoFlushable >

#pragma mark Public

/*!
 @brief Default constructor.
 */
- (instancetype)init;

/*!
 @brief Closes this stream.
 Implementations of this method should free any
 resources used by the stream. This implementation does nothing.
 @throws IOException
 if an error occurs while closing this stream.
 */
- (void)close;

/*!
 @brief Flushes this stream.
 Implementations of this method should ensure that
 any buffered data is written out. This implementation does nothing.
 @throws IOException
 if an error occurs while flushing this stream.
 */
- (void)flush;

/*!
 @brief Equivalent to <code>write(buffer, 0, buffer.length)</code>.
 */
- (void)writeWithByteArray:(IOSByteArray *)buffer;

/*!
 @brief Writes <code>count</code> bytes from the byte array <code>buffer</code> starting at
 position <code>offset</code> to this stream.
 @param buffer
 the buffer to be written.
 @param offset
 the start position in <code>buffer</code> from where to get bytes.
 @param count
 the number of bytes from <code>buffer</code> to write to this
 stream.
 @throws IOException
 if an error occurs while writing to this stream.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>count < 0</code>, or if
 <code>offset + count</code> is bigger than the length of
 <code>buffer</code>.
 */
- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)count;

/*!
 @brief Writes a single byte to this stream.
 Only the least significant byte of
 the integer <code>oneByte</code> is written to the stream.
 @param oneByte
 the byte to be written.
 @throws IOException
 if an error occurs while writing to this stream.
 */
- (void)writeWithInt:(jint)oneByte;

#pragma mark Package-Private

/*!
 @brief Returns true if this writer has encountered and suppressed an error.
 Used
 by PrintStreams as an alternative to checked exceptions.
 */
- (jboolean)checkError;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoOutputStream)

FOUNDATION_EXPORT void JavaIoOutputStream_init(JavaIoOutputStream *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoOutputStream)

#endif // _JavaIoOutputStream_H_
