//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/RuntimeException.java
//

#ifndef _JavaLangRuntimeException_H_
#define _JavaLangRuntimeException_H_

#include "J2ObjC_header.h"
#include "java/lang/Exception.h"

@class JavaLangThrowable;

/*!
 @brief <code>RuntimeException</code> is the superclass of all classes that represent
 exceptional conditions which occur as a result of executing an application in
 the VM.
 Unlike checked exceptions (exceptions where the type
 doesn't extend <code>RuntimeException</code> or <code>Error</code>), the compiler does
 not require code to handle runtime exceptions.
 */
@interface JavaLangRuntimeException : JavaLangException

#pragma mark Public

/*!
 @brief Constructs a new <code>RuntimeException</code> that includes the current stack
 trace.
 */
- (instancetype)init;

/*!
 @brief Constructs a new <code>RuntimeException</code> with the current stack trace
 and the specified detail message.
 @param detailMessage
 the detail message for this exception.
 */
- (instancetype)initWithNSString:(NSString *)detailMessage;

/*!
 @brief Constructs a new <code>RuntimeException</code> with the current stack trace,
 the specified detail message and the specified cause.
 @param detailMessage
 the detail message for this exception.
 @param throwable
 the cause of this exception.
 */
- (instancetype)initWithNSString:(NSString *)detailMessage
           withJavaLangThrowable:(JavaLangThrowable *)throwable;

/*!
 @brief Constructs a new <code>RuntimeException</code> with the current stack trace
 and the specified cause.
 @param throwable
 the cause of this exception.
 */
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)throwable;

#pragma mark Protected

/*!
 @brief Constructs a new <code>RuntimeException</code> with the current stack trace,
 the specified detail message, the specified cause, and whether suppression
 and/or writable stack trace is enabled.
 @since 1.7
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause
                     withBoolean:(jboolean)enableSuppression
                     withBoolean:(jboolean)writableStackTrace;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangRuntimeException)

FOUNDATION_EXPORT void JavaLangRuntimeException_init(JavaLangRuntimeException *self);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithNSString_(JavaLangRuntimeException *self, NSString *detailMessage);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithNSString_(NSString *detailMessage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JavaLangRuntimeException *self, NSString *detailMessage, JavaLangThrowable *throwable);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *detailMessage, JavaLangThrowable *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithJavaLangThrowable_(JavaLangRuntimeException *self, JavaLangThrowable *throwable);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithJavaLangThrowable_(JavaLangThrowable *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(JavaLangRuntimeException *self, NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangRuntimeException)

#endif // _JavaLangRuntimeException_H_
