//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Integer.java
//

#ifndef _JavaLangInteger_H_
#define _JavaLangInteger_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class IOSClass;

#define JavaLangInteger_MAX_VALUE 2147483647
#define JavaLangInteger_MIN_VALUE ((jint) 0x80000000)
#define JavaLangInteger_SIZE 32

/*!
 @brief The wrapper for the primitive type <code>int</code>.
 <p>
 Implementation note: The "bit twiddling" methods in this class use techniques
 described in <a href="http://www.hackersdelight.org/">Henry S. Warren,
 Jr.'s Hacker's Delight, (Addison Wesley, 2002)</a> and <a href=
 "http://graphics.stanford.edu/~seander/bithacks.html">Sean Anderson's
 Bit Twiddling Hacks.</a>
 @since 1.0
 */
@interface JavaLangInteger : NSNumber < JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Integer</code> with the specified primitive integer
 value.
 @param value
 the primitive integer value to store in the new instance.
 */
- (instancetype)initWithInt:(jint)value;

/*!
 @brief Constructs a new <code>Integer</code> from the specified string.
 @param string
 the string representation of an integer value.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as an integer value.
 */
- (instancetype)initWithNSString:(NSString *)string;

/*!
 @brief Counts the number of 1 bits in the specified integer; this is also
 referred to as population count.
 @param i
 the integer to examine.
 @return the number of 1 bits in <code>i</code>.
 @since 1.5
 */
+ (jint)bitCountWithInt:(jint)i;

- (jbyte)charValue;

/*!
 @brief Compares two <code>int</code> values.
 @return 0 if lhs = rhs, less than 0 if lhs &lt; rhs, and greater than 0 if lhs &gt; rhs.
 @since 1.7
 */
+ (jint)compareWithInt:(jint)lhs
               withInt:(jint)rhs;

/*!
 @brief Compares this object to the specified integer object to determine their
 relative order.
 @param object
 the integer object to compare this object to.
 @return a negative value if the value of this integer is less than the
 value of <code>object</code>; 0 if the value of this integer and the
 value of <code>object</code> are equal; a positive value if the value
 of this integer is greater than the value of <code>object</code>.
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangInteger *)object;

/*!
 @brief Parses the specified string and returns a <code>Integer</code> instance if the
 string can be decoded into an integer value.
 The string may be an
 optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."),
 octal ("0..."), or decimal ("...") representation of an integer.
 @param string
 a string representation of an integer value.
 @return an <code>Integer</code> containing the value represented by
 <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as an integer value.
 */
+ (JavaLangInteger *)decodeWithNSString:(NSString *)string;

- (jdouble)doubleValue;

/*!
 @brief Compares this instance with the specified object and indicates if they
 are equal.
 In order to be equal, <code>o</code> must be an instance of
 <code>Integer</code> and have the same integer value as this object.
 @param o
 the object to compare this integer with.
 @return <code>true</code> if the specified object is equal to this
 <code>Integer</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)o;

- (jfloat)floatValue;

/*!
 @brief Returns the <code>Integer</code> value of the system property identified by
 <code>string</code>.
 Returns <code>null</code> if <code>string</code> is <code>null</code>
 or empty, if the property can not be found or if its value can not be
 parsed as an integer.
 @param string
 the name of the requested system property.
 @return the requested property's value as an <code>Integer</code> or
 <code>null</code>.
 */
+ (JavaLangInteger *)getIntegerWithNSString:(NSString *)string;

/*!
 @brief Returns the <code>Integer</code> value of the system property identified by
 <code>string</code>.
 Returns the specified default value if <code>string</code> is
 <code>null</code> or empty, if the property can not be found or if its value
 can not be parsed as an integer.
 @param string
 the name of the requested system property.
 @param defaultValue
 the default value that is returned if there is no integer
 system property with the requested name.
 @return the requested property's value as an <code>Integer</code> or the
 default value.
 */
+ (JavaLangInteger *)getIntegerWithNSString:(NSString *)string
                                    withInt:(jint)defaultValue;

/*!
 @brief Returns the <code>Integer</code> value of the system property identified by
 <code>string</code>.
 Returns the specified default value if <code>string</code> is
 <code>null</code> or empty, if the property can not be found or if its value
 can not be parsed as an integer.
 @param string
 the name of the requested system property.
 @param defaultValue
 the default value that is returned if there is no integer
 system property with the requested name.
 @return the requested property's value as an <code>Integer</code> or the
 default value.
 */
+ (JavaLangInteger *)getIntegerWithNSString:(NSString *)string
                        withJavaLangInteger:(JavaLangInteger *)defaultValue;

- (NSUInteger)hash;

/*!
 @brief Determines the highest (leftmost) bit of the specified integer that is 1
 and returns the bit mask value for that bit.
 This is also referred to as
 the Most Significant 1 Bit. Returns zero if the specified integer is
 zero.
 @param i
 the integer to examine.
 @return the bit mask indicating the highest 1 bit in <code>i</code>.
 @since 1.5
 */
+ (jint)highestOneBitWithInt:(jint)i;

/*!
 @brief Gets the primitive value of this int.
 @return this object's primitive value.
 */
- (jint)intValue;

- (jlong)longLongValue;

/*!
 @brief Determines the lowest (rightmost) bit of the specified integer that is 1
 and returns the bit mask value for that bit.
 This is also referred
 to as the Least Significant 1 Bit. Returns zero if the specified integer
 is zero.
 @param i
 the integer to examine.
 @return the bit mask indicating the lowest 1 bit in <code>i</code>.
 @since 1.5
 */
+ (jint)lowestOneBitWithInt:(jint)i;

/*!
 @brief Determines the number of leading zeros in the specified integer prior to
 the <code>highest one bit</code>.
 @param i
 the integer to examine.
 @return the number of leading zeros in <code>i</code>.
 @since 1.5
 */
+ (jint)numberOfLeadingZerosWithInt:(jint)i;

/*!
 @brief Determines the number of trailing zeros in the specified integer after
 the <code>lowest one bit</code>.
 @param i
 the integer to examine.
 @return the number of trailing zeros in <code>i</code>.
 @since 1.5
 */
+ (jint)numberOfTrailingZerosWithInt:(jint)i;

/*!
 @brief Parses the specified string as a signed decimal integer value.
 The ASCII
 character \u002d ('-') is recognized as the minus sign.
 @param string
 the string representation of an integer value.
 @return the primitive integer value represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as an integer value.
 */
+ (jint)parseIntWithNSString:(NSString *)string;

/*!
 @brief Parses the specified string as a signed integer value using the specified
 radix.
 The ASCII character \u002d ('-') is recognized as the minus sign.
 @param string
 the string representation of an integer value.
 @param radix
 the radix to use when parsing.
 @return the primitive integer value represented by <code>string</code> using
 <code>radix</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as an integer value,
 or <code>radix < Character.MIN_RADIX ||
 radix > Character.MAX_RADIX</code>
 .
 */
+ (jint)parseIntWithNSString:(NSString *)string
                     withInt:(jint)radix;

/*!
 @brief Reverses the order of the bits of the specified integer.
 @param i
 the integer value for which to reverse the bit order.
 @return the reversed value.
 @since 1.5
 */
+ (jint)reverseWithInt:(jint)i;

/*!
 @brief Reverses the order of the bytes of the specified integer.
 @param i
 the integer value for which to reverse the byte order.
 @return the reversed value.
 @since 1.5
 */
+ (jint)reverseBytesWithInt:(jint)i;

/*!
 @brief Rotates the bits of the specified integer to the left by the specified
 number of bits.
 @param i
 the integer value to rotate left.
 @param distance
 the number of bits to rotate.
 @return the rotated value.
 @since 1.5
 */
+ (jint)rotateLeftWithInt:(jint)i
                  withInt:(jint)distance;

/*!
 @brief Rotates the bits of the specified integer to the right by the specified
 number of bits.
 @param i
 the integer value to rotate right.
 @param distance
 the number of bits to rotate.
 @return the rotated value.
 @since 1.5
 */
+ (jint)rotateRightWithInt:(jint)i
                   withInt:(jint)distance;

- (jshort)shortValue;

/*!
 @brief Returns the value of the <code>signum</code> function for the specified
 integer.
 @param i
 the integer value to check.
 @return -1 if <code>i</code> is negative, 1 if <code>i</code> is positive, 0 if
 <code>i</code> is zero.
 @since 1.5
 */
+ (jint)signumWithInt:(jint)i;

/*!
 @brief Converts the specified integer into its binary string representation.
 The
 returned string is a concatenation of '0' and '1' characters.
 @param i
 the integer to convert.
 @return the binary string representation of <code>i</code>.
 */
+ (NSString *)toBinaryStringWithInt:(jint)i;

/*!
 @brief Converts the specified integer into its hexadecimal string
 representation.
 The returned string is a concatenation of characters from
 '0' to '9' and 'a' to 'f'.
 @param i
 the integer to convert.
 @return the hexadecimal string representation of <code>i</code>.
 */
+ (NSString *)toHexStringWithInt:(jint)i;

/*!
 @brief Converts the specified integer into its octal string representation.
 The
 returned string is a concatenation of characters from '0' to '7'.
 @param i
 the integer to convert.
 @return the octal string representation of <code>i</code>.
 */
+ (NSString *)toOctalStringWithInt:(jint)i;

- (NSString *)description;

/*!
 @brief Converts the specified integer into its decimal string representation.
 The returned string is a concatenation of a minus sign if the number is
 negative and characters from '0' to '9'.
 @param i
 the integer to convert.
 @return the decimal string representation of <code>i</code>.
 */
+ (NSString *)toStringWithInt:(jint)i;

/*!
 @brief Converts the specified signed integer into a string representation based on the
 specified radix.
 The returned string is a concatenation of a minus sign
 if the number is negative and characters from '0' to '9' and 'a' to 'z',
 depending on the radix. If <code>radix</code> is not in the interval defined
 by <code>Character.MIN_RADIX</code> and <code>Character.MAX_RADIX</code> then 10 is
 used as the base for the conversion.
 <p>This method treats its argument as signed. If you want to convert an
 unsigned value to one of the common non-decimal bases, you may find
 <code>toBinaryString</code>, <code>#toHexString</code>, or <code>toOctalString</code>
 more convenient.
 @param i
 the signed integer to convert.
 @param radix
 the base to use for the conversion.
 @return the string representation of <code>i</code>.
 */
+ (NSString *)toStringWithInt:(jint)i
                      withInt:(jint)radix;

/*!
 @brief Returns a <code>Integer</code> instance for the specified integer value.
 <p>
 If it is not necessary to get a new <code>Integer</code> instance, it is
 recommended to use this method instead of the constructor, since it
 maintains a cache of instances which may result in better performance.
 @param i
 the integer value to store in the instance.
 @return a <code>Integer</code> instance containing <code>i</code>.
 @since 1.5
 */
+ (JavaLangInteger *)valueOfWithInt:(jint)i;

/*!
 @brief Parses the specified string as a signed decimal integer value.
 @param string
 the string representation of an integer value.
 @return an <code>Integer</code> instance containing the integer value
 represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as an integer value.
 */
+ (JavaLangInteger *)valueOfWithNSString:(NSString *)string;

/*!
 @brief Parses the specified string as a signed integer value using the specified
 radix.
 @param string
 the string representation of an integer value.
 @param radix
 the radix to use when parsing.
 @return an <code>Integer</code> instance containing the integer value
 represented by <code>string</code> using <code>radix</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as an integer value, or
 <code>radix < Character.MIN_RADIX ||
 radix > Character.MAX_RADIX</code>
 .
 */
+ (JavaLangInteger *)valueOfWithNSString:(NSString *)string
                                 withInt:(jint)radix;

#pragma mark Package-Private


@end

J2OBJC_STATIC_INIT(JavaLangInteger)

J2OBJC_STATIC_FIELD_GETTER(JavaLangInteger, MAX_VALUE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangInteger, MIN_VALUE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangInteger, SIZE, jint)

FOUNDATION_EXPORT IOSClass *JavaLangInteger_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangInteger, TYPE_, IOSClass *)

FOUNDATION_EXPORT void JavaLangInteger_initWithInt_(JavaLangInteger *self, jint value);

FOUNDATION_EXPORT JavaLangInteger *new_JavaLangInteger_initWithInt_(jint value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangInteger_initWithNSString_(JavaLangInteger *self, NSString *string);

FOUNDATION_EXPORT JavaLangInteger *new_JavaLangInteger_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint JavaLangInteger_compareWithInt_withInt_(jint lhs, jint rhs);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_decodeWithNSString_(NSString *string);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_getIntegerWithNSString_(NSString *string);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_getIntegerWithNSString_withInt_(NSString *string, jint defaultValue);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_getIntegerWithNSString_withJavaLangInteger_(NSString *string, JavaLangInteger *defaultValue);

FOUNDATION_EXPORT jint JavaLangInteger_parseIntWithNSString_(NSString *string);

FOUNDATION_EXPORT jint JavaLangInteger_parseIntWithNSString_withInt_(NSString *string, jint radix);

FOUNDATION_EXPORT NSString *JavaLangInteger_toBinaryStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toHexStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toOctalStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toStringWithInt_withInt_(jint i, jint radix);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_valueOfWithNSString_withInt_(NSString *string, jint radix);

FOUNDATION_EXPORT jint JavaLangInteger_highestOneBitWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_lowestOneBitWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_numberOfLeadingZerosWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_numberOfTrailingZerosWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_bitCountWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_rotateLeftWithInt_withInt_(jint i, jint distance);

FOUNDATION_EXPORT jint JavaLangInteger_rotateRightWithInt_withInt_(jint i, jint distance);

FOUNDATION_EXPORT jint JavaLangInteger_reverseBytesWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_reverseWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_signumWithInt_(jint i);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_valueOfWithInt_(jint i);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangInteger)

BOXED_INC_AND_DEC(Int, intValue, JavaLangInteger)
BOXED_COMPOUND_ASSIGN_ARITHMETIC(Int, intValue, jint, JavaLangInteger)
BOXED_COMPOUND_ASSIGN_MOD(Int, intValue, jint, JavaLangInteger)
BOXED_COMPOUND_ASSIGN_BITWISE(Int, intValue, jint, JavaLangInteger)
BOXED_SHIFT_ASSIGN_32(Int, intValue, jint, JavaLangInteger)

#endif // _JavaLangInteger_H_
