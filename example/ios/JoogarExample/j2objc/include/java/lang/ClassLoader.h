//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/ClassLoader.java
//

#ifndef _JavaLangClassLoader_H_
#define _JavaLangClassLoader_H_

#include "J2ObjC_header.h"
#include "java/util/Enumeration.h"

@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaLangPackage;
@class JavaNetURL;
@class JavaNioByteBuffer;
@class JavaSecurityProtectionDomain;
@protocol JavaUtilEnumeration;

/*!
 @brief Loads classes and resources from a repository.
 One or more class loaders are
 installed at runtime. These are consulted whenever the runtime system needs a
 specific class that is not yet available in-memory. Typically, class loaders
 are grouped into a tree where child class loaders delegate all requests to
 parent class loaders. Only if the parent class loader cannot satisfy the
 request, the child class loader itself tries to handle it.
 <p>
 <code>ClassLoader</code> is an abstract class that implements the common
 infrastructure required by all class loaders. J2ObjC provides a native
 implementation of the class, SystemClassLoader, which is the one typically
 used. Other applications may implement subclasses of <code>ClassLoader</code>
 to provide special ways for loading classes.
 </p><p>
 Note: since classes cannot be dynamically created in iOS or OS X, class
 loaders have a much more limited utility than with JVM-based systems like
 Java and Android.
 </p>
 */
@interface JavaLangClassLoader : NSObject

#pragma mark Public

/*!
 @brief Sets the default assertion status for this class loader to <code>false</code>
 and removes any package default and class assertion status settings.
 <p>
 <strong>Note:</strong> This method does nothing in the Android reference
 implementation.
 </p>
 */
- (void)clearAssertionStatus;

/*!
 @brief Returns this class loader's parent.
 @return this class loader's parent or <code>null</code>.
 */
- (JavaLangClassLoader *)getParent;

/*!
 @brief Returns the URL of the resource with the specified name.
 This
 implementation first tries to use the parent class loader to find the
 resource; if this fails then <code>findResource(String)</code> is called to
 find the requested resource.
 @param resName
 the name of the resource to find.
 @return the <code>URL</code> object for the requested resource or <code>null</code>
 if the resource can not be found
 */
- (JavaNetURL *)getResourceWithNSString:(NSString *)resName;

/*!
 @brief Returns a stream for the resource with the specified name.
 See
 <code>getResource(String)</code> for a description of the lookup algorithm
 used to find the resource.
 @return a stream for the resource or <code>null</code> if the resource can not be found
 @param resName
 the name of the resource to find.
 */
- (JavaIoInputStream *)getResourceAsStreamWithNSString:(NSString *)resName;

/*!
 @brief Returns an enumeration of URLs for the resource with the specified name.
 This implementation first uses this class loader's parent to find the
 resource, then it calls <code>findResources(String)</code> to get additional
 URLs. The returned enumeration contains the <code>URL</code> objects of both
 find operations.
 @return an enumeration of <code>URL</code> objects for the requested resource.
 @param resName
 the name of the resource to find.
 @throws IOException
 if an I/O error occurs.
 */
- (id<JavaUtilEnumeration>)getResourcesWithNSString:(NSString *)resName;

/*!
 @brief Returns the system class loader.
 This is the parent for new
 <code>ClassLoader</code> instances and is typically the class loader used to
 start the application.
 */
+ (JavaLangClassLoader *)getSystemClassLoader;

/*!
 @brief Finds the URL of the resource with the specified name.
 The system class
 loader's resource lookup algorithm is used to find the resource.
 @return the <code>URL</code> object for the requested resource or <code>null</code>
 if the resource can not be found.
 @param resName
 the name of the resource to find.
 */
+ (JavaNetURL *)getSystemResourceWithNSString:(NSString *)resName;

/*!
 @brief Returns a stream for the resource with the specified name.
 The system
 class loader's resource lookup algorithm is used to find the resource.
 Basically, the contents of the java.class.path are searched in order,
 looking for a path which matches the specified resource.
 @return a stream for the resource or <code>null</code>.
 @param resName
 the name of the resource to find.
 */
+ (JavaIoInputStream *)getSystemResourceAsStreamWithNSString:(NSString *)resName;

/*!
 @brief Returns an enumeration of URLs for the resource with the specified name.
 The system class loader's resource lookup algorithm is used to find the
 resource.
 @return an enumeration of <code>URL</code> objects containing the requested
 resources.
 @param resName
 the name of the resource to find.
 @throws IOException
 if an I/O error occurs.
 */
+ (id<JavaUtilEnumeration>)getSystemResourcesWithNSString:(NSString *)resName;

/*!
 @brief Loads the class with the specified name.
 Invoking this method is
 equivalent to calling <code>loadClass(className, false)</code>.
 <p>
 <strong>Note:</strong> In the Android reference implementation, the
 second parameter of <code>loadClass(String,boolean)</code> is ignored
 anyway.
 </p>
 @return the <code>Class</code> object.
 @param className_
 the name of the class to look for.
 @throws ClassNotFoundException
 if the class can not be found.
 */
- (IOSClass *)loadClassWithNSString:(NSString *)className_;

/*!
 @brief Sets the assertion status of the class with the specified name.
 <p>
 <strong>Note: </strong>This method does nothing in the Android reference
 implementation.
 </p>
 @param cname
 the name of the class for which to set the assertion status.
 @param enable
 the new assertion status.
 */
- (void)setClassAssertionStatusWithNSString:(NSString *)cname
                                withBoolean:(jboolean)enable;

/*!
 @brief Sets the default assertion status for this class loader.
 @param enable
 the new assertion status.
 */
- (void)setDefaultAssertionStatusWithBoolean:(jboolean)enable;

/*!
 @brief Sets the assertion status of the package with the specified name.
 <p>
 <strong>Note: </strong>This method does nothing in the Android reference
 implementation.
 </p>
 @param pname
 the name of the package for which to set the assertion status.
 @param enable
 the new assertion status.
 */
- (void)setPackageAssertionStatusWithNSString:(NSString *)pname
                                  withBoolean:(jboolean)enable;

#pragma mark Protected

/*!
 @brief Constructs a new instance of this class with the system class loader as
 its parent.
 */
- (instancetype)init;

/*!
 @brief Constructs a new instance of this class with the specified class loader
 as its parent.
 @param parentLoader
 The <code>ClassLoader</code> to use as the new class loader's
 parent.
 */
- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)parentLoader;

/*!
 @brief Constructs a new class from an array of bytes containing a class
 definition in class file format.
 @param classRep
 the memory image of a class file.
 @param offset
 the offset into <code>classRep</code>.
 @param length
 the length of the class file.
 @return the <code>Class</code> object created from the specified subset of
 data in <code>classRep</code>.
 @throws ClassFormatError
 if <code>classRep</code> does not contain a valid class.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code>, <code>length < 0</code> or if
 <code>offset + length</code> is greater than the length of
 <code>classRep</code>.
 */
- (IOSClass *)defineClassWithByteArray:(IOSByteArray *)classRep
                               withInt:(jint)offset
                               withInt:(jint)length;

/*!
 @brief Constructs a new class from an array of bytes containing a class
 definition in class file format.
 @param className_
 the expected name of the new class, may be <code>null</code> if not
 known.
 @param classRep
 the memory image of a class file.
 @param offset
 the offset into <code>classRep</code>.
 @param length
 the length of the class file.
 @return the <code>Class</code> object created from the specified subset of
 data in <code>classRep</code>.
 @throws ClassFormatError
 if <code>classRep</code> does not contain a valid class.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code>, <code>length < 0</code> or if
 <code>offset + length</code> is greater than the length of
 <code>classRep</code>.
 */
- (IOSClass *)defineClassWithNSString:(NSString *)className_
                        withByteArray:(IOSByteArray *)classRep
                              withInt:(jint)offset
                              withInt:(jint)length;

/*!
 @brief Constructs a new class from an array of bytes containing a class
 definition in class file format and assigns the specified protection
 domain to the new class.
 If the provided protection domain is
 <code>null</code> then a default protection domain is assigned to the class.
 @param className_
 the expected name of the new class, may be <code>null</code> if not
 known.
 @param classRep
 the memory image of a class file.
 @param offset
 the offset into <code>classRep</code>.
 @param length
 the length of the class file.
 @param protectionDomain
 the protection domain to assign to the loaded class, may be
 <code>null</code>.
 @return the <code>Class</code> object created from the specified subset of
 data in <code>classRep</code>.
 @throws ClassFormatError
 if <code>classRep</code> does not contain a valid class.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code>, <code>length < 0</code> or if
 <code>offset + length</code> is greater than the length of
 <code>classRep</code>.
 @throws NoClassDefFoundError
 if <code>className</code> is not equal to the name of the class
 contained in <code>classRep</code>.
 */
- (IOSClass *)defineClassWithNSString:(NSString *)className_
                        withByteArray:(IOSByteArray *)classRep
                              withInt:(jint)offset
                              withInt:(jint)length
     withJavaSecurityProtectionDomain:(JavaSecurityProtectionDomain *)protectionDomain;

/*!
 @brief Defines a new class with the specified name, byte code from the byte
 buffer and the optional protection domain.
 If the provided protection
 domain is <code>null</code> then a default protection domain is assigned to
 the class.
 @param name
 the expected name of the new class, may be <code>null</code> if not
 known.
 @param b
 the byte buffer containing the byte code of the new class.
 @param protectionDomain
 the protection domain to assign to the loaded class, may be
 <code>null</code>.
 @return the <code>Class</code> object created from the data in <code>b</code>.
 @throws ClassFormatError
 if <code>b</code> does not contain a valid class.
 @throws NoClassDefFoundError
 if <code>className</code> is not equal to the name of the class
 contained in <code>b</code>.
 */
- (IOSClass *)defineClassWithNSString:(NSString *)name
                withJavaNioByteBuffer:(JavaNioByteBuffer *)b
     withJavaSecurityProtectionDomain:(JavaSecurityProtectionDomain *)protectionDomain;

/*!
 @brief Defines and returns a new <code>Package</code> using the specified
 information.
 If <code>sealBase</code> is <code>null</code>, the package is left
 unsealed. Otherwise, the package is sealed using this URL.
 @param name
 the name of the package.
 @param specTitle
 the title of the specification.
 @param specVersion
 the version of the specification.
 @param specVendor
 the vendor of the specification.
 @param implTitle
 the implementation title.
 @param implVersion
 the implementation version.
 @param implVendor
 the specification vendor.
 @param sealBase
 the URL used to seal this package or <code>null</code> to leave the
 package unsealed.
 @return the <code>Package</code> object that has been created.
 @throws IllegalArgumentException
 if a package with the specified name already exists.
 */
- (JavaLangPackage *)definePackageWithNSString:(NSString *)name
                                  withNSString:(NSString *)specTitle
                                  withNSString:(NSString *)specVersion
                                  withNSString:(NSString *)specVendor
                                  withNSString:(NSString *)implTitle
                                  withNSString:(NSString *)implVersion
                                  withNSString:(NSString *)implVendor
                                withJavaNetURL:(JavaNetURL *)sealBase;

/*!
 @brief Overridden by subclasses, throws a <code>ClassNotFoundException</code> by
 default.
 This method is called by <code>loadClass</code> after the parent
 <code>ClassLoader</code> has failed to find a loaded class of the same name.
 @param className_
 the name of the class to look for.
 @return the <code>Class</code> object that is found.
 @throws ClassNotFoundException
 if the class cannot be found.
 */
- (IOSClass *)findClassWithNSString:(NSString *)className_;

/*!
 @brief Returns the absolute path of the native library with the specified name,
 or <code>null</code>.
 If this method returns <code>null</code> then the virtual
 machine searches the directories specified by the system property
 "java.library.path".
 <p>
 This implementation always returns <code>null</code>.
 </p>
 @param libName
 the name of the library to find.
 @return the absolute path of the library.
 */
- (NSString *)findLibraryWithNSString:(NSString *)libName;

/*!
 @brief Returns the class with the specified name if it has already been loaded
 by the VM or <code>null</code> if it has not yet been loaded.
 @param className_
 the name of the class to look for.
 @return the <code>Class</code> object or <code>null</code> if the requested class
 has not been loaded.
 */
- (IOSClass *)findLoadedClassWithNSString:(NSString *)className_;

/*!
 @brief Finds the URL of the resource with the specified name.
 This
 implementation just returns <code>null</code>; it should be overridden in
 subclasses.
 @param resName
 the name of the resource to find.
 @return the <code>URL</code> object for the requested resource.
 */
- (JavaNetURL *)findResourceWithNSString:(NSString *)resName;

/*!
 @brief Finds an enumeration of URLs for the resource with the specified name.
 This implementation just returns an empty <code>Enumeration</code>; it should
 be overridden in subclasses.
 @param resName
 the name of the resource to find.
 @return an enumeration of <code>URL</code> objects for the requested resource.
 @throws IOException
 if an I/O error occurs.
 */
- (id<JavaUtilEnumeration>)findResourcesWithNSString:(NSString *)resName;

/*!
 @brief Finds the class with the specified name, loading it using the system
 class loader if necessary.
 @param className_
 the name of the class to look for.
 @return the <code>Class</code> object with the requested <code>className</code>.
 @throws ClassNotFoundException
 if the class can not be found.
 */
- (IOSClass *)findSystemClassWithNSString:(NSString *)className_;

/*!
 @brief Returns the package with the specified name.
 Package information is
 searched in this class loader.
 @param name
 the name of the package to find.
 @return the package with the requested name; <code>null</code> if the package
 can not be found.
 */
- (JavaLangPackage *)getPackageWithNSString:(NSString *)name;

/*!
 @brief Returns all the packages known to this class loader.
 @return an array with all packages known to this class loader.
 */
- (IOSObjectArray *)getPackages;

/*!
 @brief Loads the class with the specified name, optionally linking it after
 loading.
 The following steps are performed:
 <ol>
 <li> Call <code>findLoadedClass(String)</code> to determine if the requested
 class has already been loaded.</li>
 <li>If the class has not yet been loaded: Invoke this method on the
 parent class loader.</li>
 <li>If the class has still not been loaded: Call
 <code>findClass(String)</code> to find the class.</li>
 </ol>
 <p>
 <strong>Note:</strong> In the Android reference implementation, the
 <code>resolve</code> parameter is ignored; classes are never linked.
 </p>
 @return the <code>Class</code> object.
 @param className_
 the name of the class to look for.
 @param resolve
 Indicates if the class should be resolved after loading. This
 parameter is ignored on the Android reference implementation;
 classes are not resolved.
 @throws ClassNotFoundException
 if the class can not be found.
 */
- (IOSClass *)loadClassWithNSString:(NSString *)className_
                        withBoolean:(jboolean)resolve;

/*!
 @brief Forces a class to be linked (initialized).
 If the class has already been
 linked this operation has no effect.
 <p>
 <strong>Note:</strong> In the Android reference implementation, this
 method has no effect.
 </p>
 @param clazz
 the class to link.
 */
- (void)resolveClassWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Sets the signers of the specified class.
 This implementation does
 nothing.
 @param c
 the <code>Class</code> object for which to set the signers.
 @param signers
 the signers for <code>c</code>.
 */
- (void)setSignersWithIOSClass:(IOSClass *)c
             withNSObjectArray:(IOSObjectArray *)signers;

#pragma mark Package-Private

- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)parentLoader
                                withBoolean:(jboolean)nullAllowed;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangClassLoader)

FOUNDATION_EXPORT JavaLangClassLoader *JavaLangClassLoader_getSystemClassLoader();

FOUNDATION_EXPORT JavaNetURL *JavaLangClassLoader_getSystemResourceWithNSString_(NSString *resName);

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaLangClassLoader_getSystemResourcesWithNSString_(NSString *resName);

FOUNDATION_EXPORT JavaIoInputStream *JavaLangClassLoader_getSystemResourceAsStreamWithNSString_(NSString *resName);

FOUNDATION_EXPORT void JavaLangClassLoader_init(JavaLangClassLoader *self);

FOUNDATION_EXPORT void JavaLangClassLoader_initWithJavaLangClassLoader_(JavaLangClassLoader *self, JavaLangClassLoader *parentLoader);

FOUNDATION_EXPORT void JavaLangClassLoader_initWithJavaLangClassLoader_withBoolean_(JavaLangClassLoader *self, JavaLangClassLoader *parentLoader, jboolean nullAllowed);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangClassLoader)

@interface JavaLangTwoEnumerationsInOne : NSObject < JavaUtilEnumeration >

#pragma mark Public

- (instancetype)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)first
                    withJavaUtilEnumeration:(id<JavaUtilEnumeration>)second;

- (jboolean)hasMoreElements;

- (JavaNetURL *)nextElement;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangTwoEnumerationsInOne)

FOUNDATION_EXPORT void JavaLangTwoEnumerationsInOne_initWithJavaUtilEnumeration_withJavaUtilEnumeration_(JavaLangTwoEnumerationsInOne *self, id<JavaUtilEnumeration> first, id<JavaUtilEnumeration> second);

FOUNDATION_EXPORT JavaLangTwoEnumerationsInOne *new_JavaLangTwoEnumerationsInOne_initWithJavaUtilEnumeration_withJavaUtilEnumeration_(id<JavaUtilEnumeration> first, id<JavaUtilEnumeration> second) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangTwoEnumerationsInOne)

/*!
 @brief ClassLoader for iOS and OS X.
 */
@interface JavaLangSystemClassLoader : JavaLangClassLoader

#pragma mark Public

- (JavaNetURL *)getResourceWithNSString:(NSString *)resName;

- (id<JavaUtilEnumeration>)getResourcesWithNSString:(NSString *)resName;

#pragma mark Protected

- (IOSClass *)findClassWithNSString:(NSString *)name;

- (JavaNetURL *)findResourceWithNSString:(NSString *)name;

- (id<JavaUtilEnumeration>)findResourcesWithNSString:(NSString *)name;

- (IOSClass *)loadClassWithNSString:(NSString *)name
                        withBoolean:(jboolean)resolve;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(JavaLangSystemClassLoader)

FOUNDATION_EXPORT JavaLangClassLoader *JavaLangSystemClassLoader_loader_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangSystemClassLoader, loader_, JavaLangClassLoader *)
J2OBJC_STATIC_FIELD_SETTER(JavaLangSystemClassLoader, loader_, JavaLangClassLoader *)

FOUNDATION_EXPORT void JavaLangSystemClassLoader_init(JavaLangSystemClassLoader *self);

FOUNDATION_EXPORT JavaLangSystemClassLoader *new_JavaLangSystemClassLoader_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangSystemClassLoader)

#endif // _JavaLangClassLoader_H_
