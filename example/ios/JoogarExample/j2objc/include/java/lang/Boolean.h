//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Boolean.java
//

#ifndef _JavaLangBoolean_H_
#define _JavaLangBoolean_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"

@class IOSClass;

/*!
 @brief The wrapper for the primitive type <code>boolean</code>.
 @since 1.0
 */
@interface JavaLangBoolean : NSObject < JavaIoSerializable, JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Boolean</code> with the specified primitive boolean
 value.
 @param value
 the primitive boolean value, <code>true</code> or <code>false</code>.
 */
- (instancetype)initWithBoolean:(jboolean)value;

/*!
 @brief Constructs a new <code>Boolean</code> with its boolean value specified by
 <code>string</code>.
 If <code>string</code> is not <code>null</code> and is equal to
 "true" using a non-case sensitive comparison, the result will be a
 Boolean representing the primitive value <code>true</code>, otherwise it will
 be a Boolean representing the primitive value <code>false</code>.
 @param string
 the string representing a boolean value.
 */
- (instancetype)initWithNSString:(NSString *)string;

/*!
 @brief Gets the primitive value of this boolean, either <code>true</code> or
 <code>false</code>.
 @return this object's primitive value, <code>true</code> or <code>false</code>.
 */
- (jboolean)booleanValue;

/*!
 @brief Compares two <code>boolean</code> values.
 @return 0 if lhs = rhs, less than 0 if lhs &lt; rhs, and greater than 0 if lhs &gt; rhs.
 (Where true &gt; false.)
 @since 1.7
 */
+ (jint)compareWithBoolean:(jboolean)lhs
               withBoolean:(jboolean)rhs;

/*!
 @brief Compares this object to the specified boolean object to determine their
 relative order.
 @param that
 the boolean object to compare this object to.
 @return 0 if the value of this boolean and the value of <code>that</code> are
 equal; a positive value if the value of this boolean is
 <code>true</code> and the value of <code>that</code> is <code>false</code>; a
 negative value if the value if this boolean is <code>false</code> and
 the value of <code>that</code> is <code>true</code>.
 @since 1.5
 */
- (jint)compareToWithId:(JavaLangBoolean *)that;

/*!
 @brief Compares this instance with the specified object and indicates if they
 are equal.
 In order to be equal, <code>o</code> must be an instance of
 <code>Boolean</code> and have the same boolean value as this object.
 @param o
 the object to compare this boolean with.
 @return <code>true</code> if the specified object is equal to this
 <code>Boolean</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the <code>boolean</code> value of the system property identified by
 <code>string</code>.
 @param string
 the name of the requested system property.
 @return <code>true</code> if the system property named by <code>string</code>
 exists and it is equal to "true" using case insensitive
 comparison, <code>false</code> otherwise.
 */
+ (jboolean)getBooleanWithNSString:(NSString *)string;

/*!
 @brief Returns an integer hash code for this boolean.
 @return this boolean's hash code, which is <code>1231</code> for <code>true</code>
 values and <code>1237</code> for <code>false</code> values.
 */
- (NSUInteger)hash;

/*!
 @brief Parses the specified string as a <code>boolean</code>.
 @param s
 the string representation of a boolean value.
 @return <code>true</code> if <code>s</code> is not <code>null</code> and is equal to
 <code>"true"</code> using case insensitive comparison, <code>false</code>
 otherwise.
 @since 1.5
 */
+ (jboolean)parseBooleanWithNSString:(NSString *)s;

/*!
 @brief Returns a string containing a concise, human-readable description of this
 boolean.
 @return "true" if the value of this boolean is <code>true</code>, "false"
 otherwise.
 */
- (NSString *)description;

/*!
 @brief Converts the specified boolean to its string representation.
 @param value
 the boolean to convert.
 @return "true" if <code>value</code> is <code>true</code>, "false" otherwise.
 */
+ (NSString *)toStringWithBoolean:(jboolean)value;

/*!
 @brief Returns a <code>Boolean</code> instance for the specified boolean value.
 <p>
 If it is not necessary to get a new <code>Boolean</code> instance, it is
 recommended to use this method instead of the constructor, since it
 returns its static instances, which results in better performance.
 @param b
 the boolean to convert to a <code>Boolean</code>.
 @return <code>Boolean.TRUE</code> if <code>b</code> is equal to <code>true</code>,
 <code>Boolean.FALSE</code> otherwise.
 */
+ (JavaLangBoolean *)valueOfWithBoolean:(jboolean)b;

/*!
 @brief Parses the specified string as a boolean value.
 @param string
 the string representation of a boolean value.
 @return <code>Boolean.TRUE</code> if <code>string</code> is equal to "true" using
 case insensitive comparison, <code>Boolean.FALSE</code> otherwise.
 */
+ (JavaLangBoolean *)valueOfWithNSString:(NSString *)string;

@end

J2OBJC_STATIC_INIT(JavaLangBoolean)

FOUNDATION_EXPORT IOSClass *JavaLangBoolean_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangBoolean, TYPE_, IOSClass *)

FOUNDATION_EXPORT JavaLangBoolean *JavaLangBoolean_TRUE__;
J2OBJC_STATIC_FIELD_GETTER(JavaLangBoolean, TRUE__, JavaLangBoolean *)

FOUNDATION_EXPORT JavaLangBoolean *JavaLangBoolean_FALSE__;
J2OBJC_STATIC_FIELD_GETTER(JavaLangBoolean, FALSE__, JavaLangBoolean *)

FOUNDATION_EXPORT void JavaLangBoolean_initWithNSString_(JavaLangBoolean *self, NSString *string);

FOUNDATION_EXPORT JavaLangBoolean *new_JavaLangBoolean_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangBoolean_initWithBoolean_(JavaLangBoolean *self, jboolean value);

FOUNDATION_EXPORT JavaLangBoolean *new_JavaLangBoolean_initWithBoolean_(jboolean value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint JavaLangBoolean_compareWithBoolean_withBoolean_(jboolean lhs, jboolean rhs);

FOUNDATION_EXPORT jboolean JavaLangBoolean_getBooleanWithNSString_(NSString *string);

FOUNDATION_EXPORT jboolean JavaLangBoolean_parseBooleanWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *JavaLangBoolean_toStringWithBoolean_(jboolean value);

FOUNDATION_EXPORT JavaLangBoolean *JavaLangBoolean_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT JavaLangBoolean *JavaLangBoolean_valueOfWithBoolean_(jboolean b);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangBoolean)

#endif // _JavaLangBoolean_H_
