//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Short.java
//

#ifndef _JavaLangShort_H_
#define _JavaLangShort_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class IOSClass;

#define JavaLangShort_MAX_VALUE 32767
#define JavaLangShort_MIN_VALUE -32768
#define JavaLangShort_SIZE 16

/*!
 @brief The wrapper for the primitive type <code>short</code>.
 @since 1.1
 */
@interface JavaLangShort : NSNumber < JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Short</code> with the specified primitive short value.
 @param value
 the primitive short value to store in the new instance.
 */
- (instancetype)initWithShort:(jshort)value;

/*!
 @brief Constructs a new <code>Short</code> from the specified string.
 @param string
 the string representation of a short value.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a short value.
 */
- (instancetype)initWithNSString:(NSString *)string;

- (jbyte)charValue;

/*!
 @brief Compares two <code>short</code> values.
 @return 0 if lhs = rhs, less than 0 if lhs &lt; rhs, and greater than 0 if lhs &gt; rhs.
 @since 1.7
 */
+ (jint)compareWithShort:(jshort)lhs
               withShort:(jshort)rhs;

/*!
 @brief Compares this object to the specified short object to determine their
 relative order.
 @param object
 the short object to compare this object to.
 @return a negative value if the value of this short is less than the
 value of <code>object</code>; 0 if the value of this short and the
 value of <code>object</code> are equal; a positive value if the value
 of this short is greater than the value of <code>object</code>.
 @throws NullPointerException
 if <code>object</code> is null.
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangShort *)object;

/*!
 @brief Parses the specified string and returns a <code>Short</code> instance if the
 string can be decoded into a short value.
 The string may be an optional
 minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal
 ("0..."), or decimal ("...") representation of a short.
 @param string
 a string representation of a short value.
 @return a <code>Short</code> containing the value represented by
 <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a short value.
 */
+ (JavaLangShort *)decodeWithNSString:(NSString *)string;

- (jdouble)doubleValue;

/*!
 @brief Compares this instance with the specified object and indicates if they
 are equal.
 In order to be equal, <code>object</code> must be an instance of
 <code>Short</code> and have the same short value as this object.
 @param object
 the object to compare this short with.
 @return <code>true</code> if the specified object is equal to this
 <code>Short</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

- (jfloat)floatValue;

- (NSUInteger)hash;

- (jint)intValue;

- (jlong)longLongValue;

/*!
 @brief Parses the specified string as a signed decimal short value.
 The ASCII
 character \u002d ('-') is recognized as the minus sign.
 @param string
 the string representation of a short value.
 @return the primitive short value represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a short value.
 */
+ (jshort)parseShortWithNSString:(NSString *)string;

/*!
 @brief Parses the specified string as a signed short value using the specified
 radix.
 The ASCII character \u002d ('-') is recognized as the minus sign.
 @param string
 the string representation of a short value.
 @param radix
 the radix to use when parsing.
 @return the primitive short value represented by <code>string</code> using
 <code>radix</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a short value, or
 <code>radix < Character.MIN_RADIX ||
 radix > Character.MAX_RADIX</code>
 .
 */
+ (jshort)parseShortWithNSString:(NSString *)string
                         withInt:(jint)radix;

/*!
 @brief Reverses the bytes of the specified short.
 @param s
 the short value for which to reverse bytes.
 @return the reversed value.
 @since 1.5
 */
+ (jshort)reverseBytesWithShort:(jshort)s;

/*!
 @brief Gets the primitive value of this short.
 @return this object's primitive value.
 */
- (jshort)shortValue;

- (NSString *)description;

/*!
 @brief Returns a string containing a concise, human-readable description of the
 specified short value with radix 10.
 @param value
 the short to convert to a string.
 @return a printable representation of <code>value</code>.
 */
+ (NSString *)toStringWithShort:(jshort)value;

/*!
 @brief Returns a <code>Short</code> instance for the specified short value.
 <p>
 If it is not necessary to get a new <code>Short</code> instance, it is
 recommended to use this method instead of the constructor, since it
 maintains a cache of instances which may result in better performance.
 @param s
 the short value to store in the instance.
 @return a <code>Short</code> instance containing <code>s</code>.
 @since 1.5
 */
+ (JavaLangShort *)valueOfWithShort:(jshort)s;

/*!
 @brief Parses the specified string as a signed decimal short value.
 @param string
 the string representation of a short value.
 @return a <code>Short</code> instance containing the short value represented
 by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a short value.
 */
+ (JavaLangShort *)valueOfWithNSString:(NSString *)string;

/*!
 @brief Parses the specified string as a signed short value using the specified
 radix.
 @param string
 the string representation of a short value.
 @param radix
 the radix to use when parsing.
 @return a <code>Short</code> instance containing the short value represented
 by <code>string</code> using <code>radix</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a short value, or
 <code>radix < Character.MIN_RADIX ||
 radix > Character.MAX_RADIX</code>
 .
 */
+ (JavaLangShort *)valueOfWithNSString:(NSString *)string
                               withInt:(jint)radix;

#pragma mark Package-Private


@end

J2OBJC_STATIC_INIT(JavaLangShort)

J2OBJC_STATIC_FIELD_GETTER(JavaLangShort, MAX_VALUE, jshort)

J2OBJC_STATIC_FIELD_GETTER(JavaLangShort, MIN_VALUE, jshort)

J2OBJC_STATIC_FIELD_GETTER(JavaLangShort, SIZE, jint)

FOUNDATION_EXPORT IOSClass *JavaLangShort_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangShort, TYPE_, IOSClass *)

FOUNDATION_EXPORT void JavaLangShort_initWithNSString_(JavaLangShort *self, NSString *string);

FOUNDATION_EXPORT JavaLangShort *new_JavaLangShort_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangShort_initWithShort_(JavaLangShort *self, jshort value);

FOUNDATION_EXPORT JavaLangShort *new_JavaLangShort_initWithShort_(jshort value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint JavaLangShort_compareWithShort_withShort_(jshort lhs, jshort rhs);

FOUNDATION_EXPORT JavaLangShort *JavaLangShort_decodeWithNSString_(NSString *string);

FOUNDATION_EXPORT jshort JavaLangShort_parseShortWithNSString_(NSString *string);

FOUNDATION_EXPORT jshort JavaLangShort_parseShortWithNSString_withInt_(NSString *string, jint radix);

FOUNDATION_EXPORT NSString *JavaLangShort_toStringWithShort_(jshort value);

FOUNDATION_EXPORT JavaLangShort *JavaLangShort_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT JavaLangShort *JavaLangShort_valueOfWithNSString_withInt_(NSString *string, jint radix);

FOUNDATION_EXPORT jshort JavaLangShort_reverseBytesWithShort_(jshort s);

FOUNDATION_EXPORT JavaLangShort *JavaLangShort_valueOfWithShort_(jshort s);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangShort)

BOXED_INC_AND_DEC(Short, shortValue, JavaLangShort)

#endif // _JavaLangShort_H_
