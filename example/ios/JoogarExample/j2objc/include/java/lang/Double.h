//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Double.java
//

#ifndef _JavaLangDouble_H_
#define _JavaLangDouble_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class IOSClass;

#define JavaLangDouble_EXPONENT_BIAS 1023
#define JavaLangDouble_EXPONENT_BITS 12
#define JavaLangDouble_MANTISSA_BITS 52
#define JavaLangDouble_NON_MANTISSA_BITS 12
#define JavaLangDouble_SIGN_MASK ((jlong) 0x8000000000000000LL)
#define JavaLangDouble_EXPONENT_MASK 9218868437227405312LL
#define JavaLangDouble_MANTISSA_MASK 4503599627370495LL
#define JavaLangDouble_MAX_VALUE __DBL_MAX__
#define JavaLangDouble_MIN_VALUE 4.9E-324
#define JavaLangDouble_NaN NAN
#define JavaLangDouble_POSITIVE_INFINITY INFINITY
#define JavaLangDouble_NEGATIVE_INFINITY -INFINITY
#define JavaLangDouble_MIN_NORMAL __DBL_MIN__
#define JavaLangDouble_MAX_EXPONENT 1023
#define JavaLangDouble_MIN_EXPONENT -1022
#define JavaLangDouble_SIZE 64

/*!
 @brief The wrapper for the primitive type <code>double</code>.
 @since 1.0
 */
@interface JavaLangDouble : NSNumber < JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Double</code> with the specified primitive double
 value.
 @param value
 the primitive double value to store in the new instance.
 */
- (instancetype)initWithDouble:(jdouble)value;

/*!
 @brief Constructs a new <code>Double</code> from the specified string.
 @param string
 the string representation of a double value.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a double value.
 */
- (instancetype)initWithNSString:(NSString *)string;

- (jbyte)charValue;

/*!
 @brief Compares the two specified double values.
 There are two special cases:
 <ul>
 <li><code>Double.NaN</code> is equal to <code>Double.NaN</code> and it is greater
 than any other double value, including <code>Double.POSITIVE_INFINITY</code>;</li>
 <li>+0.0d is greater than -0.0d</li>
 </ul>
 @param double1
 the first value to compare.
 @param double2
 the second value to compare.
 @return a negative value if <code>double1</code> is less than <code>double2</code>;
 0 if <code>double1</code> and <code>double2</code> are equal; a positive
 value if <code>double1</code> is greater than <code>double2</code>.
 */
+ (jint)compareWithDouble:(jdouble)double1
               withDouble:(jdouble)double2;

/*!
 @brief Compares this object to the specified double object to determine their
 relative order.
 There are two special cases:
 <ul>
 <li><code>Double.NaN</code> is equal to <code>Double.NaN</code> and it is greater
 than any other double value, including <code>Double.POSITIVE_INFINITY</code>;</li>
 <li>+0.0d is greater than -0.0d</li>
 </ul>
 @param object
 the double object to compare this object to.
 @return a negative value if the value of this double is less than the
 value of <code>object</code>; 0 if the value of this double and the
 value of <code>object</code> are equal; a positive value if the value
 of this double is greater than the value of <code>object</code>.
 @throws NullPointerException
 if <code>object</code> is <code>null</code>.
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangDouble *)object;

/*!
 @brief Returns an integer corresponding to the bits of the given
 <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754</a> double precision
 <code>value</code>.
 All <em>Not-a-Number (NaN)</em> values are converted to a single NaN
 representation (<code>0x7ff8000000000000L</code>) (compare to <code>doubleToRawLongBits</code>).
 */
+ (jlong)doubleToLongBitsWithDouble:(jdouble)value;

/*!
 @brief Returns an integer corresponding to the bits of the given
 <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754</a> double precision
 <code>value</code>.
 <em>Not-a-Number (NaN)</em> values are preserved (compare
 to <code>doubleToLongBits</code>).
 */
+ (jlong)doubleToRawLongBitsWithDouble:(jdouble)value;

/*!
 @brief Gets the primitive value of this double.
 @return this object's primitive value.
 */
- (jdouble)doubleValue;

/*!
 @brief Tests this double for equality with <code>object</code>.
 To be equal, <code>object</code> must be an instance of <code>Double</code> and
 <code>doubleToLongBits</code> must give the same value for both objects.
 <p>Note that, unlike <code>==</code>, <code>-0.0</code> and <code>+0.0</code> compare
 unequal, and <code>NaN</code>s compare equal by this method.
 @param object
 the object to compare this double with.
 @return <code>true</code> if the specified object is equal to this
 <code>Double</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

- (jfloat)floatValue;

- (NSUInteger)hash;

- (jint)intValue;

/*!
 @brief Indicates whether this object represents an infinite value.
 @return <code>true</code> if the value of this double is positive or negative
 infinity; <code>false</code> otherwise.
 */
- (jboolean)isInfinite;

/*!
 @brief Indicates whether the specified double represents an infinite value.
 @param d
 the double to check.
 @return <code>true</code> if the value of <code>d</code> is positive or negative
 infinity; <code>false</code> otherwise.
 */
+ (jboolean)isInfiniteWithDouble:(jdouble)d;

/*!
 @brief Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
 @return <code>true</code> if this double is <em>Not-a-Number</em>;
 <code>false</code> if it is a (potentially infinite) double number.
 */
- (jboolean)isNaN;

/*!
 @brief Indicates whether the specified double is a <em>Not-a-Number (NaN)</em>
 value.
 @param d
 the double value to check.
 @return <code>true</code> if <code>d</code> is <em>Not-a-Number</em>;
 <code>false</code> if it is a (potentially infinite) double number.
 */
+ (jboolean)isNaNWithDouble:(jdouble)d;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754</a>
 double precision float corresponding to the given <code>bits</code>.
 */
+ (jdouble)longBitsToDoubleWithLong:(jlong)bits;

- (jlong)longLongValue;

/*!
 @brief Parses the specified string as a double value.
 @param string
 the string representation of a double value.
 @return the primitive double value represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a double value.
 */
+ (jdouble)parseDoubleWithNSString:(NSString *)string;

- (jshort)shortValue;

/*!
 @brief Converts the specified double into its hexadecimal string representation.
 @param d
 the double to convert.
 @return the hexadecimal string representation of <code>d</code>.
 @since 1.5
 */
+ (NSString *)toHexStringWithDouble:(jdouble)d;

- (NSString *)description;

/*!
 @brief Returns a string containing a concise, human-readable description of the
 specified double value.
 @param d
 the double to convert to a string.
 @return a printable representation of <code>d</code>.
 */
+ (NSString *)toStringWithDouble:(jdouble)d;

/*!
 @brief Returns a <code>Double</code> instance for the specified double value.
 @param d
 the double value to store in the instance.
 @return a <code>Double</code> instance containing <code>d</code>.
 @since 1.5
 */
+ (JavaLangDouble *)valueOfWithDouble:(jdouble)d;

/*!
 @brief Parses the specified string as a double value.
 @param string
 the string representation of a double value.
 @return a <code>Double</code> instance containing the double value represented
 by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a double value.
 */
+ (JavaLangDouble *)valueOfWithNSString:(NSString *)string;

#pragma mark Package-Private


@end

J2OBJC_STATIC_INIT(JavaLangDouble)

FOUNDATION_EXPORT NSString *JavaLangDouble_FLOATING_POINT_REGEX_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, FLOATING_POINT_REGEX_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, EXPONENT_BIAS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, EXPONENT_BITS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MANTISSA_BITS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, NON_MANTISSA_BITS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, SIGN_MASK, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, EXPONENT_MASK, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MANTISSA_MASK, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MAX_VALUE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MIN_VALUE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, NaN, jdouble)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, POSITIVE_INFINITY, jdouble)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, NEGATIVE_INFINITY, jdouble)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MIN_NORMAL, jdouble)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MAX_EXPONENT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, MIN_EXPONENT, jint)

FOUNDATION_EXPORT IOSClass *JavaLangDouble_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, TYPE_, IOSClass *)

J2OBJC_STATIC_FIELD_GETTER(JavaLangDouble, SIZE, jint)

FOUNDATION_EXPORT void JavaLangDouble_initWithDouble_(JavaLangDouble *self, jdouble value);

FOUNDATION_EXPORT JavaLangDouble *new_JavaLangDouble_initWithDouble_(jdouble value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangDouble_initWithNSString_(JavaLangDouble *self, NSString *string);

FOUNDATION_EXPORT JavaLangDouble *new_JavaLangDouble_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jlong JavaLangDouble_doubleToLongBitsWithDouble_(jdouble value);

FOUNDATION_EXPORT jlong JavaLangDouble_doubleToRawLongBitsWithDouble_(jdouble value);

FOUNDATION_EXPORT jboolean JavaLangDouble_isInfiniteWithDouble_(jdouble d);

FOUNDATION_EXPORT jboolean JavaLangDouble_isNaNWithDouble_(jdouble d);

FOUNDATION_EXPORT jdouble JavaLangDouble_longBitsToDoubleWithLong_(jlong bits);

FOUNDATION_EXPORT jdouble JavaLangDouble_parseDoubleWithNSString_(NSString *string);

FOUNDATION_EXPORT NSString *JavaLangDouble_toStringWithDouble_(jdouble d);

FOUNDATION_EXPORT JavaLangDouble *JavaLangDouble_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT jint JavaLangDouble_compareWithDouble_withDouble_(jdouble double1, jdouble double2);

FOUNDATION_EXPORT JavaLangDouble *JavaLangDouble_valueOfWithDouble_(jdouble d);

FOUNDATION_EXPORT NSString *JavaLangDouble_toHexStringWithDouble_(jdouble d);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangDouble)

BOXED_INC_AND_DEC(Double, doubleValue, JavaLangDouble)
BOXED_COMPOUND_ASSIGN_ARITHMETIC(Double, doubleValue, jdouble, JavaLangDouble)
BOXED_COMPOUND_ASSIGN_FPMOD(Double, doubleValue, jdouble, JavaLangDouble)

#endif // _JavaLangDouble_H_
