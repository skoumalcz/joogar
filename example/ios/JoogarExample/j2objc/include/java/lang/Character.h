//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Character.java
//

#ifndef _JavaLangCharacter_H_
#define _JavaLangCharacter_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"

@class IOSCharArray;
@class IOSClass;
@protocol JavaLangCharSequence;

#define JavaLangCharacter_MIN_VALUE 0x0000
#define JavaLangCharacter_MAX_VALUE 0xffff
#define JavaLangCharacter_MIN_RADIX 2
#define JavaLangCharacter_MAX_RADIX 36
#define JavaLangCharacter_UNASSIGNED 0
#define JavaLangCharacter_UPPERCASE_LETTER 1
#define JavaLangCharacter_LOWERCASE_LETTER 2
#define JavaLangCharacter_TITLECASE_LETTER 3
#define JavaLangCharacter_MODIFIER_LETTER 4
#define JavaLangCharacter_OTHER_LETTER 5
#define JavaLangCharacter_NON_SPACING_MARK 6
#define JavaLangCharacter_ENCLOSING_MARK 7
#define JavaLangCharacter_COMBINING_SPACING_MARK 8
#define JavaLangCharacter_DECIMAL_DIGIT_NUMBER 9
#define JavaLangCharacter_LETTER_NUMBER 10
#define JavaLangCharacter_OTHER_NUMBER 11
#define JavaLangCharacter_SPACE_SEPARATOR 12
#define JavaLangCharacter_LINE_SEPARATOR 13
#define JavaLangCharacter_PARAGRAPH_SEPARATOR 14
#define JavaLangCharacter_CONTROL 15
#define JavaLangCharacter_FORMAT 16
#define JavaLangCharacter_PRIVATE_USE 18
#define JavaLangCharacter_SURROGATE 19
#define JavaLangCharacter_DASH_PUNCTUATION 20
#define JavaLangCharacter_START_PUNCTUATION 21
#define JavaLangCharacter_END_PUNCTUATION 22
#define JavaLangCharacter_CONNECTOR_PUNCTUATION 23
#define JavaLangCharacter_OTHER_PUNCTUATION 24
#define JavaLangCharacter_MATH_SYMBOL 25
#define JavaLangCharacter_CURRENCY_SYMBOL 26
#define JavaLangCharacter_MODIFIER_SYMBOL 27
#define JavaLangCharacter_OTHER_SYMBOL 28
#define JavaLangCharacter_INITIAL_QUOTE_PUNCTUATION 29
#define JavaLangCharacter_FINAL_QUOTE_PUNCTUATION 30
#define JavaLangCharacter_DIRECTIONALITY_UNDEFINED -1
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT 0
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT 1
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC 2
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER 3
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR 4
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR 5
#define JavaLangCharacter_DIRECTIONALITY_ARABIC_NUMBER 6
#define JavaLangCharacter_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR 7
#define JavaLangCharacter_DIRECTIONALITY_NONSPACING_MARK 8
#define JavaLangCharacter_DIRECTIONALITY_BOUNDARY_NEUTRAL 9
#define JavaLangCharacter_DIRECTIONALITY_PARAGRAPH_SEPARATOR 10
#define JavaLangCharacter_DIRECTIONALITY_SEGMENT_SEPARATOR 11
#define JavaLangCharacter_DIRECTIONALITY_WHITESPACE 12
#define JavaLangCharacter_DIRECTIONALITY_OTHER_NEUTRALS 13
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING 14
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE 15
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING 16
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE 17
#define JavaLangCharacter_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT 18
#define JavaLangCharacter_MIN_HIGH_SURROGATE 0xd800
#define JavaLangCharacter_MAX_HIGH_SURROGATE 0xdbff
#define JavaLangCharacter_MIN_LOW_SURROGATE 0xdc00
#define JavaLangCharacter_MAX_LOW_SURROGATE 0xdfff
#define JavaLangCharacter_MIN_SURROGATE 0xd800
#define JavaLangCharacter_MAX_SURROGATE 0xdfff
#define JavaLangCharacter_MIN_SUPPLEMENTARY_CODE_POINT 65536
#define JavaLangCharacter_MIN_CODE_POINT 0
#define JavaLangCharacter_MAX_CODE_POINT 1114111
#define JavaLangCharacter_SIZE 16

/*!
 @brief The wrapper for the primitive type <code>char</code>.
 This class also provides a
 number of utility methods for working with characters.
 <p>Character data is kept up to date as Unicode evolves.
 See the <a href="../util/Locale.html#locale_data">Locale data</a> section of
 the <code>Locale</code> documentation for details of the Unicode versions implemented by current
 and historical Android releases.
 <p>The Unicode specification, character tables, and other information are available at
 <a href="http://www.unicode.org/">http://www.unicode.org/</a>.
 <p>Unicode characters are referred to as <i>code points</i>. The range of valid
 code points is U+0000 to U+10FFFF. The <i>Basic Multilingual Plane (BMP)</i>
 is the code point range U+0000 to U+FFFF. Characters above the BMP are
 referred to as <i>Supplementary Characters</i>. On the Java platform, UTF-16
 encoding and <code>char</code> pairs are used to represent code points in the
 supplementary range. A pair of <code>char</code> values that represent a
 supplementary character are made up of a <i>high surrogate</i> with a value
 range of 0xD800 to 0xDBFF and a <i>low surrogate</i> with a value range of
 0xDC00 to 0xDFFF.
 <p>
 On the Java platform a <code>char</code> value represents either a single BMP code
 point or a UTF-16 unit that's part of a surrogate pair. The <code>int</code> type
 is used to represent all Unicode code points.
 <a name="unicode_categories"><h3>Unicode categories</h3></a>
 <p>Here's a list of the Unicode character categories and the corresponding Java constant,
 grouped semantically to provide a convenient overview. This table is also useful in
 conjunction with <code>\p</code> and <code>\P</code> in <code>regular expressions</code>.
 <span class="datatable">
 
 
 
 <p><table>
 <tr> <td> Cn </td> <td> Unassigned </td>  <td><code>UNASSIGNED</code></td> </tr>
 <tr> <td> Cc </td> <td> Control </td>     <td><code>CONTROL</code></td> </tr>
 <tr> <td> Cf </td> <td> Format </td>      <td><code>FORMAT</code></td> </tr>
 <tr> <td> Co </td> <td> Private use </td> <td><code>PRIVATE_USE</code></td> </tr>
 <tr> <td> Cs </td> <td> Surrogate </td>   <td><code>SURROGATE</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Lu </td> <td> Uppercase letter </td> <td><code>UPPERCASE_LETTER</code></td> </tr>
 <tr> <td> Ll </td> <td> Lowercase letter </td> <td><code>LOWERCASE_LETTER</code></td> </tr>
 <tr> <td> Lt </td> <td> Titlecase letter </td> <td><code>TITLECASE_LETTER</code></td> </tr>
 <tr> <td> Lm </td> <td> Modifier letter </td>  <td><code>MODIFIER_LETTER</code></td> </tr>
 <tr> <td> Lo </td> <td> Other letter </td>     <td><code>OTHER_LETTER</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Mn </td> <td> Non-spacing mark </td>       <td><code>NON_SPACING_MARK</code></td> </tr>
 <tr> <td> Me </td> <td> Enclosing mark </td>         <td><code>ENCLOSING_MARK</code></td> </tr>
 <tr> <td> Mc </td> <td> Combining spacing mark </td> <td><code>COMBINING_SPACING_MARK</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Nd </td> <td> Decimal digit number </td> <td><code>DECIMAL_DIGIT_NUMBER</code></td> </tr>
 <tr> <td> Nl </td> <td> Letter number </td>        <td><code>LETTER_NUMBER</code></td> </tr>
 <tr> <td> No </td> <td> Other number </td>         <td><code>OTHER_NUMBER</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Pd </td> <td> Dash punctuation </td>          <td><code>DASH_PUNCTUATION</code></td> </tr>
 <tr> <td> Ps </td> <td> Start punctuation </td>         <td><code>START_PUNCTUATION</code></td> </tr>
 <tr> <td> Pe </td> <td> End punctuation </td>           <td><code>END_PUNCTUATION</code></td> </tr>
 <tr> <td> Pc </td> <td> Connector punctuation </td>     <td><code>CONNECTOR_PUNCTUATION</code></td> </tr>
 <tr> <td> Pi </td> <td> Initial quote punctuation </td> <td><code>INITIAL_QUOTE_PUNCTUATION</code></td> </tr>
 <tr> <td> Pf </td> <td> Final quote punctuation </td>   <td><code>FINAL_QUOTE_PUNCTUATION</code></td> </tr>
 <tr> <td> Po </td> <td> Other punctuation </td>         <td><code>OTHER_PUNCTUATION</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Sm </td> <td> Math symbol </td>     <td><code>MATH_SYMBOL</code></td> </tr>
 <tr> <td> Sc </td> <td> Currency symbol </td> <td><code>CURRENCY_SYMBOL</code></td> </tr>
 <tr> <td> Sk </td> <td> Modifier symbol </td> <td><code>MODIFIER_SYMBOL</code></td> </tr>
 <tr> <td> So </td> <td> Other symbol </td>    <td><code>OTHER_SYMBOL</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Zs </td> <td> Space separator </td>     <td><code>SPACE_SEPARATOR</code></td> </tr>
 <tr> <td> Zl </td> <td> Line separator </td>      <td><code>LINE_SEPARATOR</code></td> </tr>
 <tr> <td> Zp </td> <td> Paragraph separator </td> <td><code>PARAGRAPH_SEPARATOR</code></td> </tr>
 </table>
 </span>
 @since 1.0
 */
@interface JavaLangCharacter : NSObject < JavaIoSerializable, JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Character</code> with the specified primitive char
 value.
 @param value
 the primitive char value to store in the new instance.
 */
- (instancetype)initWithChar:(jchar)value;

/*!
 @brief Calculates the number of <code>char</code> values required to represent the
 specified Unicode code point.
 This method checks if the <code>codePoint</code>
 is greater than or equal to <code>0x10000</code>, in which case <code>2</code> is
 returned, otherwise <code>1</code>. To test if the code point is valid, use
 the <code>isValidCodePoint(int)</code> method.
 @param codePoint
 the code point for which to calculate the number of required
 chars.
 @return <code>2</code> if <code>codePoint >= 0x10000</code>; <code>1</code> otherwise.
 @since 1.5
 */
+ (jint)charCountWithInt:(jint)codePoint;

/*!
 @brief Gets the primitive value of this character.
 @return this object's primitive value.
 */
- (jchar)charValue;

/*!
 @brief Returns the code point at <code>index</code> in the specified array of
 character units.
 If the unit at <code>index</code> is a high-surrogate unit,
 <code>index + 1</code> is less than the length of the array and the unit at
 <code>index + 1</code> is a low-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index</code> is returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> from which to retrieve the code
 point.
 @return the Unicode code point or <code>char</code> value at <code>index</code> in
 <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is negative or greater than or equal to
 the length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointAtWithCharArray:(IOSCharArray *)seq
                         withInt:(jint)index;

/*!
 @brief Returns the code point at <code>index</code> in the specified array of
 character units, where <code>index</code> has to be less than <code>limit</code>.
 If the unit at <code>index</code> is a high-surrogate unit, <code>index + 1</code>
 is less than <code>limit</code> and the unit at <code>index + 1</code> is a
 low-surrogate unit, then the supplementary code point represented by the
 pair is returned; otherwise the <code>char</code> value at <code>index</code> is
 returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> from which to get the code point.
 @param limit
 the index after the last unit in <code>seq</code> that can be used.
 @return the Unicode code point or <code>char</code> value at <code>index</code> in
 <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>index < 0</code>, <code>index >= limit</code>,
 <code>limit < 0</code> or if <code>limit</code> is greater than the
 length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointAtWithCharArray:(IOSCharArray *)seq
                         withInt:(jint)index
                         withInt:(jint)limit;

/*!
 @brief Returns the code point at <code>index</code> in the specified sequence of
 character units.
 If the unit at <code>index</code> is a high-surrogate unit,
 <code>index + 1</code> is less than the length of the sequence and the unit at
 <code>index + 1</code> is a low-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index</code> is returned.
 @param seq
 the source sequence of <code>char</code> units.
 @param index
 the position in <code>seq</code> from which to retrieve the code
 point.
 @return the Unicode code point or <code>char</code> value at <code>index</code> in
 <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is negative or greater than or equal to
 the length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointAtWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)index;

/*!
 @brief Returns the code point that precedes <code>index</code> in the specified
 array of character units.
 If the unit at <code>index - 1</code> is a
 low-surrogate unit, <code>index - 2</code> is not negative and the unit at
 <code>index - 2</code> is a high-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index - 1</code> is returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> following the code
 point that should be returned.
 @return the Unicode code point or <code>char</code> value before <code>index</code>
 in <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is less than 1 or greater than the
 length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointBeforeWithCharArray:(IOSCharArray *)seq
                             withInt:(jint)index;

/*!
 @brief Returns the code point that precedes the <code>index</code> in the specified
 array of character units and is not less than <code>start</code>.
 If the unit
 at <code>index - 1</code> is a low-surrogate unit, <code>index - 2</code> is not
 less than <code>start</code> and the unit at <code>index - 2</code> is a
 high-surrogate unit, then the supplementary code point represented by the
 pair is returned; otherwise the <code>char</code> value at <code>index - 1</code>
 is returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> following the code point that
 should be returned.
 @param start
 the index of the first element in <code>seq</code>.
 @return the Unicode code point or <code>char</code> value before <code>index</code>
 in <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index <= start</code>, <code>start < 0</code>,
 <code>index</code> is greater than the length of <code>seq</code>, or
 if <code>start</code> is equal or greater than the length of
 <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointBeforeWithCharArray:(IOSCharArray *)seq
                             withInt:(jint)index
                             withInt:(jint)start;

/*!
 @brief Returns the code point that precedes <code>index</code> in the specified
 sequence of character units.
 If the unit at <code>index - 1</code> is a
 low-surrogate unit, <code>index - 2</code> is not negative and the unit at
 <code>index - 2</code> is a high-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index - 1</code> is returned.
 @param seq
 the source sequence of <code>char</code> units.
 @param index
 the position in <code>seq</code> following the code
 point that should be returned.
 @return the Unicode code point or <code>char</code> value before <code>index</code>
 in <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is less than 1 or greater than the
 length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointBeforeWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                        withInt:(jint)index;

/*!
 @brief Counts the number of Unicode code points in the subsequence of the
 specified char array, as delineated by <code>offset</code> and <code>count</code>.
 Any surrogate values with missing pair values will be counted as one code
 point.
 @param seq
 the char array to look through
 @param offset
 the inclusive index to begin counting at.
 @param count
 the number of <code>char</code> values to look through in
 <code>seq</code>.
 @return the number of Unicode code points.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code>, <code>count < 0</code> or if
 <code>offset + count</code> is greater than the length of
 <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointCountWithCharArray:(IOSCharArray *)seq
                            withInt:(jint)offset
                            withInt:(jint)count;

/*!
 @brief Counts the number of Unicode code points in the subsequence of the
 specified character sequence, as delineated by <code>beginIndex</code> and
 <code>endIndex</code>.
 Any surrogate values with missing pair values will be
 counted as one code point.
 @param seq
 the <code>CharSequence</code> to look through.
 @param beginIndex
 the inclusive index to begin counting at.
 @param endIndex
 the exclusive index to stop counting at.
 @return the number of Unicode code points.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>beginIndex < 0</code>, <code>beginIndex > endIndex</code> or
 if <code>endIndex</code> is greater than the length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointCountWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                       withInt:(jint)beginIndex
                                       withInt:(jint)endIndex;

/*!
 @brief Compares two <code>char</code> values.
 @return 0 if lhs = rhs, less than 0 if lhs &lt; rhs, and greater than 0 if lhs &gt; rhs.
 @since 1.7
 */
+ (jint)compareWithChar:(jchar)lhs
               withChar:(jchar)rhs;

/*!
 @brief Compares this object to the specified character object to determine their
 relative order.
 @param c
 the character object to compare this object to.
 @return <code>0</code> if the value of this character and the value of
 <code>c</code> are equal; a positive value if the value of this
 character is greater than the value of <code>c</code>; a negative
 value if the value of this character is less than the value of
 <code>c</code>.
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangCharacter *)c;

/*!
 @brief Convenience method to determine the value of the specified character
 <code>c</code> in the supplied radix.
 The value of <code>radix</code> must be
 between MIN_RADIX and MAX_RADIX.
 @param c
 the character to determine the value of.
 @param radix
 the radix.
 @return the value of <code>c</code> in <code>radix</code> if <code>radix</code> lies
 between <code>MIN_RADIX</code> and <code>MAX_RADIX</code>; -1 otherwise.
 */
+ (jint)digitWithChar:(jchar)c
              withInt:(jint)radix;

/*!
 @brief Convenience method to determine the value of the character
 <code>codePoint</code> in the supplied radix.
 The value of <code>radix</code> must
 be between MIN_RADIX and MAX_RADIX.
 @param codePoint
 the character, including supplementary characters.
 @param radix
 the radix.
 @return if <code>radix</code> lies between <code>MIN_RADIX</code> and
 <code>MAX_RADIX</code> then the value of the character in the radix;
 -1 otherwise.
 */
+ (jint)digitWithInt:(jint)codePoint
             withInt:(jint)radix;

/*!
 @brief Compares this object with the specified object and indicates if they are
 equal.
 In order to be equal, <code>object</code> must be an instance of
 <code>Character</code> and have the same char value as this object.
 @param object
 the object to compare this double with.
 @return <code>true</code> if the specified object is equal to this
 <code>Character</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns the character which represents the specified digit in the
 specified radix.
 The <code>radix</code> must be between <code>MIN_RADIX</code> and
 <code>MAX_RADIX</code> inclusive; <code>digit</code> must not be negative and
 smaller than <code>radix</code>. If any of these conditions does not hold, 0
 is returned.
 @param digit
 the integer value.
 @param radix
 the radix.
 @return the character which represents the <code>digit</code> in the
 <code>radix</code>.
 */
+ (jchar)forDigitWithInt:(jint)digit
                 withInt:(jint)radix;

/*!
 @brief Gets the Unicode directionality of the specified character.
 @param c
 the character to get the directionality of.
 @return the Unicode directionality of <code>c</code>.
 */
+ (jbyte)getDirectionalityWithChar:(jchar)c;

/*!
 @brief Gets the Unicode directionality of the specified character.
 @param codePoint
 the Unicode code point to get the directionality of.
 @return the Unicode directionality of <code>codePoint</code>.
 */
+ (jbyte)getDirectionalityWithInt:(jint)codePoint;

/*!
 @brief Returns a human-readable name for the given code point,
 or null if the code point is unassigned.
 <p>As a fallback mechanism this method returns strings consisting of the Unicode
 block name (with underscores replaced by spaces), a single space, and the uppercase
 hex value of the code point, using as few digits as necessary.
 <p>Examples:
 <ul>
 <li><code>Character.getName(0)</code> returns "NULL".
 <li><code>Character.getName('e')</code> returns "LATIN SMALL LETTER E".
 <li><code>Character.getName('\u0666')</code> returns "ARABIC-INDIC DIGIT SIX".
 <li><code>Character.getName(0xe000)</code> returns "PRIVATE USE AREA E000".
 </ul>
 <p>Note that the exact strings returned will vary from release to release.
 @throws IllegalArgumentException if <code>codePoint</code> is not a valid code point.
 @since 1.7
 */
+ (NSString *)getNameWithInt:(jint)codePoint;

/*!
 @brief Returns the numeric value of the specified Unicode character.
 See <code>getNumericValue(int)</code>.
 @param c the character
 @return a non-negative numeric integer value if a numeric value for
 <code>c</code> exists, -1 if there is no numeric value for <code>c</code>,
 -2 if the numeric value can not be represented as an integer.
 */
+ (jint)getNumericValueWithChar:(jchar)c;

/*!
 @brief Gets the numeric value of the specified Unicode code point.
 For example,
 the code point '\u216B' stands for the Roman number XII, which has the
 numeric value 12.
 <p>There are two points of divergence between this method and the Unicode
 specification. This method treats the letters a-z (in both upper and lower
 cases, and their full-width variants) as numbers from 10 to 35. The
 Unicode specification also supports the idea of code points with non-integer
 numeric values; this method does not (except to the extent of returning -2
 for such code points).
 @param codePoint the code point
 @return a non-negative numeric integer value if a numeric value for
 <code>codePoint</code> exists, -1 if there is no numeric value for
 <code>codePoint</code>, -2 if the numeric value can not be
 represented with an integer.
 */
+ (jint)getNumericValueWithInt:(jint)codePoint;

/*!
 @brief Gets the general Unicode category of the specified character.
 @param c
 the character to get the category of.
 @return the Unicode category of <code>c</code>.
 */
+ (jint)getTypeWithChar:(jchar)c;

/*!
 @brief Gets the general Unicode category of the specified code point.
 @param codePoint
 the Unicode code point to get the category of.
 @return the Unicode category of <code>codePoint</code>.
 */
+ (jint)getTypeWithInt:(jint)codePoint;

- (NSUInteger)hash;

/*!
 @brief Returns the high surrogate for the given code point.
 The result is meaningless if
 the given code point is not a supplementary character.
 @since 1.7
 */
+ (jchar)highSurrogateWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given code point is alphabetic.
 That is,
 if it is in any of the Lu, Ll, Lt, Lm, Lo, Nl, or Other_Alphabetic categories.
 @since 1.7
 */
+ (jboolean)isAlphabeticWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given code point is in the Basic Multilingual Plane (BMP).
 Such code points can be represented by a single <code>char</code>.
 @since 1.7
 */
+ (jboolean)isBmpCodePointWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is defined in the Unicode
 specification.
 @param c
 the character to check.
 @return <code>true</code> if the general Unicode category of the character is
 not <code>UNASSIGNED</code>; <code>false</code> otherwise.
 */
+ (jboolean)isDefinedWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is defined in the Unicode
 specification.
 @param codePoint
 the code point to check.
 @return <code>true</code> if the general Unicode category of the code point is
 not <code>UNASSIGNED</code>; <code>false</code> otherwise.
 */
+ (jboolean)isDefinedWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a digit.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a digit; <code>false</code>
 otherwise.
 */
+ (jboolean)isDigitWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a digit.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a digit; <code>false</code>
 otherwise.
 */
+ (jboolean)isDigitWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>ch</code> is a high- (or leading-) surrogate code unit
 that is used for representing supplementary characters in UTF-16
 encoding.
 @param ch
 the character to test.
 @return <code>true</code> if <code>ch</code> is a high-surrogate code unit;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isHighSurrogateWithChar:(jchar)ch;

/*!
 @brief Indicates whether the specified character is ignorable in a Java or
 Unicode identifier.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is ignorable; <code>false</code> otherwise.
 */
+ (jboolean)isIdentifierIgnorableWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is ignorable in a Java or
 Unicode identifier.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is ignorable; <code>false</code>
 otherwise.
 */
+ (jboolean)isIdentifierIgnorableWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given code point is a CJKV ideographic character.
 @since 1.7
 */
+ (jboolean)isIdeographicWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is an ISO control character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is an ISO control character;
 <code>false</code> otherwise.
 */
+ (jboolean)isISOControlWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is an ISO control character.
 @param c
 the code point to check.
 @return <code>true</code> if <code>c</code> is an ISO control character;
 <code>false</code> otherwise.
 */
+ (jboolean)isISOControlWithInt:(jint)c;

/*!
 @brief Indicates whether the specified character is a valid part of a Java
 identifier other than the first character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is valid as part of a Java identifier;
 <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierPartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a valid part of a Java
 identifier other than the first character.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>c</code> is valid as part of a Java identifier;
 <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierPartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a valid first character for
 a Java identifier.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a valid first character of a Java
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierStartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a valid first character for
 a Java identifier.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a valid start of a Java
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierStartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a Java letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a Java letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isJavaLetterWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified character is a Java letter or digit
 character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a Java letter or digit;
 <code>false</code> otherwise.
 */
+ (jboolean)isJavaLetterOrDigitWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified character is a letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a letter; <code>false</code> otherwise.
 */
+ (jboolean)isLetterWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a letter.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isLetterWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a letter or a digit.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a letter or a digit; <code>false</code>
 otherwise.
 */
+ (jboolean)isLetterOrDigitWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a letter or a digit.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a letter or a digit;
 <code>false</code> otherwise.
 */
+ (jboolean)isLetterOrDigitWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a lower case letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a lower case letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isLowerCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a lower case letter.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a lower case letter;
 <code>false</code> otherwise.
 */
+ (jboolean)isLowerCaseWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>ch</code> is a low- (or trailing-) surrogate code unit
 that is used for representing supplementary characters in UTF-16
 encoding.
 @param ch
 the character to test.
 @return <code>true</code> if <code>ch</code> is a low-surrogate code unit;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isLowSurrogateWithChar:(jchar)ch;

/*!
 @brief Indicates whether the specified character is mirrored.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is mirrored; <code>false</code>
 otherwise.
 */
+ (jboolean)isMirroredWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is mirrored.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is mirrored, <code>false</code>
 otherwise.
 */
+ (jboolean)isMirroredWithInt:(jint)codePoint;

/*!
 @brief Use <code>isWhitespace(char)</code> instead.
 */
+ (jboolean)isSpaceWithChar:(jchar)c;

/*!
 @brief See <code>isSpaceChar(int)</code>.
 */
+ (jboolean)isSpaceCharWithChar:(jchar)c;

/*!
 @brief Returns true if the given code point is a Unicode space character.
 The exact set of characters considered as whitespace varies with Unicode version.
 Note that non-breaking spaces are considered whitespace.
 Note also that line separators are not considered whitespace; see <code>isWhitespace</code>
 for an alternative.
 */
+ (jboolean)isSpaceCharWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>codePoint</code> is within the supplementary code
 point range.
 @param codePoint
 the code point to test.
 @return <code>true</code> if <code>codePoint</code> is within the supplementary
 code point range; <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isSupplementaryCodePointWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given character is a high or low surrogate.
 @since 1.7
 */
+ (jboolean)isSurrogateWithChar:(jchar)ch;

/*!
 @brief Indicates whether the specified character pair is a valid surrogate pair.
 @param high
 the high surrogate unit to test.
 @param low
 the low surrogate unit to test.
 @return <code>true</code> if <code>high</code> is a high-surrogate code unit and
 <code>low</code> is a low-surrogate code unit; <code>false</code>
 otherwise.
 @since 1.5
 */
+ (jboolean)isSurrogatePairWithChar:(jchar)high
                           withChar:(jchar)low;

/*!
 @brief Indicates whether the specified character is a titlecase character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a titlecase character, <code>false</code>
 otherwise.
 */
+ (jboolean)isTitleCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a titlecase character.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a titlecase character,
 <code>false</code> otherwise.
 */
+ (jboolean)isTitleCaseWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is valid as part of a Unicode
 identifier other than the first character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is valid as part of a Unicode
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierPartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is valid as part of a Unicode
 identifier other than the first character.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is valid as part of a Unicode
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierPartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a valid initial character
 for a Unicode identifier.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a valid first character for a
 Unicode identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierStartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a valid initial character
 for a Unicode identifier.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a valid first character for
 a Unicode identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierStartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is an upper case letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a upper case letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isUpperCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is an upper case letter.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a upper case letter;
 <code>false</code> otherwise.
 */
+ (jboolean)isUpperCaseWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>codePoint</code> is a valid Unicode code point.
 @param codePoint
 the code point to test.
 @return <code>true</code> if <code>codePoint</code> is a valid Unicode code point;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isValidCodePointWithInt:(jint)codePoint;

/*!
 @brief See <code>isWhitespace(int)</code>.
 */
+ (jboolean)isWhitespaceWithChar:(jchar)c;

/*!
 @brief Returns true if the given code point is a Unicode whitespace character.
 The exact set of characters considered as whitespace varies with Unicode version.
 Note that non-breaking spaces are not considered whitespace.
 Note also that line separators are considered whitespace; see <code>isSpaceChar</code>
 for an alternative.
 */
+ (jboolean)isWhitespaceWithInt:(jint)codePoint;

/*!
 @brief Returns the low surrogate for the given code point.
 The result is meaningless if
 the given code point is not a supplementary character.
 @since 1.7
 */
+ (jchar)lowSurrogateWithInt:(jint)codePoint;

/*!
 @brief Determines the index in a subsequence of the specified character array
 that is offset <code>codePointOffset</code> code points from <code>index</code>.
 The subsequence is delineated by <code>start</code> and <code>count</code>.
 @param seq
 the character array to find the index in.
 @param start
 the inclusive index that marks the beginning of the
 subsequence.
 @param count
 the number of <code>char</code> values to include within the
 subsequence.
 @param index
 the start index in the subsequence of the char array.
 @param codePointOffset
 the number of code points to look backwards or forwards; may
 be a negative or positive value.
 @return the index in <code>seq</code> that is <code>codePointOffset</code> code
 points away from <code>index</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>start < 0</code>, <code>count < 0</code>,
 <code>index < start</code>, <code>index > start + count</code>,
 <code>start + count</code> is greater than the length of
 <code>seq</code>, or if there are not enough values in
 <code>seq</code> to skip <code>codePointOffset</code> code points
 forward or backward (if <code>codePointOffset</code> is
 negative) from <code>index</code>.
 @since 1.5
 */
+ (jint)offsetByCodePointsWithCharArray:(IOSCharArray *)seq
                                withInt:(jint)start
                                withInt:(jint)count
                                withInt:(jint)index
                                withInt:(jint)codePointOffset;

/*!
 @brief Determines the index in the specified character sequence that is offset
 <code>codePointOffset</code> code points from <code>index</code>.
 @param seq
 the character sequence to find the index in.
 @param index
 the start index in <code>seq</code>.
 @param codePointOffset
 the number of code points to look backwards or forwards; may
 be a negative or positive value.
 @return the index in <code>seq</code> that is <code>codePointOffset</code> code
 points away from <code>index</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>index < 0</code>, <code>index</code> is greater than the
 length of <code>seq</code>, or if there are not enough values in
 <code>seq</code> to skip <code>codePointOffset</code> code points
 forwards or backwards (if <code>codePointOffset</code> is
 negative) from <code>index</code>.
 @since 1.5
 */
+ (jint)offsetByCodePointsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                           withInt:(jint)index
                                           withInt:(jint)codePointOffset;

/*!
 @brief Reverses the order of the first and second byte in the specified
 character.
 @param c
 the character to reverse.
 @return the character with reordered bytes.
 */
+ (jchar)reverseBytesWithChar:(jchar)c;

/*!
 @brief Converts the specified Unicode code point into a UTF-16 encoded sequence
 and returns it as a char array.
 @param codePoint
 the Unicode code point to encode.
 @return the UTF-16 encoded char sequence. If <code>codePoint</code> is a
 <code>supplementary code point</code>,
 then the returned array contains two characters, otherwise it
 contains just one character.
 @throws IllegalArgumentException if <code>codePoint</code> is not a valid code point.
 @since 1.5
 */
+ (IOSCharArray *)toCharsWithInt:(jint)codePoint;

/*!
 @brief Converts the specified Unicode code point into a UTF-16 encoded sequence
 and copies the value(s) into the char array <code>dst</code>, starting at
 index <code>dstIndex</code>.
 @param codePoint
 the Unicode code point to encode.
 @param dst
 the destination array to copy the encoded value into.
 @param dstIndex
 the index in <code>dst</code> from where to start copying.
 @return the number of <code>char</code> value units copied into <code>dst</code>.
 @throws IllegalArgumentException if <code>codePoint</code> is not a valid code point.
 @throws NullPointerException
 if <code>dst</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>dstIndex</code> is negative, greater than or equal to
 <code>dst.length</code> or equals <code>dst.length - 1</code> when
 <code>codePoint</code> is a
 <code>supplementary code point</code>.
 @since 1.5
 */
+ (jint)toCharsWithInt:(jint)codePoint
         withCharArray:(IOSCharArray *)dst
               withInt:(jint)dstIndex;

/*!
 @brief Converts a surrogate pair into a Unicode code point.
 This method assumes
 that the pair are valid surrogates. If the pair are <i>not</i> valid
 surrogates, then the result is indeterminate. The
 <code>isSurrogatePair(char,char)</code> method should be used prior to this
 method to validate the pair.
 @param high
 the high surrogate unit.
 @param low
 the low surrogate unit.
 @return the Unicode code point corresponding to the surrogate unit pair.
 @since 1.5
 */
+ (jint)toCodePointWithChar:(jchar)high
                   withChar:(jchar)low;

/*!
 @brief Returns the lower case equivalent for the specified character if the
 character is an upper case letter.
 Otherwise, the specified character is
 returned unchanged.
 @param c
 the character
 @return if <code>c</code> is an upper case character then its lower case
 counterpart, otherwise just <code>c</code>.
 */
+ (jchar)toLowerCaseWithChar:(jchar)c;

/*!
 @brief Returns the lower case equivalent for the specified code point if it is
 an upper case letter.
 Otherwise, the specified code point is returned
 unchanged.
 @param codePoint
 the code point to check.
 @return if <code>codePoint</code> is an upper case character then its lower
 case counterpart, otherwise just <code>codePoint</code>.
 */
+ (jint)toLowerCaseWithInt:(jint)codePoint;

- (NSString *)description;

/*!
 @brief Converts the specified character to its string representation.
 @param value
 the character to convert.
 @return the character converted to a string.
 */
+ (NSString *)toStringWithChar:(jchar)value;

/*!
 @brief Returns the title case equivalent for the specified character if it
 exists.
 Otherwise, the specified character is returned unchanged.
 @param c
 the character to convert.
 @return the title case equivalent of <code>c</code> if it exists, otherwise
 <code>c</code>.
 */
+ (jchar)toTitleCaseWithChar:(jchar)c;

/*!
 @brief Returns the title case equivalent for the specified code point if it
 exists.
 Otherwise, the specified code point is returned unchanged.
 @param codePoint
 the code point to convert.
 @return the title case equivalent of <code>codePoint</code> if it exists,
 otherwise <code>codePoint</code>.
 */
+ (jint)toTitleCaseWithInt:(jint)codePoint;

/*!
 @brief Returns the upper case equivalent for the specified character if the
 character is a lower case letter.
 Otherwise, the specified character is
 returned unchanged.
 @param c
 the character to convert.
 @return if <code>c</code> is a lower case character then its upper case
 counterpart, otherwise just <code>c</code>.
 */
+ (jchar)toUpperCaseWithChar:(jchar)c;

/*!
 @brief Returns the upper case equivalent for the specified code point if the
 code point is a lower case letter.
 Otherwise, the specified code point is
 returned unchanged.
 @param codePoint
 the code point to convert.
 @return if <code>codePoint</code> is a lower case character then its upper
 case counterpart, otherwise just <code>codePoint</code>.
 */
+ (jint)toUpperCaseWithInt:(jint)codePoint;

/*!
 @brief Returns a <code>Character</code> instance for the <code>char</code> value passed.
 <p>
 If it is not necessary to get a new <code>Character</code> instance, it is
 recommended to use this method instead of the constructor, since it
 maintains a cache of instances which may result in better performance.
 @param c
 the char value for which to get a <code>Character</code> instance.
 @return the <code>Character</code> instance for <code>c</code>.
 @since 1.5
 */
+ (JavaLangCharacter *)valueOfWithChar:(jchar)c;

#pragma mark Package-Private





@end

J2OBJC_STATIC_INIT(JavaLangCharacter)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_VALUE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MAX_VALUE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_RADIX, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MAX_RADIX, jint)

FOUNDATION_EXPORT IOSClass *JavaLangCharacter_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, TYPE_, IOSClass *)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, UNASSIGNED, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, UPPERCASE_LETTER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, LOWERCASE_LETTER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, TITLECASE_LETTER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MODIFIER_LETTER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, OTHER_LETTER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, NON_SPACING_MARK, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, ENCLOSING_MARK, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, COMBINING_SPACING_MARK, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DECIMAL_DIGIT_NUMBER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, LETTER_NUMBER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, OTHER_NUMBER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, SPACE_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, LINE_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, PARAGRAPH_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, CONTROL, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, FORMAT, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, PRIVATE_USE, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, SURROGATE, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DASH_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, START_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, END_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, CONNECTOR_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, OTHER_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MATH_SYMBOL, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, CURRENCY_SYMBOL, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MODIFIER_SYMBOL, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, OTHER_SYMBOL, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, INITIAL_QUOTE_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, FINAL_QUOTE_PUNCTUATION, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_UNDEFINED, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_ARABIC_NUMBER, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_COMMON_NUMBER_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_NONSPACING_MARK, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_BOUNDARY_NEUTRAL, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_PARAGRAPH_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_SEGMENT_SEPARATOR, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_WHITESPACE, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_OTHER_NEUTRALS, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, DIRECTIONALITY_POP_DIRECTIONAL_FORMAT, jbyte)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_HIGH_SURROGATE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MAX_HIGH_SURROGATE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_LOW_SURROGATE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MAX_LOW_SURROGATE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_SURROGATE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MAX_SURROGATE, jchar)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_SUPPLEMENTARY_CODE_POINT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MIN_CODE_POINT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, MAX_CODE_POINT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter, SIZE, jint)

FOUNDATION_EXPORT void JavaLangCharacter_initWithChar_(JavaLangCharacter *self, jchar value);

FOUNDATION_EXPORT JavaLangCharacter *new_JavaLangCharacter_initWithChar_(jchar value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint JavaLangCharacter_compareWithChar_withChar_(jchar lhs, jchar rhs);

FOUNDATION_EXPORT JavaLangCharacter *JavaLangCharacter_valueOfWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isValidCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSupplementaryCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isHighSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSurrogatePairWithChar_withChar_(jchar high, jchar low);

FOUNDATION_EXPORT jint JavaLangCharacter_charCountWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toCodePointWithChar_withChar_(jchar high, jchar low);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithCharArray_withInt_(IOSCharArray *seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(IOSCharArray *seq, jint index, jint limit);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithCharArray_withInt_(IOSCharArray *seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithCharArray_withInt_withInt_(IOSCharArray *seq, jint index, jint start);

FOUNDATION_EXPORT jint JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(jint codePoint, IOSCharArray *dst, jint dstIndex);

FOUNDATION_EXPORT IOSCharArray *JavaLangCharacter_toCharsWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint beginIndex, jint endIndex);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountWithCharArray_withInt_withInt_(IOSCharArray *seq, jint offset, jint count);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint index, jint codePointOffset);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsWithCharArray_withInt_withInt_withInt_withInt_(IOSCharArray *seq, jint start, jint count, jint index, jint codePointOffset);

FOUNDATION_EXPORT jint JavaLangCharacter_digitWithChar_withInt_(jchar c, jint radix);

FOUNDATION_EXPORT jint JavaLangCharacter_digitWithInt_withInt_(jint codePoint, jint radix);

FOUNDATION_EXPORT jchar JavaLangCharacter_forDigitWithInt_withInt_(jint digit, jint radix);

FOUNDATION_EXPORT NSString *JavaLangCharacter_getNameWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeWithInt_(jint codePoint);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityWithChar_(jchar c);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_highSurrogateWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_lowSurrogateWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isAlphabeticWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isBmpCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdeographicWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isISOControlWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isISOControlWithInt_(jint c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierPartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierPartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierStartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierStartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaLetterWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaLetterOrDigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_reverseBytesWithChar_(jchar c);

FOUNDATION_EXPORT jchar JavaLangCharacter_toLowerCaseWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_toLowerCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT NSString *JavaLangCharacter_toStringWithChar_(jchar value);

FOUNDATION_EXPORT jchar JavaLangCharacter_toTitleCaseWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_toTitleCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_toUpperCaseWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_toUpperCaseWithInt_(jint codePoint);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter)

BOXED_INC_AND_DEC(Char, charValue, JavaLangCharacter)

@interface JavaLangCharacter_Subset : NSObject

#pragma mark Public

/*!
 @brief Compares this character subset for identity with the specified object.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns this subset's hash code, which is the hash code computed by
 <code>java.lang.Object.hashCode()</code>.
 */
- (NSUInteger)hash;

/*!
 @brief Returns this subset's name.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a new <code>Subset</code>.
 */
- (instancetype)initWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangCharacter_Subset)

FOUNDATION_EXPORT void JavaLangCharacter_Subset_initWithNSString_(JavaLangCharacter_Subset *self, NSString *name);

FOUNDATION_EXPORT JavaLangCharacter_Subset *new_JavaLangCharacter_Subset_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_Subset)

/*!
 @brief Represents a block of Unicode characters.
 This class provides constants for various
 well-known blocks (but not all blocks) and methods for looking up a block
 by name <code>forName</code> or by code point <code>of</code>.
 @since 1.2
 */
@interface JavaLangCharacter_UnicodeBlock : JavaLangCharacter_Subset {
 @public
  jint rangeStart_;
  jint rangeEnd_;
}

#pragma mark Public

/*!
 @brief Returns the Unicode block for the given block name, or null if there is no
 such block.
 <p>Block names may be one of the following:
 <ul>
 <li>Canonical block name, as defined by the Unicode specification;
 case-insensitive.</li>
 <li>Canonical block name without any spaces, as defined by the
 Unicode specification; case-insensitive.</li>
 <li>A <code>UnicodeBlock</code> constant identifier. This is determined by
 converting the canonical name to uppercase and replacing all spaces and hyphens
 with underscores.</li>
 </ul>
 @throws NullPointerException
 if <code>blockName == null</code>.
 @throws IllegalArgumentException
 if <code>blockName</code> is not the name of any known block.
 @since 1.5
 */
+ (JavaLangCharacter_UnicodeBlock *)forNameWithNSString:(NSString *)blockName;

/*!
 @brief Returns the Unicode block containing the given code point, or null if the
 code point does not belong to any known block.
 */
+ (JavaLangCharacter_UnicodeBlock *)ofWithChar:(jchar)c;

/*!
 @brief Returns the Unicode block containing the given code point, or null if the
 code point does not belong to any known block.
 */
+ (JavaLangCharacter_UnicodeBlock *)ofWithInt:(jint)codePoint;

@end

J2OBJC_STATIC_INIT(JavaLangCharacter_UnicodeBlock)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SURROGATES_AREA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SURROGATES_AREA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BASIC_LATIN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BASIC_LATIN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_1_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LATIN_1_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IPA_EXTENSIONS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, IPA_EXTENSIONS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SPACING_MODIFIER_LETTERS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SPACING_MODIFIER_LETTERS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_DIACRITICAL_MARKS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GREEK_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GREEK_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CYRILLIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_SUPPLEMENTARY_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CYRILLIC_SUPPLEMENTARY_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARMENIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ARMENIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HEBREW_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HEBREW_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ARABIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SYRIAC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SYRIAC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_THAANA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, THAANA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DEVANAGARI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, DEVANAGARI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BENGALI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BENGALI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GURMUKHI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GURMUKHI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GUJARATI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GUJARATI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ORIYA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ORIYA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAMIL_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAMIL_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TELUGU_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TELUGU_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANNADA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KANNADA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MALAYALAM_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MALAYALAM_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SINHALA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SINHALA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_THAI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, THAI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LAO_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LAO_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TIBETAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TIBETAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MYANMAR_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MYANMAR_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEORGIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GEORGIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ETHIOPIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHEROKEE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CHEROKEE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OGHAM_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OGHAM_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_RUNIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, RUNIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGALOG_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAGALOG_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANUNOO_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HANUNOO_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BUHID_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BUHID_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGBANWA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAGBANWA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHMER_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KHMER_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MONGOLIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MONGOLIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LIMBU_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LIMBU_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_LE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAI_LE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHMER_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KHMER_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHONETIC_EXTENSIONS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PHONETIC_EXTENSIONS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_ADDITIONAL_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_ADDITIONAL_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GREEK_EXTENDED_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GREEK_EXTENDED_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GENERAL_PUNCTUATION_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GENERAL_PUNCTUATION_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPERSCRIPTS_AND_SUBSCRIPTS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPERSCRIPTS_AND_SUBSCRIPTS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CURRENCY_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CURRENCY_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_MARKS_FOR_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COMBINING_MARKS_FOR_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LETTERLIKE_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LETTERLIKE_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NUMBER_FORMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, NUMBER_FORMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARROWS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ARROWS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MATHEMATICAL_OPERATORS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MATHEMATICAL_OPERATORS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_TECHNICAL_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_TECHNICAL_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CONTROL_PICTURES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CONTROL_PICTURES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OPTICAL_CHARACTER_RECOGNITION_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OPTICAL_CHARACTER_RECOGNITION_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_ALPHANUMERICS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ENCLOSED_ALPHANUMERICS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOX_DRAWING_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BOX_DRAWING_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BLOCK_ELEMENTS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BLOCK_ELEMENTS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEOMETRIC_SHAPES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GEOMETRIC_SHAPES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DINGBATS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, DINGBATS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_ARROWS_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_ARROWS_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BRAILLE_PATTERNS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BRAILLE_PATTERNS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_ARROWS_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_ARROWS_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_MATHEMATICAL_OPERATORS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_MATHEMATICAL_OPERATORS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_AND_ARROWS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_AND_ARROWS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_RADICALS_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_RADICALS_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANGXI_RADICALS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KANGXI_RADICALS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IDEOGRAPHIC_DESCRIPTION_CHARACTERS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, IDEOGRAPHIC_DESCRIPTION_CHARACTERS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_SYMBOLS_AND_PUNCTUATION_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_SYMBOLS_AND_PUNCTUATION_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIRAGANA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HIRAGANA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KATAKANA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KATAKANA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOPOMOFO_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BOPOMOFO_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_COMPATIBILITY_JAMO_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HANGUL_COMPATIBILITY_JAMO_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANBUN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KANBUN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOPOMOFO_EXTENDED_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BOPOMOFO_EXTENDED_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KATAKANA_PHONETIC_EXTENSIONS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KATAKANA_PHONETIC_EXTENSIONS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_CJK_LETTERS_AND_MONTHS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ENCLOSED_CJK_LETTERS_AND_MONTHS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YIJING_HEXAGRAM_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, YIJING_HEXAGRAM_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YI_SYLLABLES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, YI_SYLLABLES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YI_RADICALS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, YI_RADICALS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_SYLLABLES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HANGUL_SYLLABLES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIGH_SURROGATES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HIGH_SURROGATES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIGH_PRIVATE_USE_SURROGATES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HIGH_PRIVATE_USE_SURROGATES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LOW_SURROGATES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LOW_SURROGATES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PRIVATE_USE_AREA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PRIVATE_USE_AREA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_IDEOGRAPHS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_IDEOGRAPHS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ALPHABETIC_PRESENTATION_FORMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ALPHABETIC_PRESENTATION_FORMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_PRESENTATION_FORMS_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ARABIC_PRESENTATION_FORMS_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VARIATION_SELECTORS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, VARIATION_SELECTORS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_HALF_MARKS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COMBINING_HALF_MARKS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_FORMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_FORMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SMALL_FORM_VARIANTS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SMALL_FORM_VARIANTS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_PRESENTATION_FORMS_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ARABIC_PRESENTATION_FORMS_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HALFWIDTH_AND_FULLWIDTH_FORMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HALFWIDTH_AND_FULLWIDTH_FORMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SPECIALS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SPECIALS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LINEAR_B_SYLLABARY_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LINEAR_B_SYLLABARY_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LINEAR_B_IDEOGRAMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LINEAR_B_IDEOGRAMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_AEGEAN_NUMBERS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, AEGEAN_NUMBERS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_ITALIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OLD_ITALIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GOTHIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GOTHIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UGARITIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, UGARITIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DESERET_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, DESERET_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SHAVIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SHAVIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OSMANYA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OSMANYA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYPRIOT_SYLLABARY_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CYPRIOT_SYLLABARY_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BYZANTINE_MUSICAL_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BYZANTINE_MUSICAL_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MUSICAL_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MUSICAL_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_XUAN_JING_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAI_XUAN_JING_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MATHEMATICAL_ALPHANUMERIC_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MATHEMATICAL_ALPHANUMERIC_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAGS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VARIATION_SELECTORS_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, VARIATION_SELECTORS_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTARY_PRIVATE_USE_AREA_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTARY_PRIVATE_USE_AREA_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_GREEK_MUSICAL_NOTATION_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ANCIENT_GREEK_MUSICAL_NOTATION_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_GREEK_NUMBERS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ANCIENT_GREEK_NUMBERS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ARABIC_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BUGINESE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BUGINESE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_STROKES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_STROKES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COPTIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COPTIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_EXTENDED_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ETHIOPIC_EXTENDED_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ETHIOPIC_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEORGIAN_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GEORGIAN_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GLAGOLITIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, GLAGOLITIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHAROSHTHI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KHAROSHTHI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MODIFIER_TONE_LETTERS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MODIFIER_TONE_LETTERS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NEW_TAI_LUE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, NEW_TAI_LUE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_PERSIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OLD_PERSIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHONETIC_EXTENSIONS_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PHONETIC_EXTENSIONS_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_PUNCTUATION_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_PUNCTUATION_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SYLOTI_NAGRI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SYLOTI_NAGRI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TIFINAGH_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TIFINAGH_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VERTICAL_FORMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, VERTICAL_FORMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NKO_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, NKO_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BALINESE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BALINESE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_C_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_C_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_D_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_D_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHAGS_PA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PHAGS_PA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHOENICIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PHOENICIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CUNEIFORM_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CUNEIFORM_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CUNEIFORM_NUMBERS_AND_PUNCTUATION_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CUNEIFORM_NUMBERS_AND_PUNCTUATION_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COUNTING_ROD_NUMERALS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COUNTING_ROD_NUMERALS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUNDANESE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SUNDANESE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LEPCHA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LEPCHA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OL_CHIKI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OL_CHIKI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_EXTENDED_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CYRILLIC_EXTENDED_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VAI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, VAI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_EXTENDED_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CYRILLIC_EXTENDED_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SAURASHTRA_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SAURASHTRA_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KAYAH_LI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KAYAH_LI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_REJANG_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, REJANG_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHAM_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CHAM_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ANCIENT_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHAISTOS_DISC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PHAISTOS_DISC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LYCIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LYCIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CARIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CARIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LYDIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LYDIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MAHJONG_TILES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MAHJONG_TILES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DOMINO_TILES_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, DOMINO_TILES_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SAMARITAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, SAMARITAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_THAM_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAI_THAM_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VEDIC_EXTENSIONS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, VEDIC_EXTENSIONS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LISU_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, LISU_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BAMUM_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BAMUM_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMMON_INDIC_NUMBER_FORMS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, COMMON_INDIC_NUMBER_FORMS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DEVANAGARI_EXTENDED_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, DEVANAGARI_EXTENDED_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_EXTENDED_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_EXTENDED_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_JAVANESE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, JAVANESE_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MYANMAR_EXTENDED_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MYANMAR_EXTENDED_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_VIET_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TAI_VIET_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MEETEI_MAYEK_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MEETEI_MAYEK_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_EXTENDED_B_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_EXTENDED_B_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IMPERIAL_ARAMAIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, IMPERIAL_ARAMAIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_SOUTH_ARABIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OLD_SOUTH_ARABIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_AVESTAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, AVESTAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_INSCRIPTIONAL_PARTHIAN_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, INSCRIPTIONAL_PARTHIAN_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_INSCRIPTIONAL_PAHLAVI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, INSCRIPTIONAL_PAHLAVI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_TURKIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, OLD_TURKIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_RUMI_NUMERAL_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, RUMI_NUMERAL_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KAITHI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KAITHI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_EGYPTIAN_HIEROGLYPHS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, EGYPTIAN_HIEROGLYPHS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_ALPHANUMERIC_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ENCLOSED_ALPHANUMERIC_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ENCLOSED_IDEOGRAPHIC_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MANDAIC_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MANDAIC_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BATAK_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BATAK_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_EXTENDED_A_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ETHIOPIC_EXTENDED_A_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BRAHMI_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BRAHMI_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BAMUM_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, BAMUM_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANA_SUPPLEMENT_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, KANA_SUPPLEMENT_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PLAYING_CARDS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, PLAYING_CARDS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_EMOTICONS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, EMOTICONS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TRANSPORT_AND_MAP_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, TRANSPORT_AND_MAP_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ALCHEMICAL_SYMBOLS_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, ALCHEMICAL_SYMBOLS_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D_, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_forNameWithNSString_(NSString *blockName);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ofWithChar_(jchar c);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ofWithInt_(jint codePoint);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_UnicodeBlock)

#endif // _JavaLangCharacter_H_
