//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/lang/System.java
//

#ifndef _JavaLangSystem_H_
#define _JavaLangSystem_H_

#include "J2ObjC_header.h"

@class JavaIoInputStream;
@class JavaIoPrintStream;
@class JavaLangSecurityManager;
@class JavaLangThrowable;
@class JavaUtilProperties;
@protocol JavaUtilMap;

/*!
 @brief Simple iOS version of java.lang.System.
 No code was shared, just its
 public API.
 @author Tom Ball
 */
@interface JavaLangSystem : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)arraycopyWithId:(id)src
                withInt:(jint)srcPos
                 withId:(id)dest
                withInt:(jint)destPos
                withInt:(jint)length;

+ (NSString *)clearPropertyWithNSString:(NSString *)key;

+ (jlong)currentTimeMillis;

+ (void)exitWithInt:(jint)status;

+ (id<JavaUtilMap>)getenv;

+ (NSString *)getenvWithNSString:(NSString *)name;

+ (JavaUtilProperties *)getProperties;

+ (NSString *)getPropertyWithNSString:(NSString *)key;

+ (NSString *)getPropertyWithNSString:(NSString *)key
                         withNSString:(NSString *)defaultValue;

/*!
 @brief Returns null.
 Android does not use <code>SecurityManager</code>. This method
 is only provided for source compatibility.
 @return null
 */
+ (JavaLangSecurityManager *)getSecurityManager;

+ (jint)identityHashCodeWithId:(id)anObject;

/*!
 @brief Returns the system's line separator.
 @since 1.7
 */
+ (NSString *)lineSeparator;

/*!
 @brief See <code>Runtime.load</code>.
 */
+ (void)load__WithNSString:(NSString *)pathName;

/*!
 @brief See <code>Runtime.loadLibrary</code>.
 */
+ (void)loadLibraryWithNSString:(NSString *)libName;

/*!
  internal use only
 */
+ (void)logEWithNSString:(NSString *)message;

/*!
  internal use only
 */
+ (void)logEWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th;

/*!
  internal use only
 */
+ (void)logIWithNSString:(NSString *)message;

/*!
  internal use only
 */
+ (void)logIWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th;

/*!
  internal use only
 */
+ (void)logWWithNSString:(NSString *)message;

/*!
  internal use only
 */
+ (void)logWWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th;

+ (jlong)nanoTime;

/*!
 @brief No-op on iOS, since it doesn't use garbage collection.
 */
+ (void)runFinalization;

/*!
 @brief No-op on iOS, since it doesn't use garbage collection.
 */
+ (void)runFinalizersOnExitWithBoolean:(jboolean)b;

+ (void)setErrWithJavaIoPrintStream:(JavaIoPrintStream *)newErr;

+ (void)setInWithJavaIoInputStream:(JavaIoInputStream *)newIn;

+ (void)setOutWithJavaIoPrintStream:(JavaIoPrintStream *)newOut;

+ (void)setPropertiesWithJavaUtilProperties:(JavaUtilProperties *)properties;

+ (NSString *)setPropertyWithNSString:(NSString *)key
                         withNSString:(NSString *)value;

#pragma mark Package-Private


@end

J2OBJC_STATIC_INIT(JavaLangSystem)

FOUNDATION_EXPORT JavaIoInputStream *JavaLangSystem_in_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangSystem, in_, JavaIoInputStream *)

FOUNDATION_EXPORT JavaIoPrintStream *JavaLangSystem_out_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangSystem, out_, JavaIoPrintStream *)

FOUNDATION_EXPORT JavaIoPrintStream *JavaLangSystem_err_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangSystem, err_, JavaIoPrintStream *)

FOUNDATION_EXPORT void JavaLangSystem_setInWithJavaIoInputStream_(JavaIoInputStream *newIn);

FOUNDATION_EXPORT void JavaLangSystem_setOutWithJavaIoPrintStream_(JavaIoPrintStream *newOut);

FOUNDATION_EXPORT void JavaLangSystem_setErrWithJavaIoPrintStream_(JavaIoPrintStream *newErr);

FOUNDATION_EXPORT jlong JavaLangSystem_currentTimeMillis();

FOUNDATION_EXPORT jint JavaLangSystem_identityHashCodeWithId_(id anObject);

FOUNDATION_EXPORT void JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(id src, jint srcPos, id dest, jint destPos, jint length);

FOUNDATION_EXPORT jlong JavaLangSystem_nanoTime();

FOUNDATION_EXPORT void JavaLangSystem_exitWithInt_(jint status);

FOUNDATION_EXPORT JavaUtilProperties *JavaLangSystem_getProperties();

FOUNDATION_EXPORT NSString *JavaLangSystem_getPropertyWithNSString_(NSString *key);

FOUNDATION_EXPORT NSString *JavaLangSystem_getPropertyWithNSString_withNSString_(NSString *key, NSString *defaultValue);

FOUNDATION_EXPORT NSString *JavaLangSystem_setPropertyWithNSString_withNSString_(NSString *key, NSString *value);

FOUNDATION_EXPORT void JavaLangSystem_setPropertiesWithJavaUtilProperties_(JavaUtilProperties *properties);

FOUNDATION_EXPORT NSString *JavaLangSystem_clearPropertyWithNSString_(NSString *key);

FOUNDATION_EXPORT NSString *JavaLangSystem_getenvWithNSString_(NSString *name);

FOUNDATION_EXPORT id<JavaUtilMap> JavaLangSystem_getenv();

FOUNDATION_EXPORT JavaLangSecurityManager *JavaLangSystem_getSecurityManager();

FOUNDATION_EXPORT NSString *JavaLangSystem_lineSeparator();

FOUNDATION_EXPORT void JavaLangSystem_load__WithNSString_(NSString *pathName);

FOUNDATION_EXPORT void JavaLangSystem_loadLibraryWithNSString_(NSString *libName);

FOUNDATION_EXPORT void JavaLangSystem_runFinalization();

FOUNDATION_EXPORT void JavaLangSystem_runFinalizersOnExitWithBoolean_(jboolean b);

FOUNDATION_EXPORT void JavaLangSystem_logEWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangSystem_logEWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *th);

FOUNDATION_EXPORT void JavaLangSystem_logIWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangSystem_logIWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *th);

FOUNDATION_EXPORT void JavaLangSystem_logWWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangSystem_logWWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *th);

FOUNDATION_EXPORT void JavaLangSystem_init(JavaLangSystem *self);

FOUNDATION_EXPORT JavaLangSystem *new_JavaLangSystem_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangSystem)

#endif // _JavaLangSystem_H_
