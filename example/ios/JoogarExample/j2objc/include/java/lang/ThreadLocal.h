//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/ThreadLocal.java
//

#ifndef _JavaLangThreadLocal_H_
#define _JavaLangThreadLocal_H_

#include "J2ObjC_header.h"

@class JavaLangThread;
@class JavaLangThreadLocal_Values;

/*!
 @brief Implements a thread-local storage, that is, a variable for which each thread
 has its own value.
 All threads share the same <code>ThreadLocal</code> object,
 but each sees a different value when accessing it, and changes made by one
 thread do not affect the other threads. The implementation supports
 <code>null</code> values.
 @author Bob Lee
 */
@interface JavaLangThreadLocal : NSObject

#pragma mark Public

/*!
 @brief Creates a new thread-local variable.
 */
- (instancetype)init;

/*!
 @brief Returns the value of this variable for the current thread.
 If an entry
 doesn't yet exist for this variable on this thread, this method will
 create an entry, populating the value with the result of
 <code>initialValue()</code>.
 @return the current value of the variable for the calling thread.
 */
- (id)get;

/*!
 @brief Removes the entry for this variable in the current thread.
 If this call
 is followed by a <code>get()</code> before a <code>set</code>,
 <code>#get()</code> will call <code>initialValue()</code> and create a new
 entry with the resulting value.
 @since 1.5
 */
- (void)remove;

/*!
 @brief Sets the value of this variable for the current thread.
 If set to
 <code>null</code>, the value will be set to null and the underlying entry will
 still be present.
 @param value the new value of the variable for the caller thread.
 */
- (void)setWithId:(id)value;

#pragma mark Protected

/*!
 @brief Provides the initial value of this variable for the current thread.
 The default implementation returns <code>null</code>.
 @return the initial value of the variable.
 */
- (id)initialValue OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

/*!
 @brief Creates Values instance for this thread and variable type.
 */
- (JavaLangThreadLocal_Values *)initializeValuesWithJavaLangThread:(JavaLangThread *)current OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Gets Values instance for this thread and variable type.
 */
- (JavaLangThreadLocal_Values *)valuesWithJavaLangThread:(JavaLangThread *)current;

@end

J2OBJC_STATIC_INIT(JavaLangThreadLocal)

FOUNDATION_EXPORT void JavaLangThreadLocal_init(JavaLangThreadLocal *self);

FOUNDATION_EXPORT JavaLangThreadLocal *new_JavaLangThreadLocal_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangThreadLocal)

/*!
 @brief Per-thread map of ThreadLocal instances to values.
 */
@interface JavaLangThreadLocal_Values : NSObject

#pragma mark Package-Private

/*!
 @brief Constructs a new, empty instance.
 */
- (instancetype)init;

/*!
 @brief Used for InheritableThreadLocals.
 */
- (instancetype)initWithJavaLangThreadLocal_Values:(JavaLangThreadLocal_Values *)fromParent;

/*!
 @brief Adds an entry during rehashing.
 Compared to put(), this method
 doesn't have to clean up, check for existing entries, account for
 tombstones, etc.
 */
- (void)addWithJavaLangThreadLocal:(JavaLangThreadLocal *)key
                            withId:(id)value;

/*!
 @brief Gets value for given ThreadLocal after not finding it in the first
 slot.
 */
- (id)getAfterMissWithJavaLangThreadLocal:(JavaLangThreadLocal *)key;

/*!
 @brief Sets entry for given ThreadLocal to given value, creating an
 entry if necessary.
 */
- (void)putWithJavaLangThreadLocal:(JavaLangThreadLocal *)key
                            withId:(id)value;

/*!
 @brief Removes entry for the given ThreadLocal.
 */
- (void)removeWithJavaLangThreadLocal:(JavaLangThreadLocal *)key;

@end

J2OBJC_STATIC_INIT(JavaLangThreadLocal_Values)

FOUNDATION_EXPORT void JavaLangThreadLocal_Values_init(JavaLangThreadLocal_Values *self);

FOUNDATION_EXPORT JavaLangThreadLocal_Values *new_JavaLangThreadLocal_Values_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThreadLocal_Values_initWithJavaLangThreadLocal_Values_(JavaLangThreadLocal_Values *self, JavaLangThreadLocal_Values *fromParent);

FOUNDATION_EXPORT JavaLangThreadLocal_Values *new_JavaLangThreadLocal_Values_initWithJavaLangThreadLocal_Values_(JavaLangThreadLocal_Values *fromParent) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangThreadLocal_Values)

#endif // _JavaLangThreadLocal_H_
