//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Float.java
//

#ifndef _JavaLangFloat_H_
#define _JavaLangFloat_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class IOSClass;

#define JavaLangFloat_EXPONENT_BIAS 127
#define JavaLangFloat_EXPONENT_BITS 9
#define JavaLangFloat_MANTISSA_BITS 23
#define JavaLangFloat_NON_MANTISSA_BITS 9
#define JavaLangFloat_SIGN_MASK ((jint) 0x80000000)
#define JavaLangFloat_EXPONENT_MASK 2139095040
#define JavaLangFloat_MANTISSA_MASK 8388607
#define JavaLangFloat_MAX_VALUE __FLT_MAX__
#define JavaLangFloat_MIN_VALUE 1.4E-45f
#define JavaLangFloat_NaN NAN
#define JavaLangFloat_POSITIVE_INFINITY INFINITY
#define JavaLangFloat_NEGATIVE_INFINITY -INFINITY
#define JavaLangFloat_MIN_NORMAL __FLT_MIN__
#define JavaLangFloat_MAX_EXPONENT 127
#define JavaLangFloat_MIN_EXPONENT -126
#define JavaLangFloat_SIZE 32

/*!
 @brief The wrapper for the primitive type <code>float</code>.
 @since 1.0
 */
@interface JavaLangFloat : NSNumber < JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Float</code> with the specified primitive double value.
 @param value
 the primitive double value to store in the new instance.
 */
- (instancetype)initWithDouble:(jdouble)value;

/*!
 @brief Constructs a new <code>Float</code> with the specified primitive float value.
 @param value
 the primitive float value to store in the new instance.
 */
- (instancetype)initWithFloat:(jfloat)value;

/*!
 @brief Constructs a new <code>Float</code> from the specified string.
 @param string
 the string representation of a float value.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a float value.
 */
- (instancetype)initWithNSString:(NSString *)string;

- (jbyte)charValue;

/*!
 @brief Compares the two specified float values.
 There are two special cases:
 <ul>
 <li><code>Float.NaN</code> is equal to <code>Float.NaN</code> and it is greater
 than any other float value, including <code>Float.POSITIVE_INFINITY</code>;</li>
 <li>+0.0f is greater than -0.0f</li>
 </ul>
 @param float1
 the first value to compare.
 @param float2
 the second value to compare.
 @return a negative value if <code>float1</code> is less than <code>float2</code>;
 0 if <code>float1</code> and <code>float2</code> are equal; a positive
 value if <code>float1</code> is greater than <code>float2</code>.
 @since 1.4
 */
+ (jint)compareWithFloat:(jfloat)float1
               withFloat:(jfloat)float2;

/*!
 @brief Compares this object to the specified float object to determine their
 relative order.
 There are two special cases:
 <ul>
 <li><code>Float.NaN</code> is equal to <code>Float.NaN</code> and it is greater
 than any other float value, including <code>Float.POSITIVE_INFINITY</code>;</li>
 <li>+0.0f is greater than -0.0f</li>
 </ul>
 @param object
 the float object to compare this object to.
 @return a negative value if the value of this float is less than the
 value of <code>object</code>; 0 if the value of this float and the
 value of <code>object</code> are equal; a positive value if the value
 of this float is greater than the value of <code>object</code>.
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangFloat *)object;

- (jdouble)doubleValue;

/*!
 @brief Tests this double for equality with <code>object</code>.
 To be equal, <code>object</code> must be an instance of <code>Float</code> and
 <code>floatToIntBits</code> must give the same value for both objects.
 <p>Note that, unlike <code>==</code>, <code>-0.0</code> and <code>+0.0</code> compare
 unequal, and <code>NaN</code>s compare equal by this method.
 @param object
 the object to compare this float with.
 @return <code>true</code> if the specified object is equal to this
 <code>Float</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns an integer corresponding to the bits of the given
 <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754</a> single precision
 float <code>value</code>.
 All <em>Not-a-Number (NaN)</em> values are converted to a single NaN
 representation (<code>0x7fc00000</code>) (compare to <code>floatToRawIntBits</code>).
 */
+ (jint)floatToIntBitsWithFloat:(jfloat)value;

/*!
 @brief Returns an integer corresponding to the bits of the given
 <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754</a> single precision
 float <code>value</code>.
 <em>Not-a-Number (NaN)</em> values are preserved (compare
 to <code>floatToIntBits</code>).
 */
+ (jint)floatToRawIntBitsWithFloat:(jfloat)value;

/*!
 @brief Gets the primitive value of this float.
 @return this object's primitive value.
 */
- (jfloat)floatValue;

- (NSUInteger)hash;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754</a>
 single precision float corresponding to the given <code>bits</code>.
 */
+ (jfloat)intBitsToFloatWithInt:(jint)bits;

- (jint)intValue;

/*!
 @brief Indicates whether this object represents an infinite value.
 @return <code>true</code> if the value of this float is positive or negative
 infinity; <code>false</code> otherwise.
 */
- (jboolean)isInfinite;

/*!
 @brief Indicates whether the specified float represents an infinite value.
 @param f
 the float to check.
 @return <code>true</code> if the value of <code>f</code> is positive or negative
 infinity; <code>false</code> otherwise.
 */
+ (jboolean)isInfiniteWithFloat:(jfloat)f;

/*!
 @brief Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
 @return <code>true</code> if this float is <em>Not-a-Number</em>;
 <code>false</code> if it is a (potentially infinite) float number.
 */
- (jboolean)isNaN;

/*!
 @brief Indicates whether the specified float is a <em>Not-a-Number (NaN)</em>
 value.
 @param f
 the float value to check.
 @return <code>true</code> if <code>f</code> is <em>Not-a-Number</em>;
 <code>false</code> if it is a (potentially infinite) float number.
 */
+ (jboolean)isNaNWithFloat:(jfloat)f;

- (jlong)longLongValue;

/*!
 @brief Parses the specified string as a float value.
 @param string
 the string representation of a float value.
 @return the primitive float value represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a float value.
 @since 1.2
 */
+ (jfloat)parseFloatWithNSString:(NSString *)string;

- (jshort)shortValue;

/*!
 @brief Converts the specified float into its hexadecimal string representation.
 @param f
 the float to convert.
 @return the hexadecimal string representation of <code>f</code>.
 @since 1.5
 */
+ (NSString *)toHexStringWithFloat:(jfloat)f;

- (NSString *)description;

/*!
 @brief Returns a string containing a concise, human-readable description of the
 specified float value.
 @param f
 the float to convert to a string.
 @return a printable representation of <code>f</code>.
 */
+ (NSString *)toStringWithFloat:(jfloat)f;

/*!
 @brief Returns a <code>Float</code> instance for the specified float value.
 @param f
 the float value to store in the instance.
 @return a <code>Float</code> instance containing <code>f</code>.
 @since 1.5
 */
+ (JavaLangFloat *)valueOfWithFloat:(jfloat)f;

/*!
 @brief Parses the specified string as a float value.
 @param string
 the string representation of a float value.
 @return a <code>Float</code> instance containing the float value represented
 by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a float value.
 */
+ (JavaLangFloat *)valueOfWithNSString:(NSString *)string;

#pragma mark Package-Private


@end

J2OBJC_STATIC_INIT(JavaLangFloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, EXPONENT_BIAS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, EXPONENT_BITS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MANTISSA_BITS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, NON_MANTISSA_BITS, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, SIGN_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, EXPONENT_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MANTISSA_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MAX_VALUE, jfloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MIN_VALUE, jfloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, NaN, jfloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, POSITIVE_INFINITY, jfloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, NEGATIVE_INFINITY, jfloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MIN_NORMAL, jfloat)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MAX_EXPONENT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, MIN_EXPONENT, jint)

FOUNDATION_EXPORT IOSClass *JavaLangFloat_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, TYPE_, IOSClass *)

J2OBJC_STATIC_FIELD_GETTER(JavaLangFloat, SIZE, jint)

FOUNDATION_EXPORT void JavaLangFloat_initWithFloat_(JavaLangFloat *self, jfloat value);

FOUNDATION_EXPORT JavaLangFloat *new_JavaLangFloat_initWithFloat_(jfloat value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangFloat_initWithDouble_(JavaLangFloat *self, jdouble value);

FOUNDATION_EXPORT JavaLangFloat *new_JavaLangFloat_initWithDouble_(jdouble value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangFloat_initWithNSString_(JavaLangFloat *self, NSString *string);

FOUNDATION_EXPORT JavaLangFloat *new_JavaLangFloat_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint JavaLangFloat_floatToIntBitsWithFloat_(jfloat value);

FOUNDATION_EXPORT jint JavaLangFloat_floatToRawIntBitsWithFloat_(jfloat value);

FOUNDATION_EXPORT jfloat JavaLangFloat_intBitsToFloatWithInt_(jint bits);

FOUNDATION_EXPORT jboolean JavaLangFloat_isInfiniteWithFloat_(jfloat f);

FOUNDATION_EXPORT jboolean JavaLangFloat_isNaNWithFloat_(jfloat f);

FOUNDATION_EXPORT jfloat JavaLangFloat_parseFloatWithNSString_(NSString *string);

FOUNDATION_EXPORT NSString *JavaLangFloat_toStringWithFloat_(jfloat f);

FOUNDATION_EXPORT JavaLangFloat *JavaLangFloat_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT jint JavaLangFloat_compareWithFloat_withFloat_(jfloat float1, jfloat float2);

FOUNDATION_EXPORT JavaLangFloat *JavaLangFloat_valueOfWithFloat_(jfloat f);

FOUNDATION_EXPORT NSString *JavaLangFloat_toHexStringWithFloat_(jfloat f);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangFloat)

BOXED_INC_AND_DEC(Float, floatValue, JavaLangFloat)
BOXED_COMPOUND_ASSIGN_ARITHMETIC(Float, floatValue, jfloat, JavaLangFloat)
BOXED_COMPOUND_ASSIGN_FPMOD(Float, floatValue, jfloat, JavaLangFloat)

#endif // _JavaLangFloat_H_
