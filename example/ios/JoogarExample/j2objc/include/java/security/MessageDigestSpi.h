//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/MessageDigestSpi.java
//

#ifndef _JavaSecurityMessageDigestSpi_H_
#define _JavaSecurityMessageDigestSpi_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaNioByteBuffer;

/*!
 @brief <code>MessageDigestSpi</code> is the Service Provider Interface (SPI) definition
 for <code>MessageDigest</code>.
 Examples of digest algorithms are MD5 and SHA. A
 digest is a secure one way hash function for a stream of bytes. It acts like
 a fingerprint for a stream of bytes.
 */
@interface JavaSecurityMessageDigestSpi : NSObject

#pragma mark Public

- (instancetype)init;

- (id)clone;

#pragma mark Protected

/*!
 @brief Computes and returns the final hash value for this
 <code>MessageDigestSpi</code>.
 After the digest is computed the receiver is
 reset.
 @return the computed one way hash value.
 */
- (IOSByteArray *)engineDigest;

/*!
 @brief Computes and stores the final hash value for this
 <code>MessageDigestSpi</code>.
 After the digest is computed the receiver is
 reset.
 @param buf
 the buffer to store the result in.
 @param offset
 the index of the first byte in <code>buf</code> to store in.
 @param len
 the number of bytes allocated for the digest.
 @return the number of bytes written to <code>buf</code>.
 @throws DigestException
 if an error occures.
 @throws IllegalArgumentException
 if <code>offset</code> or <code>len</code> are not valid in respect to
 <code>buf</code>.
 */
- (jint)engineDigestWithByteArray:(IOSByteArray *)buf
                          withInt:(jint)offset
                          withInt:(jint)len;

/*!
 @brief Returns the engine digest length in bytes.
 If the implementation does not
 implement this function <code>0</code> is returned.
 @return the digest length in bytes, or <code>0</code>.
 */
- (jint)engineGetDigestLength;

/*!
 @brief Puts this <code>MessageDigestSpi</code> back in an initial state, such that it
 is ready to compute a one way hash value.
 */
- (void)engineReset;

/*!
 @brief Updates this <code>MessageDigestSpi</code> using the given <code>byte</code>.
 @param input
 the <code>byte</code> to update this <code>MessageDigestSpi</code> with.
 */
- (void)engineUpdateWithByte:(jbyte)input;

/*!
 @brief Updates this <code>MessageDigestSpi</code> using the given <code>byte[]</code>.
 @param input
 the <code>byte</code> array.
 @param offset
 the index of the first byte in <code>input</code> to update from.
 @param len
 the number of bytes in <code>input</code> to update from.
 @throws IllegalArgumentException
 if <code>offset</code> or <code>len</code> are not valid in respect to
 <code>input</code>.
 */
- (void)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)offset
                          withInt:(jint)len;

/*!
 @brief Updates this <code>MessageDigestSpi</code> using the given <code>input</code>.
 @param input
 the <code>ByteBuffer</code>.
 */
- (void)engineUpdateWithJavaNioByteBuffer:(JavaNioByteBuffer *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityMessageDigestSpi)

FOUNDATION_EXPORT void JavaSecurityMessageDigestSpi_init(JavaSecurityMessageDigestSpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityMessageDigestSpi)

#endif // _JavaSecurityMessageDigestSpi_H_
