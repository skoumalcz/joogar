//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/charset/ModifiedUtf8.java
//

#ifndef _JavaNioCharsetModifiedUtf8_H_
#define _JavaNioCharsetModifiedUtf8_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSCharArray;

/*!
  internal use only
 */
@interface JavaNioCharsetModifiedUtf8 : NSObject

#pragma mark Public

/*!
 @brief Returns the number of bytes the modified UTF-8 representation of 's' would take.
 Note
 that this is just the space for the bytes representing the characters, not the length
 which precedes those bytes, because different callers represent the length differently,
 as two, four, or even eight bytes. If <code>shortLength</code> is true, we'll throw an
 exception if the string is too long for its length to be represented by a short.
 */
+ (jlong)countBytesWithNSString:(NSString *)s
                    withBoolean:(jboolean)shortLength;

/*!
 @brief Decodes a byte array containing <i>modified UTF-8</i> bytes into a string.
 <p>Note that although this method decodes the (supposedly impossible) zero byte to U+0000,
 that's what the RI does too.
 */
+ (NSString *)decodeWithByteArray:(IOSByteArray *)inArg
                    withCharArray:(IOSCharArray *)outArg
                          withInt:(jint)offset
                          withInt:(jint)utfSize;

/*!
 @brief Encodes the <i>modified UTF-8</i> bytes corresponding to string <code>s</code> into the
 byte array <code>dst</code>, starting at the given <code>offset</code>.
 */
+ (void)encodeWithByteArray:(IOSByteArray *)dst
                    withInt:(jint)offset
               withNSString:(NSString *)s;

/*!
 @brief Returns an array containing the <i>modified UTF-8</i> form of <code>s</code>, using a
 big-endian 16-bit length.
 Throws UTFDataFormatException if <code>s</code> is too long
 for a two-byte length.
 */
+ (IOSByteArray *)encodeWithNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioCharsetModifiedUtf8)

FOUNDATION_EXPORT NSString *JavaNioCharsetModifiedUtf8_decodeWithByteArray_withCharArray_withInt_withInt_(IOSByteArray *inArg, IOSCharArray *outArg, jint offset, jint utfSize);

FOUNDATION_EXPORT jlong JavaNioCharsetModifiedUtf8_countBytesWithNSString_withBoolean_(NSString *s, jboolean shortLength);

FOUNDATION_EXPORT void JavaNioCharsetModifiedUtf8_encodeWithByteArray_withInt_withNSString_(IOSByteArray *dst, jint offset, NSString *s);

FOUNDATION_EXPORT IOSByteArray *JavaNioCharsetModifiedUtf8_encodeWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioCharsetModifiedUtf8)

#endif // _JavaNioCharsetModifiedUtf8_H_
