//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/SocketChannelImpl.java
//

#ifndef _JavaNioSocketChannelImpl_H_
#define _JavaNioSocketChannelImpl_H_

#include "J2ObjC_header.h"
#include "java/nio/FileDescriptorChannel.h"
#include "java/nio/channels/SocketChannel.h"

@class IOSObjectArray;
@class JavaIoFileDescriptor;
@class JavaNetInetSocketAddress;
@class JavaNetSocket;
@class JavaNetSocketAddress;
@class JavaNioByteBuffer;
@class JavaNioChannelsSpiSelectorProvider;
@protocol JavaNetSocketOption;
@protocol JavaUtilSet;

@interface JavaNioSocketChannelImpl : JavaNioChannelsSocketChannel < JavaNioFileDescriptorChannel >

#pragma mark Public

- (instancetype)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)selectorProvider;

- (instancetype)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)selectorProvider
                                               withBoolean:(jboolean)connect;

- (instancetype)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)selectorProvider
                                  withJavaIoFileDescriptor:(JavaIoFileDescriptor *)existingFd;

/*!
  Until ready for a public API change 
 */
- (JavaNioChannelsSocketChannel *)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)local;

- (jboolean)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)socketAddress;

- (jboolean)finishConnect;

- (JavaIoFileDescriptor *)getFD;

/*!
  Until ready for a public API change 
 */
- (JavaNetSocketAddress *)getLocalAddress;

/*!
  Until ready for a public API change 
 */
- (id)getOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)option;

- (jboolean)isConnected;

- (jboolean)isConnectionPending;

- (void)onAcceptWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)remoteAddress
                                 withBoolean:(jboolean)updateSocketState;

- (jint)readWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst;

- (jlong)readWithJavaNioByteBufferArray:(IOSObjectArray *)targets
                                withInt:(jint)offset
                                withInt:(jint)length;

/*!
  Until ready for a public API change 
 */
- (JavaNioChannelsSocketChannel *)setOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)option
                                                            withId:(id)value;

- (JavaNetSocket *)socket;

/*!
  Until ready for a public API change 
 */
- (id<JavaUtilSet>)supportedOptions;

- (jint)writeWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)sources
                                 withInt:(jint)offset
                                 withInt:(jint)length;

#pragma mark Protected

- (void)implCloseSelectableChannel;

- (void)implConfigureBlockingWithBoolean:(jboolean)blocking;

#pragma mark Package-Private

/*!
 @brief Initialise the isBound, localAddress and localPort state from the file descriptor.
 Used when
 some or all of the bound state has been left to the OS to decide, or when the Socket handled
 bind() or connect().
 @param updateSocketState
 if the associated socket (if present) needs to be updated
  package visible for other nio classes
 */
- (void)onBindWithBoolean:(jboolean)updateSocketState;

/*!
 @brief Initialise the connect() state with the supplied information.
 @param updateSocketState
 if the associated socket (if present) needs to be updated
  package visible for other nio classes
 */
- (void)onConnectStatusChangedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                                                   withInt:(jint)status
                                               withBoolean:(jboolean)updateSocketState;

+ (JavaNetInetSocketAddress *)validateAddressWithJavaNetSocketAddress:(JavaNetSocketAddress *)socketAddress;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioSocketChannelImpl)

FOUNDATION_EXPORT void JavaNioSocketChannelImpl_initWithJavaNioChannelsSpiSelectorProvider_(JavaNioSocketChannelImpl *self, JavaNioChannelsSpiSelectorProvider *selectorProvider);

FOUNDATION_EXPORT JavaNioSocketChannelImpl *new_JavaNioSocketChannelImpl_initWithJavaNioChannelsSpiSelectorProvider_(JavaNioChannelsSpiSelectorProvider *selectorProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaNioSocketChannelImpl_initWithJavaNioChannelsSpiSelectorProvider_withBoolean_(JavaNioSocketChannelImpl *self, JavaNioChannelsSpiSelectorProvider *selectorProvider, jboolean connect);

FOUNDATION_EXPORT JavaNioSocketChannelImpl *new_JavaNioSocketChannelImpl_initWithJavaNioChannelsSpiSelectorProvider_withBoolean_(JavaNioChannelsSpiSelectorProvider *selectorProvider, jboolean connect) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaNioSocketChannelImpl_initWithJavaNioChannelsSpiSelectorProvider_withJavaIoFileDescriptor_(JavaNioSocketChannelImpl *self, JavaNioChannelsSpiSelectorProvider *selectorProvider, JavaIoFileDescriptor *existingFd);

FOUNDATION_EXPORT JavaNioSocketChannelImpl *new_JavaNioSocketChannelImpl_initWithJavaNioChannelsSpiSelectorProvider_withJavaIoFileDescriptor_(JavaNioChannelsSpiSelectorProvider *selectorProvider, JavaIoFileDescriptor *existingFd) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInetSocketAddress *JavaNioSocketChannelImpl_validateAddressWithJavaNetSocketAddress_(JavaNetSocketAddress *socketAddress);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioSocketChannelImpl)

#endif // _JavaNioSocketChannelImpl_H_
