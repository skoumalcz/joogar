//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Logical.java
//

#ifndef _JavaMathLogical_H_
#define _JavaMathLogical_H_

#include "J2ObjC_header.h"

@class JavaMathBigInteger;

/*!
 @brief The library implements some logical operations over <code>BigInteger</code>.
 The
 operations provided are listed below.
 <ul type="circle">
 <li>not</li>
 <li>and</li>
 <li>andNot</li>
 <li>or</li>
 <li>xor</li>
 </ul>
 */
@interface JavaMathLogical : NSObject

#pragma mark Package-Private

/*!
 */
+ (JavaMathBigInteger *)and__WithJavaMathBigInteger:(JavaMathBigInteger *)val
                             withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = positive.magnitude & magnitude = -negative.magnitude
 */
+ (JavaMathBigInteger *)andDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                    withJavaMathBigInteger:(JavaMathBigInteger *)negative;

/*!
 @return sign = -1, magnitude = -(-longer.magnitude & -shorter.magnitude)
 */
+ (JavaMathBigInteger *)andNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                   withJavaMathBigInteger:(JavaMathBigInteger *)shorter;

/*!
 */
+ (JavaMathBigInteger *)andNotWithJavaMathBigInteger:(JavaMathBigInteger *)val
                              withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = 1, magnitude = -val.magnitude & ~(-that.magnitude)
 */
+ (JavaMathBigInteger *)andNotNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                      withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = -1, magnitude = -(-negative.magnitude & ~positive.magnitude)
 */
+ (JavaMathBigInteger *)andNotNegativePositiveWithJavaMathBigInteger:(JavaMathBigInteger *)negative
                                              withJavaMathBigInteger:(JavaMathBigInteger *)positive;

/*!
 @return sign = 1, magnitude = val.magnitude & ~that.magnitude
 */
+ (JavaMathBigInteger *)andNotPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                      withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = 1, magnitude = positive.magnitude & ~(-negative.magnitude)
 */
+ (JavaMathBigInteger *)andNotPositiveNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                              withJavaMathBigInteger:(JavaMathBigInteger *)negative;

/*!
 @return sign = 1, magnitude = val.magnitude & that.magnitude
 */
+ (JavaMathBigInteger *)andPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                   withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 */
+ (JavaMathBigInteger *)not__WithJavaMathBigInteger:(JavaMathBigInteger *)val;

/*!
 */
+ (JavaMathBigInteger *)or__WithJavaMathBigInteger:(JavaMathBigInteger *)val
                            withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = -1, magnitude = -(positive.magnitude | -negative.magnitude)
 */
+ (JavaMathBigInteger *)orDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                   withJavaMathBigInteger:(JavaMathBigInteger *)negative;

/*!
 @return sign = -1, magnitude = -(-val.magnitude | -that.magnitude)
 */
+ (JavaMathBigInteger *)orNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                  withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = 1, magnitude = longer.magnitude | shorter.magnitude
 */
+ (JavaMathBigInteger *)orPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                  withJavaMathBigInteger:(JavaMathBigInteger *)shorter;

/*!
 */
+ (JavaMathBigInteger *)xor__WithJavaMathBigInteger:(JavaMathBigInteger *)val
                             withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = 1, magnitude = -(positive.magnitude ^ -negative.magnitude)
 */
+ (JavaMathBigInteger *)xorDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                    withJavaMathBigInteger:(JavaMathBigInteger *)negative;

/*!
 @return sign = 0, magnitude = -val.magnitude ^ -that.magnitude
 */
+ (JavaMathBigInteger *)xorNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                   withJavaMathBigInteger:(JavaMathBigInteger *)that;

/*!
 @return sign = 0, magnitude = longer.magnitude | shorter.magnitude
 */
+ (JavaMathBigInteger *)xorPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                   withJavaMathBigInteger:(JavaMathBigInteger *)shorter;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaMathLogical)

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_not__WithJavaMathBigInteger_(JavaMathBigInteger *val);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_and__WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andDiffSignsWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *longer, JavaMathBigInteger *shorter);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotPositiveNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotNegativePositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *negative, JavaMathBigInteger *positive);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_or__WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_orPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *longer, JavaMathBigInteger *shorter);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_orNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_orDiffSignsWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xor__WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xorPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *longer, JavaMathBigInteger *shorter);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xorNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xorDiffSignsWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);

J2OBJC_TYPE_LITERAL_HEADER(JavaMathLogical)

#endif // _JavaMathLogical_H_
