//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/BitLevel.java
//

#ifndef _JavaMathBitLevel_H_
#define _JavaMathBitLevel_H_

#include "J2ObjC_header.h"

@class IOSIntArray;
@class JavaMathBigInteger;

/*!
 @brief Static library that provides all the <b>bit level</b> operations for
 <code>BigInteger</code>.
 The operations are:
 <ul type="circle">
 <li>Left Shifting</li>
 <li>Right Shifting</li>
 <li>Bit clearing</li>
 <li>Bit setting</li>
 <li>Bit counting</li>
 <li>Bit testing</li>
 <li>Getting of the lowest bit set</li>
 </ul>
 All operations are provided in immutable way, and some in both mutable and
 immutable.
 */
@interface JavaMathBitLevel : NSObject

#pragma mark Package-Private

/*!
 */
+ (jint)bitCountWithJavaMathBigInteger:(JavaMathBigInteger *)val;

/*!
 */
+ (jint)bitLengthWithJavaMathBigInteger:(JavaMathBigInteger *)val;

/*!
 @brief Performs a flipBit on the BigInteger, returning a BigInteger with the the
 specified bit flipped.
 @param intCount: the index of the element of the digits array where the operation will be performed
 @param bitNumber: the bit's position in the intCount element
 */
+ (JavaMathBigInteger *)flipBitWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                              withInt:(jint)n;

/*!
 @brief Performs <code>val <<= count</code>.
 */
+ (void)inplaceShiftLeftWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                       withInt:(jint)count;

/*!
 @brief Performs <code>val >>= count</code> where <code>val</code> is a positive number.
 */
+ (void)inplaceShiftRightWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                        withInt:(jint)count;

/*!
 @brief Check if there are 1s in the lowest bits of this BigInteger
 @param numberOfBits the number of the lowest bits to check
 @return false if all bits are 0s, true otherwise
 */
+ (jboolean)nonZeroDroppedBitsWithInt:(jint)numberOfBits
                         withIntArray:(IOSIntArray *)digits;

/*!
 */
+ (JavaMathBigInteger *)shiftLeftWithJavaMathBigInteger:(JavaMathBigInteger *)source
                                                withInt:(jint)count;

/*!
 @brief Abstractly shifts left an array of integers in little endian (i.e. shift
 it right).
 Total shift distance in bits is intCount * 32 + count
 @param result the destination array
 @param source the source array
 @param intCount the shift distance in integers
 @param count an additional shift distance in bits
 */
+ (void)shiftLeftWithIntArray:(IOSIntArray *)result
                 withIntArray:(IOSIntArray *)source
                      withInt:(jint)intCount
                      withInt:(jint)count;

+ (JavaMathBigInteger *)shiftLeftOneBitWithJavaMathBigInteger:(JavaMathBigInteger *)source;

/*!
 @brief Shifts the source digits left one bit, creating a value whose magnitude
 is doubled.
 @param result an array of digits that will hold the computed result when
 this method returns. The size of this array is <code>srcLen + 1</code>,
 and the format is the same as <code>BigInteger.digits</code>.
 @param source the array of digits to shift left, in the same format as
 <code>BigInteger.digits</code>.
 @param srcLen the length of <code>source</code>; may be less than <code>source.length</code>
 */
+ (void)shiftLeftOneBitWithIntArray:(IOSIntArray *)result
                       withIntArray:(IOSIntArray *)source
                            withInt:(jint)srcLen;

/*!
 */
+ (JavaMathBigInteger *)shiftRightWithJavaMathBigInteger:(JavaMathBigInteger *)source
                                                 withInt:(jint)count;

/*!
 @brief Shifts right an array of integers.
 Total shift distance in bits is
 intCount * 32 + count.
 @param result
 the destination array
 @param resultLen
 the destination array's length
 @param source
 the source array
 @param intCount
 the number of elements to be shifted
 @param count
 the number of bits to be shifted
 @return dropped bit's are all zero (i.e. remaider is zero)
 */
+ (jboolean)shiftRightWithIntArray:(IOSIntArray *)result
                           withInt:(jint)resultLen
                      withIntArray:(IOSIntArray *)source
                           withInt:(jint)intCount
                           withInt:(jint)count;

/*!
 @brief Performs a fast bit testing for positive numbers.
 The bit to to be tested
 must be in the range <code>[0, val.bitLength()-1]</code>
 */
+ (jboolean)testBitWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                  withInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaMathBitLevel)

FOUNDATION_EXPORT jint JavaMathBitLevel_bitLengthWithJavaMathBigInteger_(JavaMathBigInteger *val);

FOUNDATION_EXPORT jint JavaMathBitLevel_bitCountWithJavaMathBigInteger_(JavaMathBigInteger *val);

FOUNDATION_EXPORT jboolean JavaMathBitLevel_testBitWithJavaMathBigInteger_withInt_(JavaMathBigInteger *val, jint n);

FOUNDATION_EXPORT jboolean JavaMathBitLevel_nonZeroDroppedBitsWithInt_withIntArray_(jint numberOfBits, IOSIntArray *digits);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathBitLevel_shiftLeftWithJavaMathBigInteger_withInt_(JavaMathBigInteger *source, jint count);

FOUNDATION_EXPORT void JavaMathBitLevel_inplaceShiftLeftWithJavaMathBigInteger_withInt_(JavaMathBigInteger *val, jint count);

FOUNDATION_EXPORT void JavaMathBitLevel_shiftLeftWithIntArray_withIntArray_withInt_withInt_(IOSIntArray *result, IOSIntArray *source, jint intCount, jint count);

FOUNDATION_EXPORT void JavaMathBitLevel_shiftLeftOneBitWithIntArray_withIntArray_withInt_(IOSIntArray *result, IOSIntArray *source, jint srcLen);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathBitLevel_shiftLeftOneBitWithJavaMathBigInteger_(JavaMathBigInteger *source);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathBitLevel_shiftRightWithJavaMathBigInteger_withInt_(JavaMathBigInteger *source, jint count);

FOUNDATION_EXPORT void JavaMathBitLevel_inplaceShiftRightWithJavaMathBigInteger_withInt_(JavaMathBigInteger *val, jint count);

FOUNDATION_EXPORT jboolean JavaMathBitLevel_shiftRightWithIntArray_withInt_withIntArray_withInt_withInt_(IOSIntArray *result, jint resultLen, IOSIntArray *source, jint intCount, jint count);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathBitLevel_flipBitWithJavaMathBigInteger_withInt_(JavaMathBigInteger *val, jint n);

J2OBJC_TYPE_LITERAL_HEADER(JavaMathBitLevel)

#endif // _JavaMathBitLevel_H_
