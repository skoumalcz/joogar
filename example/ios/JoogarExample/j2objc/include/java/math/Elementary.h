//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Elementary.java
//

#ifndef _JavaMathElementary_H_
#define _JavaMathElementary_H_

#include "J2ObjC_header.h"

@class IOSIntArray;
@class JavaMathBigInteger;

/*!
 @brief Static library that provides the basic arithmetic mutable operations for
 <code>BigInteger</code>.
 The operations provided are listed below.
 <ul type="circle">
 <li>Addition.</li>
 <li>Subtraction.</li>
 <li>Comparison.</li>
 </ul>
 In addition to this, some <i><b>Inplace</b></i> (mutable) methods are provided.
 */
@interface JavaMathElementary : NSObject

#pragma mark Package-Private

/*!
 */
+ (JavaMathBigInteger *)addWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                           withJavaMathBigInteger:(JavaMathBigInteger *)op2;

/*!
 @brief Compares two arrays.
 All elements are treated as unsigned integers. The
 magnitude is the bit chain of elements in big-endian order.
 @param a the first array
 @param b the second array
 @param size the size of arrays
 @return 1 if a > b, -1 if a < b, 0 if a == b
 */
+ (jint)compareArraysWithIntArray:(IOSIntArray *)a
                     withIntArray:(IOSIntArray *)b
                          withInt:(jint)size;

/*!
 @brief Same as @@link #inplaceAdd(BigInteger, BigInteger), but without the restriction of
 non-positive values
 @param op1 any number
 @param op2 any number
 */
+ (void)completeInPlaceAddWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                          withJavaMathBigInteger:(JavaMathBigInteger *)op2;

/*!
 @brief Same as
 <code> .inplaceSubtract(BigInteger, BigInteger), but without the
 restriction of non-positive values</code>
 @param op1
 should have enough space to save the result
 @param op2
 */
+ (void)completeInPlaceSubtractWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                               withJavaMathBigInteger:(JavaMathBigInteger *)op2;

/*!
 @brief Performs <code>op1 += op2</code>.
 <code>op1</code> must have enough place to store
 the result (i.e. <code>op1.bitLength() >= op2.bitLength()</code>). Both
 should be positive (i.e. <code>op1 >= op2</code>).
 @param op1 the input minuend, and the output result.
 @param op2 the addend
 */
+ (void)inplaceAddWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                  withJavaMathBigInteger:(JavaMathBigInteger *)op2;

/*!
 @brief Performs: <code>op1 += addend</code>.
 The number must to have place to hold a
 possible carry.
 */
+ (void)inplaceAddWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                                 withInt:(jint)addend;

/*!
 @brief Adds an integer value to the array of integers remembering carry.
 @return a possible generated carry (0 or 1)
 */
+ (jint)inplaceAddWithIntArray:(IOSIntArray *)a
                       withInt:(jint)aSize
                       withInt:(jint)addend;

/*!
 @brief Performs <code>op1 -= op2</code>.
 <code>op1</code> must have enough place to store
 the result (i.e. <code>op1.bitLength() >= op2.bitLength()</code>). Both
 should be positive (what implies that <code>op1 >= op2</code>).
 @param op1
 the input minuend, and the output result.
 @param op2
 the subtrahend
 */
+ (void)inplaceSubtractWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                       withJavaMathBigInteger:(JavaMathBigInteger *)op2;

/*!
 */
+ (JavaMathBigInteger *)subtractWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                                withJavaMathBigInteger:(JavaMathBigInteger *)op2;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaMathElementary)

FOUNDATION_EXPORT jint JavaMathElementary_compareArraysWithIntArray_withIntArray_withInt_(IOSIntArray *a, IOSIntArray *b, jint size);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathElementary_addWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathElementary_subtractWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

FOUNDATION_EXPORT void JavaMathElementary_inplaceAddWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

FOUNDATION_EXPORT jint JavaMathElementary_inplaceAddWithIntArray_withInt_withInt_(IOSIntArray *a, jint aSize, jint addend);

FOUNDATION_EXPORT void JavaMathElementary_inplaceAddWithJavaMathBigInteger_withInt_(JavaMathBigInteger *op1, jint addend);

FOUNDATION_EXPORT void JavaMathElementary_inplaceSubtractWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

FOUNDATION_EXPORT void JavaMathElementary_completeInPlaceSubtractWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

FOUNDATION_EXPORT void JavaMathElementary_completeInPlaceAddWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

J2OBJC_TYPE_LITERAL_HEADER(JavaMathElementary)

#endif // _JavaMathElementary_H_
