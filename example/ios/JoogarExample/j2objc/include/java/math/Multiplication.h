//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Multiplication.java
//

#ifndef _JavaMathMultiplication_H_
#define _JavaMathMultiplication_H_

#include "J2ObjC_header.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;

#define JavaMathMultiplication_whenUseKaratsuba 63

/*!
 @brief Static library that provides all multiplication of <code>BigInteger</code> methods.
 */
@interface JavaMathMultiplication : NSObject

#pragma mark Package-Private

/*!
 @brief Performs the multiplication with the Karatsuba's algorithm.
 <b>Karatsuba's algorithm:</b>
 <tt>
 u = u<sub>1</sub> * B + u<sub>0</sub><br>
 v = v<sub>1</sub> * B + v<sub>0</sub><br>
 u*v = (u<sub>1</sub> * v<sub>1</sub>) * B<sub>2</sub> + ((u<sub>1</sub> - u<sub>0</sub>) * (v<sub>0</sub> - v<sub>1</sub>) + u<sub>1</sub> * v<sub>1</sub> +
 u<sub>0</sub> * v<sub>0</sub> ) * B + u<sub>0</sub> * v<sub>0</sub><br>
 </tt>
 @param op1 first factor of the product
 @param op2 second factor of the product
 @return <code>op1 * op2</code>
 */
+ (JavaMathBigInteger *)karatsubaWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                                 withJavaMathBigInteger:(JavaMathBigInteger *)op2;

+ (void)multArraysPAPWithIntArray:(IOSIntArray *)aDigits
                          withInt:(jint)aLen
                     withIntArray:(IOSIntArray *)bDigits
                          withInt:(jint)bLen
                     withIntArray:(IOSIntArray *)resDigits;

/*!
 @brief Performs a multiplication of two BigInteger and hides the algorithm used.
 */
+ (JavaMathBigInteger *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                withJavaMathBigInteger:(JavaMathBigInteger *)y;

/*!
 @brief Multiplies a number by a power of five.
 This method is used in <code>BigDecimal</code> class.
 @param val the number to be multiplied
 @param exp a positive <code>int</code> exponent
 @return <code>val * 5<sup>exp</sup></code>
 */
+ (JavaMathBigInteger *)multiplyByFivePowWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                        withInt:(jint)exp;

/*!
 @brief Multiplies an array of integers by an integer value.
 @param a the array of integers
 @param aSize the number of elements of intArray to be multiplied
 @param factor the multiplier
 @return the top digit of production
 */
+ (jint)multiplyByIntWithIntArray:(IOSIntArray *)a
                          withInt:(jint)aSize
                          withInt:(jint)factor;

/*!
 @brief Multiplies a number by a positive integer.
 @param val an arbitrary <code>BigInteger</code>
 @param factor a positive <code>int</code> number
 @return <code>val * factor</code>
 */
+ (JavaMathBigInteger *)multiplyByPositiveIntWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                            withInt:(jint)factor;

/*!
 @brief Multiplies a number by a power of ten.
 This method is used in <code>BigDecimal</code> class.
 @param val the number to be multiplied
 @param exp a positive <code>long</code> exponent
 @return <code>val * 10<sup>exp</sup></code>
 */
+ (JavaMathBigInteger *)multiplyByTenPowWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                      withLong:(jlong)exp;

/*!
 @brief Multiplies two BigIntegers.
 Implements traditional scholar algorithm described by Knuth.
 <br><tt>
 <table border="0">
 <tbody>
 <tr>
 <td align="center">A=</td>
 <td>a<sub>3</sub></td>
 <td>a<sub>2</sub></td>
 <td>a<sub>1</sub></td>
 <td>a<sub>0</sub></td>
 <td></td>
 <td></td>
 </tr>
 <tr>
 <td align="center">B=</td>
 <td></td>
 <td>b<sub>2</sub></td>
 <td>b<sub>1</sub></td>
 <td>b<sub>1</sub></td>
 <td></td>
 <td></td>
 </tr>
 <tr>
 <td></td>
 <td></td>
 <td></td>
 <td>b<sub>0</sub>*a<sub>3</sub></td>
 <td>b<sub>0</sub>*a<sub>2</sub></td>
 <td>b<sub>0</sub>*a<sub>1</sub></td>
 <td>b<sub>0</sub>*a<sub>0</sub></td>
 </tr>
 <tr>
 <td></td>
 <td></td>
 <td>b<sub>1</sub>*a<sub>3</sub></td>
 <td>b<sub>1</sub>*a<sub>2</sub></td>
 <td>b<sub>1</sub>*a1</td>
 <td>b<sub>1</sub>*a0</td>
 </tr>
 <tr>
 <td>+</td>
 <td>b<sub>2</sub>*a<sub>3</sub></td>
 <td>b<sub>2</sub>*a<sub>2</sub></td>
 <td>b<sub>2</sub>*a<sub>1</sub></td>
 <td>b<sub>2</sub>*a<sub>0</sub></td>
 </tr>
 <tr>
 <td></td>
 <td>______</td>
 <td>______</td>
 <td>______</td>
 <td>______</td>
 <td>______</td>
 <td>______</td>
 </tr>
 <tr>
 <td align="center">A*B=R=</td>
 <td align="center">r<sub>5</sub></td>
 <td align="center">r<sub>4</sub></td>
 <td align="center">r<sub>3</sub></td>
 <td align="center">r<sub>2</sub></td>
 <td align="center">r<sub>1</sub></td>
 <td align="center">r<sub>0</sub></td>
 <td></td>
 </tr>
 </tbody>
 </table>
 </tt>
 @param op1 first factor of the multiplication <code>op1 >= 0</code>
 @param op2 second factor of the multiplication <code>op2 >= 0</code>
 @return a <code>BigInteger</code> of value <code>op1 * op2</code>
 */
+ (JavaMathBigInteger *)multiplyPAPWithJavaMathBigInteger:(JavaMathBigInteger *)a
                                   withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (void)multPAPWithIntArray:(IOSIntArray *)a
               withIntArray:(IOSIntArray *)b
               withIntArray:(IOSIntArray *)t
                    withInt:(jint)aLen
                    withInt:(jint)bLen;

+ (JavaMathBigInteger *)powWithJavaMathBigInteger:(JavaMathBigInteger *)base
                                          withInt:(jint)exponent;

/*!
 @brief It calculates a power of ten, which exponent could be out of 32-bit range.
 Note that internally this method will be used in the worst case with
 an exponent equals to: <code>Integer.MAX_VALUE - Integer.MIN_VALUE</code>.
 @param exp the exponent of power of ten, it must be positive.
 @return a <code>BigInteger</code> with value <code>10<sup>exp</sup></code>.
 */
+ (JavaMathBigInteger *)powerOf10WithLong:(jlong)exp;

/*!
 @brief Performs a<sup>2</sup>
 @param a The number to square.
 @param aLen The length of the number to square.
 */
+ (IOSIntArray *)squareWithIntArray:(IOSIntArray *)a
                            withInt:(jint)aLen
                       withIntArray:(IOSIntArray *)res;

/*!
 @brief Computes the value unsigned ((uint)a*(uint)b + (uint)c + (uint)d).
 This
 method could improve the readability and performance of the code.
 @param a
 parameter 1
 @param b
 parameter 2
 @param c
 parameter 3
 @param d
 parameter 4
 @return value of expression
 */
+ (jlong)unsignedMultAddAddWithInt:(jint)a
                           withInt:(jint)b
                           withInt:(jint)c
                           withInt:(jint)d;

@end

J2OBJC_STATIC_INIT(JavaMathMultiplication)

J2OBJC_STATIC_FIELD_GETTER(JavaMathMultiplication, whenUseKaratsuba, jint)

FOUNDATION_EXPORT IOSIntArray *JavaMathMultiplication_tenPows_;
J2OBJC_STATIC_FIELD_GETTER(JavaMathMultiplication, tenPows_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *JavaMathMultiplication_fivePows_;
J2OBJC_STATIC_FIELD_GETTER(JavaMathMultiplication, fivePows_, IOSIntArray *)

FOUNDATION_EXPORT IOSObjectArray *JavaMathMultiplication_bigTenPows_;
J2OBJC_STATIC_FIELD_GETTER(JavaMathMultiplication, bigTenPows_, IOSObjectArray *)

FOUNDATION_EXPORT IOSObjectArray *JavaMathMultiplication_bigFivePows_;
J2OBJC_STATIC_FIELD_GETTER(JavaMathMultiplication, bigFivePows_, IOSObjectArray *)

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_multiplyWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *x, JavaMathBigInteger *y);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_karatsubaWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *op1, JavaMathBigInteger *op2);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_multiplyPAPWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void JavaMathMultiplication_multArraysPAPWithIntArray_withInt_withIntArray_withInt_withIntArray_(IOSIntArray *aDigits, jint aLen, IOSIntArray *bDigits, jint bLen, IOSIntArray *resDigits);

FOUNDATION_EXPORT void JavaMathMultiplication_multPAPWithIntArray_withIntArray_withIntArray_withInt_withInt_(IOSIntArray *a, IOSIntArray *b, IOSIntArray *t, jint aLen, jint bLen);

FOUNDATION_EXPORT jint JavaMathMultiplication_multiplyByIntWithIntArray_withInt_withInt_(IOSIntArray *a, jint aSize, jint factor);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_multiplyByPositiveIntWithJavaMathBigInteger_withInt_(JavaMathBigInteger *val, jint factor);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_powWithJavaMathBigInteger_withInt_(JavaMathBigInteger *base, jint exponent);

FOUNDATION_EXPORT IOSIntArray *JavaMathMultiplication_squareWithIntArray_withInt_withIntArray_(IOSIntArray *a, jint aLen, IOSIntArray *res);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_multiplyByTenPowWithJavaMathBigInteger_withLong_(JavaMathBigInteger *val, jlong exp);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_powerOf10WithLong_(jlong exp);

FOUNDATION_EXPORT JavaMathBigInteger *JavaMathMultiplication_multiplyByFivePowWithJavaMathBigInteger_withInt_(JavaMathBigInteger *val, jint exp);

FOUNDATION_EXPORT jlong JavaMathMultiplication_unsignedMultAddAddWithInt_withInt_withInt_withInt_(jint a, jint b, jint c, jint d);

J2OBJC_TYPE_LITERAL_HEADER(JavaMathMultiplication)

#endif // _JavaMathMultiplication_H_
