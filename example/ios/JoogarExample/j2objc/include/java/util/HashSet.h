//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/HashSet.java
//

#ifndef _JavaUtilHashSet_H_
#define _JavaUtilHashSet_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractSet.h"
#include "java/util/Set.h"

@class JavaUtilHashMap;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

/*!
 @brief HashSet is an implementation of a Set.
 All optional operations (adding and
 removing) are supported. The elements can be any objects.
 */
@interface JavaUtilHashSet : JavaUtilAbstractSet < JavaUtilSet, NSCopying, JavaIoSerializable > {
 @public
  JavaUtilHashMap *backingMap_;
}

#pragma mark Public

/*!
 @brief Constructs a new empty instance of <code>HashSet</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a new instance of <code>HashSet</code> containing the unique
 elements in the specified collection.
 @param collection
 the collection of elements to add.
 */
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Constructs a new instance of <code>HashSet</code> with the specified capacity.
 @param capacity
 the initial capacity of this <code>HashSet</code>.
 */
- (instancetype)initWithInt:(jint)capacity;

/*!
 @brief Constructs a new instance of <code>HashSet</code> with the specified capacity
 and load factor.
 @param capacity
 the initial capacity.
 @param loadFactor
 the initial load factor.
 */
- (instancetype)initWithInt:(jint)capacity
                  withFloat:(jfloat)loadFactor;

/*!
 @brief Adds the specified object to this <code>HashSet</code> if not already present.
 @param object
 the object to add.
 @return <code>true</code> when this <code>HashSet</code> did not already contain
 the object, <code>false</code> otherwise
 */
- (jboolean)addWithId:(id)object;

/*!
 @brief Removes all elements from this <code>HashSet</code>, leaving it empty.
 */
- (void)clear;

/*!
 @brief Returns a new <code>HashSet</code> with the same elements and size as this
 <code>HashSet</code>.
 @return a shallow copy of this <code>HashSet</code>.
 */
- (id)clone;

/*!
 @brief Searches this <code>HashSet</code> for the specified object.
 @param object
 the object to search for.
 @return <code>true</code> if <code>object</code> is an element of this
 <code>HashSet</code>, <code>false</code> otherwise.
 */
- (jboolean)containsWithId:(id)object;

/*!
 @brief Returns true if this <code>HashSet</code> has no elements, false otherwise.
 @return <code>true</code> if this <code>HashSet</code> has no elements,
 <code>false</code> otherwise.
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an Iterator on the elements of this <code>HashSet</code>.
 @return an Iterator on the elements of this <code>HashSet</code>.
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Removes the specified object from this <code>HashSet</code>.
 @param object
 the object to remove.
 @return <code>true</code> if the object was removed, <code>false</code> otherwise.
 */
- (jboolean)removeWithId:(id)object;

/*!
 @brief Returns the number of elements in this <code>HashSet</code>.
 @return the number of elements in this <code>HashSet</code>.
 */
- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)backingMap;

- (JavaUtilHashMap *)createBackingMapWithInt:(jint)capacity
                                   withFloat:(jfloat)loadFactor;


@end

J2OBJC_STATIC_INIT(JavaUtilHashSet)

J2OBJC_FIELD_SETTER(JavaUtilHashSet, backingMap_, JavaUtilHashMap *)

FOUNDATION_EXPORT void JavaUtilHashSet_init(JavaUtilHashSet *self);

FOUNDATION_EXPORT JavaUtilHashSet *new_JavaUtilHashSet_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashSet_initWithInt_(JavaUtilHashSet *self, jint capacity);

FOUNDATION_EXPORT JavaUtilHashSet *new_JavaUtilHashSet_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashSet_initWithInt_withFloat_(JavaUtilHashSet *self, jint capacity, jfloat loadFactor);

FOUNDATION_EXPORT JavaUtilHashSet *new_JavaUtilHashSet_initWithInt_withFloat_(jint capacity, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilHashSet *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaUtilHashSet *new_JavaUtilHashSet_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashSet_initWithJavaUtilHashMap_(JavaUtilHashSet *self, JavaUtilHashMap *backingMap);

FOUNDATION_EXPORT JavaUtilHashSet *new_JavaUtilHashSet_initWithJavaUtilHashMap_(JavaUtilHashMap *backingMap) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilHashSet)

#endif // _JavaUtilHashSet_H_
