//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/UUID.java
//

#ifndef _JavaUtilUUID_H_
#define _JavaUtilUUID_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"

@class IOSByteArray;

/*!
 @brief UUID is an immutable representation of a 128-bit universally unique
 identifier (UUID).
 <p>
 There are multiple, variant layouts of UUIDs, but this class is based upon
 variant 2 of <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>, the
 Leach-Salz variant. This class can be used to model alternate variants, but
 most of the methods will be unsupported in those cases; see each method for
 details.
 @since 1.5
 */
@interface JavaUtilUUID : NSObject < JavaIoSerializable, JavaLangComparable >

#pragma mark Public

/*!
 @brief <p>
 Constructs an instance with the specified bits.
 @param mostSigBits
 The 64 most significant bits of the UUID.
 @param leastSigBits
 The 64 least significant bits of the UUID.
 */
- (instancetype)initWithLong:(jlong)mostSigBits
                    withLong:(jlong)leastSigBits;

/*!
 @brief <p>
 The clock sequence value of the version 1, variant 2 UUID as per <a
 href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 @return a <code>long</code> value.
 @throws UnsupportedOperationException
 if <code>version()</code> is not 1.
 */
- (jint)clockSequence;

/*!
 @brief <p>
 Compares this UUID to the specified UUID.
 The natural ordering of UUIDs
 is based upon the value of the bits from most significant to least
 significant.
 @param uuid
 the UUID to compare to.
 @return a value of -1, 0 or 1 if this UUID is less than, equal to or
 greater than <code>uuid</code>.
 */
- (jint)compareToWithId:(JavaUtilUUID *)uuid;

/*!
 @brief <p>
 Compares this UUID to another object for equality.
 If <code>object</code>
 is not <code>null</code>, is a UUID instance, and all bits are equal, then
 <code>true</code> is returned.
 @param object
 the <code>Object</code> to compare to.
 @return <code>true</code> if this UUID is equal to <code>object</code>
 or <code>false</code> if not.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief <p>
 Parses a UUID string with the format defined by <code>toString()</code>.
 @param uuid
 the UUID string to parse.
 @return an UUID instance.
 @throws NullPointerException
 if <code>uuid</code> is <code>null</code>.
 @throws IllegalArgumentException
 if <code>uuid</code> is not formatted correctly.
 */
+ (JavaUtilUUID *)fromStringWithNSString:(NSString *)uuid;

/*!
 @brief <p>
 The 64 least significant bits of the UUID.
 @return the 64 least significant bits.
 */
- (jlong)getLeastSignificantBits;

/*!
 @brief <p>
 The 64 most significant bits of the UUID.
 @return the 64 most significant bits.
 */
- (jlong)getMostSignificantBits;

/*!
 @brief <p>
 Returns a hash value for this UUID that is consistent with the
 <code>equals(Object)</code> method.
 @return an <code>int</code> value.
 */
- (NSUInteger)hash;

/*!
 @brief <p>
 Generates a variant 2, version 3 (name-based, MD5-hashed) UUID as per <a
 href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 @param name
 the name used as byte array to create an UUID.
 @return an UUID instance.
 */
+ (JavaUtilUUID *)nameUUIDFromBytesWithByteArray:(IOSByteArray *)name;

/*!
 @brief <p>
 The node value of the version 1, variant 2 UUID as per <a
 href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 @return a <code>long</code> value.
 @throws UnsupportedOperationException
 if <code>version()</code> is not 1.
 */
- (jlong)node;

/*!
 @brief <p>
 Generates a variant 2, version 4 (randomly generated number) UUID as per
 <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 @return an UUID instance.
 */
+ (JavaUtilUUID *)randomUUID;

/*!
 @brief <p>
 The timestamp value of the version 1, variant 2 UUID as per <a
 href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 @return a <code>long</code> value.
 @throws UnsupportedOperationException
 if <code>version()</code> is not 1.
 */
- (jlong)timestamp;

/*!
 @brief <p>
 Returns a string representation of this UUID in the following format, as
 per <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 @code

            UUID                   = time-low &quot;-&quot; time-mid &quot;-&quot;
                                     time-high-and-version &quot;-&quot;
                                     clock-seq-and-reserved
                                     clock-seq-low &quot;-&quot; node
            time-low               = 4hexOctet
            time-mid               = 2hexOctet
            time-high-and-version  = 2hexOctet
            clock-seq-and-reserved = hexOctet
            clock-seq-low          = hexOctet
            node                   = 6hexOctet
            hexOctet               = hexDigit hexDigit
            hexDigit =
                &quot;0&quot; / &quot;1&quot; / &quot;2&quot; / &quot;3&quot; / &quot;4&quot; / &quot;5&quot; / &quot;6&quot; / &quot;7&quot; / &quot;8&quot; / &quot;9&quot; /
                &quot;a&quot; / &quot;b&quot; / &quot;c&quot; / &quot;d&quot; / &quot;e&quot; / &quot;f&quot; /
                &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;
  
@endcode
 @return a String instance.
 */
- (NSString *)description;

/*!
 @brief <p>
 The variant of the UUID as per <a
 href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 <ul>
 <li>0 - Reserved for NCS compatibility</li>
 <li>2 - RFC 4122/Leach-Salz</li>
 <li>6 - Reserved for Microsoft Corporation compatibility</li>
 <li>7 - Reserved for future use</li>
 </ul>
 @return an <code>int</code> value.
 */
- (jint)variant;

/*!
 @brief <p>
 The version of the variant 2 UUID as per <a
 href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
 If the variant
 is not 2, then the version will be 0.
 <ul>
 <li>1 - Time-based UUID</li>
 <li>2 - DCE Security UUID</li>
 <li>3 - Name-based with MD5 hashing UUID (<code>nameUUIDFromBytes(byte[])</code>)</li>
 <li>4 - Randomly generated UUID (<code>randomUUID()</code>)</li>
 <li>5 - Name-based with SHA-1 hashing UUID</li>
 </ul>
 @return an <code>int</code> value.
 */
- (jint)version__;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilUUID)

FOUNDATION_EXPORT void JavaUtilUUID_initWithLong_withLong_(JavaUtilUUID *self, jlong mostSigBits, jlong leastSigBits);

FOUNDATION_EXPORT JavaUtilUUID *new_JavaUtilUUID_initWithLong_withLong_(jlong mostSigBits, jlong leastSigBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilUUID *JavaUtilUUID_randomUUID();

FOUNDATION_EXPORT JavaUtilUUID *JavaUtilUUID_nameUUIDFromBytesWithByteArray_(IOSByteArray *name);

FOUNDATION_EXPORT JavaUtilUUID *JavaUtilUUID_fromStringWithNSString_(NSString *uuid);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilUUID)

#endif // _JavaUtilUUID_H_
