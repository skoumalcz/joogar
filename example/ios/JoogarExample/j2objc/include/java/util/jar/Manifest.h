//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/jar/Manifest.java
//

#ifndef _JavaUtilJarManifest_H_
#define _JavaUtilJarManifest_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilJarAttributes;
@class JavaUtilJarManifest_Chunk;
@protocol JavaUtilMap;

#define JavaUtilJarManifest_LINE_LENGTH_LIMIT 72

/*!
 @brief The <code>Manifest</code> class is used to obtain attribute information for a
 <code>JarFile</code> and its entries.
 */
@interface JavaUtilJarManifest : NSObject < NSCopying >

#pragma mark Public

/*!
 @brief Creates a new <code>Manifest</code> instance.
 */
- (instancetype)init;

/*!
 @brief Creates a new <code>Manifest</code> instance using the attributes obtained
 from the input stream.
 @param is
 <code>InputStream</code> to parse for attributes.
 @throws IOException
 if an IO error occurs while creating this <code>Manifest</code>
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Creates a new <code>Manifest</code> instance.
 The new instance will have the
 same attributes as those found in the parameter <code>Manifest</code>.
 @param man
 <code>Manifest</code> instance to obtain attributes from.
 */
- (instancetype)initWithJavaUtilJarManifest:(JavaUtilJarManifest *)man;

/*!
 @brief Resets the both the main attributes as well as the entry attributes
 associated with this <code>Manifest</code>.
 */
- (void)clear;

/*!
 @brief Creates a copy of this <code>Manifest</code>.
 The returned <code>Manifest</code>
 will equal the <code>Manifest</code> from which it was cloned.
 @return a copy of this instance.
 */
- (id)clone;

/*!
 @brief Determines if the receiver is equal to the parameter object.
 Two <code>Manifest</code>
 s are equal if they have identical main attributes as well as
 identical entry attributes.
 @param o
 the object to compare against.
 @return <code>true</code> if the manifests are equal, <code>false</code> otherwise
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the <code>Attributes</code> associated with the parameter entry
 <code>name</code>.
 @param name
 the name of the entry to obtain <code>Attributes</code> from.
 @return the Attributes for the entry or <code>null</code> if the entry does
 not exist.
 */
- (JavaUtilJarAttributes *)getAttributesWithNSString:(NSString *)name;

/*!
 @brief Returns a map containing the <code>Attributes</code> for each entry in the
 <code>Manifest</code>.
 @return the map of entry attributes.
 */
- (id<JavaUtilMap>)getEntries;

/*!
 @brief Returns the main <code>Attributes</code> of the <code>JarFile</code>.
 @return main <code>Attributes</code> associated with the source <code>JarFile</code>
 .
 */
- (JavaUtilJarAttributes *)getMainAttributes;

/*!
 @brief Returns the hash code for this instance.
 @return this <code>Manifest</code>'s hashCode.
 */
- (NSUInteger)hash;

/*!
 @brief Merges name/attribute pairs read from the input stream <code>is</code> into this manifest.
 @param is
 The <code>InputStream</code> to read from.
 @throws IOException
 If an error occurs reading the manifest.
 */
- (void)readWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Writes this <code>Manifest</code>'s name/attributes pairs to the given <code>OutputStream</code>.
 The <code>MANIFEST_VERSION</code> or <code>SIGNATURE_VERSION</code> attribute must be set before
 calling this method, or no attributes will be written.
 @throws IOException
 If an error occurs writing the <code>Manifest</code>.
 */
- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)os;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)manifestBytes
                      withBoolean:(jboolean)readChunks;

- (JavaUtilJarManifest_Chunk *)getChunkWithNSString:(NSString *)name;

- (jint)getMainAttributesEnd;

- (void)removeChunks;

/*!
 @brief Writes out the attribute information of the specified manifest to the
 specified <code>OutputStream</code>
 @param manifest
 the manifest to write out.
 @param outArg
 The <code>OutputStream</code> to write to.
 @throws IOException
 If an error occurs writing the <code>Manifest</code>.
 */
+ (void)writeWithJavaUtilJarManifest:(JavaUtilJarManifest *)manifest
              withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(JavaUtilJarManifest)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilJarManifest, LINE_LENGTH_LIMIT, jint)

FOUNDATION_EXPORT void JavaUtilJarManifest_init(JavaUtilJarManifest *self);

FOUNDATION_EXPORT JavaUtilJarManifest *new_JavaUtilJarManifest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilJarManifest_initWithJavaIoInputStream_(JavaUtilJarManifest *self, JavaIoInputStream *is);

FOUNDATION_EXPORT JavaUtilJarManifest *new_JavaUtilJarManifest_initWithJavaIoInputStream_(JavaIoInputStream *is) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilJarManifest_initWithJavaUtilJarManifest_(JavaUtilJarManifest *self, JavaUtilJarManifest *man);

FOUNDATION_EXPORT JavaUtilJarManifest *new_JavaUtilJarManifest_initWithJavaUtilJarManifest_(JavaUtilJarManifest *man) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilJarManifest_initWithByteArray_withBoolean_(JavaUtilJarManifest *self, IOSByteArray *manifestBytes, jboolean readChunks);

FOUNDATION_EXPORT JavaUtilJarManifest *new_JavaUtilJarManifest_initWithByteArray_withBoolean_(IOSByteArray *manifestBytes, jboolean readChunks) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilJarManifest_writeWithJavaUtilJarManifest_withJavaIoOutputStream_(JavaUtilJarManifest *manifest, JavaIoOutputStream *outArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilJarManifest)

@interface JavaUtilJarManifest_Chunk : NSObject {
 @public
  jint start_;
  jint end_;
}

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)start
                    withInt:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilJarManifest_Chunk)

FOUNDATION_EXPORT void JavaUtilJarManifest_Chunk_initWithInt_withInt_(JavaUtilJarManifest_Chunk *self, jint start, jint end);

FOUNDATION_EXPORT JavaUtilJarManifest_Chunk *new_JavaUtilJarManifest_Chunk_initWithInt_withInt_(jint start, jint end) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilJarManifest_Chunk)

#endif // _JavaUtilJarManifest_H_
