//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Deque.java
//

#ifndef _JavaUtilDeque_H_
#define _JavaUtilDeque_H_

#include "J2ObjC_header.h"
#include "java/util/Queue.h"

@protocol JavaUtilIterator;

/*!
 @brief A linear collection that supports element insertion and removal at
 both ends.
 The name <i>deque</i> is short for "double ended queue"
 and is usually pronounced "deck".  Most <tt>Deque</tt>
 implementations place no fixed limits on the number of elements
 they may contain, but this interface supports capacity-restricted
 deques as well as those with no fixed size limit.
 <p>This interface defines methods to access the elements at both
 ends of the deque.  Methods are provided to insert, remove, and
 examine the element.  Each of these methods exists in two forms:
 one throws an exception if the operation fails, the other returns a
 special value (either <tt>null</tt> or <tt>false</tt>, depending on
 the operation).  The latter form of the insert operation is
 designed specifically for use with capacity-restricted
 <tt>Deque</tt> implementations; in most implementations, insert
 operations cannot fail.
 <p>The twelve methods described above are summarized in the
 following table:
 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
 <td></td>
 <td ALIGN=CENTER COLSPAN = 2> <b>First Element (Head)</b></td>
 <td ALIGN=CENTER COLSPAN = 2> <b>Last Element (Tail)</b></td>
 </tr>
 <tr>
 <td></td>
 <td ALIGN=CENTER><em>Throws exception</em></td>
 <td ALIGN=CENTER><em>Special value</em></td>
 <td ALIGN=CENTER><em>Throws exception</em></td>
 <td ALIGN=CENTER><em>Special value</em></td>
 </tr>
 <tr>
 <td><b>Insert</b></td>
 <td><code>addFirst(e)</code></td>
 <td><code>offerFirst(e)</code></td>
 <td><code>addLast(e)</code></td>
 <td><code>offerLast(e)</code></td>
 </tr>
 <tr>
 <td><b>Remove</b></td>
 <td><code>removeFirst()</code></td>
 <td><code>pollFirst()</code></td>
 <td><code>removeLast()</code></td>
 <td><code>pollLast()</code></td>
 </tr>
 <tr>
 <td><b>Examine</b></td>
 <td><code>getFirst()</code></td>
 <td><code>peekFirst()</code></td>
 <td><code>getLast()</code></td>
 <td><code>peekLast()</code></td>
 </tr>
 </table>
 <p>This interface extends the <code>Queue</code> interface.  When a deque is
 used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are
 added at the end of the deque and removed from the beginning.  The methods
 inherited from the <tt>Queue</tt> interface are precisely equivalent to
 <tt>Deque</tt> methods as indicated in the following table:
 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
 <td ALIGN=CENTER> <b><tt>Queue</tt> Method</b></td>
 <td ALIGN=CENTER> <b>Equivalent <tt>Deque</tt> Method</b></td>
 </tr>
 <tr>
 <td><code>add(e)</code></td>
 <td><code>addLast(e)</code></td>
 </tr>
 <tr>
 <td><code>offer(e)</code></td>
 <td><code>offerLast(e)</code></td>
 </tr>
 <tr>
 <td><code>remove()</code></td>
 <td><code>removeFirst()</code></td>
 </tr>
 <tr>
 <td><code>poll()</code></td>
 <td><code>pollFirst()</code></td>
 </tr>
 <tr>
 <td><code>element()</code></td>
 <td><code>getFirst()</code></td>
 </tr>
 <tr>
 <td><code>peek()</code></td>
 <td><code>peekFirst()</code></td>
 </tr>
 </table>
 <p>Deques can also be used as LIFO (Last-In-First-Out) stacks.  This
 interface should be used in preference to the legacy <code>Stack</code> class.
 When a deque is used as a stack, elements are pushed and popped from the
 beginning of the deque.  Stack methods are precisely equivalent to
 <tt>Deque</tt> methods as indicated in the table below:
 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
 <td ALIGN=CENTER> <b>Stack Method</b></td>
 <td ALIGN=CENTER> <b>Equivalent <tt>Deque</tt> Method</b></td>
 </tr>
 <tr>
 <td><code>push(e)</code></td>
 <td><code>addFirst(e)</code></td>
 </tr>
 <tr>
 <td><code>pop()</code></td>
 <td><code>removeFirst()</code></td>
 </tr>
 <tr>
 <td><code>peek()</code></td>
 <td><code>peekFirst()</code></td>
 </tr>
 </table>
 <p>Note that the <code>peek</code> method works equally well when
 a deque is used as a queue or a stack; in either case, elements are
 drawn from the beginning of the deque.
 <p>This interface provides two methods to remove interior
 elements, <code>removeFirstOccurrence</code> and
 <code>removeLastOccurrence</code>.
 <p>Unlike the <code>List</code> interface, this interface does not
 provide support for indexed access to elements.
 <p>While <tt>Deque</tt> implementations are not strictly required
 to prohibit the insertion of null elements, they are strongly
 encouraged to do so.  Users of any <tt>Deque</tt> implementations
 that do allow null elements are strongly encouraged <i>not</i> to
 take advantage of the ability to insert nulls.  This is so because
 <tt>null</tt> is used as a special return value by various methods
 to indicated that the deque is empty.
 <p><tt>Deque</tt> implementations generally do not define
 element-based versions of the <tt>equals</tt> and <tt>hashCode</tt>
 methods, but instead inherit the identity-based versions from class
 <tt>Object</tt>.
 @author Doug Lea
 @author Josh Bloch
 @since 1.6
 */
@protocol JavaUtilDeque < JavaUtilQueue, NSObject, JavaObject >

/*!
 @brief Inserts the specified element at the front of this deque if it is
 possible to do so immediately without violating capacity restrictions.
 When using a capacity-restricted deque, it is generally preferable to
 use method <code>offerFirst</code>.
 @param e the element to add
 @throws IllegalStateException if the element cannot be added at this
 time due to capacity restrictions
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (void)addFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque if it is
 possible to do so immediately without violating capacity restrictions.
 When using a capacity-restricted deque, it is generally preferable to
 use method <code>offerLast</code>.
 <p>This method is equivalent to <code>add</code>.
 @param e the element to add
 @throws IllegalStateException if the element cannot be added at this
 time due to capacity restrictions
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (void)addLastWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this deque unless it would
 violate capacity restrictions.
 When using a capacity-restricted deque,
 this method is generally preferable to the <code>addFirst</code> method,
 which can fail to insert an element only by throwing an exception.
 @param e the element to add
 @return <tt>true</tt> if the element was added to this deque, else
 <tt>false</tt>
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (jboolean)offerFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque unless it would
 violate capacity restrictions.
 When using a capacity-restricted deque,
 this method is generally preferable to the <code>addLast</code> method,
 which can fail to insert an element only by throwing an exception.
 @param e the element to add
 @return <tt>true</tt> if the element was added to this deque, else
 <tt>false</tt>
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (jboolean)offerLastWithId:(id)e;

/*!
 @brief Retrieves and removes the first element of this deque.
 This method
 differs from <code>pollFirst</code> only in that it throws an
 exception if this deque is empty.
 @return the head of this deque
 @throws NoSuchElementException if this deque is empty
 */
- (id)removeFirst;

/*!
 @brief Retrieves and removes the last element of this deque.
 This method
 differs from <code>pollLast</code> only in that it throws an
 exception if this deque is empty.
 @return the tail of this deque
 @throws NoSuchElementException if this deque is empty
 */
- (id)removeLast;

/*!
 @brief Retrieves and removes the first element of this deque,
 or returns <tt>null</tt> if this deque is empty.
 @return the head of this deque, or <tt>null</tt> if this deque is empty
 */
- (id)pollFirst;

/*!
 @brief Retrieves and removes the last element of this deque,
 or returns <tt>null</tt> if this deque is empty.
 @return the tail of this deque, or <tt>null</tt> if this deque is empty
 */
- (id)pollLast;

/*!
 @brief Retrieves, but does not remove, the first element of this deque.
 This method differs from <code>peekFirst</code> only in that it
 throws an exception if this deque is empty.
 @return the head of this deque
 @throws NoSuchElementException if this deque is empty
 */
- (id)getFirst;

/*!
 @brief Retrieves, but does not remove, the last element of this deque.
 This method differs from <code>peekLast</code> only in that it
 throws an exception if this deque is empty.
 @return the tail of this deque
 @throws NoSuchElementException if this deque is empty
 */
- (id)getLast;

/*!
 @brief Retrieves, but does not remove, the first element of this deque,
 or returns <tt>null</tt> if this deque is empty.
 @return the head of this deque, or <tt>null</tt> if this deque is empty
 */
- (id)peekFirst;

/*!
 @brief Retrieves, but does not remove, the last element of this deque,
 or returns <tt>null</tt> if this deque is empty.
 @return the tail of this deque, or <tt>null</tt> if this deque is empty
 */
- (id)peekLast;

/*!
 @brief Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>
 (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).
 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if an element was removed as a result of this call
 @throws ClassCastException if the class of the specified element
 is incompatible with this deque (optional)
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements (optional)
 */
- (jboolean)removeFirstOccurrenceWithId:(id)o;

/*!
 @brief Removes the last occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the last element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>
 (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).
 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if an element was removed as a result of this call
 @throws ClassCastException if the class of the specified element
 is incompatible with this deque (optional)
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements (optional)
 */
- (jboolean)removeLastOccurrenceWithId:(id)o;

/*!
 @brief Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque) if it is possible to do so
 immediately without violating capacity restrictions, returning
 <tt>true</tt> upon success and throwing an
 <tt>IllegalStateException</tt> if no space is currently available.
 When using a capacity-restricted deque, it is generally preferable to
 use <code>offer</code>.
 <p>This method is equivalent to <code>addLast</code>.
 @param e the element to add
 @return <tt>true</tt> (as specified by <code>Collection.add</code>)
 @throws IllegalStateException if the element cannot be added at this
 time due to capacity restrictions
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque) if it is possible to do so
 immediately without violating capacity restrictions, returning
 <tt>true</tt> upon success and <tt>false</tt> if no space is currently
 available.
 When using a capacity-restricted deque, this method is
 generally preferable to the <code>add</code> method, which can fail to
 insert an element only by throwing an exception.
 <p>This method is equivalent to <code>offerLast</code>.
 @param e the element to add
 @return <tt>true</tt> if the element was added to this deque, else
 <tt>false</tt>
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (jboolean)offerWithId:(id)e;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque).
 This method differs from <code>poll</code> only in that it throws an
 exception if this deque is empty.
 <p>This method is equivalent to <code>removeFirst()</code>.
 @return the head of the queue represented by this deque
 @throws NoSuchElementException if this deque is empty
 */
- (id)remove;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 <tt>null</tt> if this deque is empty.
 <p>This method is equivalent to <code>pollFirst()</code>.
 @return the first element of this deque, or <tt>null</tt> if
 this deque is empty
 */
- (id)poll;

/*!
 @brief Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque).
 This method differs from <code>peek</code> only in that it throws an
 exception if this deque is empty.
 <p>This method is equivalent to <code>getFirst()</code>.
 @return the head of the queue represented by this deque
 @throws NoSuchElementException if this deque is empty
 */
- (id)element;

/*!
 @brief Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque), or
 returns <tt>null</tt> if this deque is empty.
 <p>This method is equivalent to <code>peekFirst()</code>.
 @return the head of the queue represented by this deque, or
 <tt>null</tt> if this deque is empty
 */
- (id)peek;

/*!
 @brief Pushes an element onto the stack represented by this deque (in other
 words, at the head of this deque) if it is possible to do so
 immediately without violating capacity restrictions, returning
 <tt>true</tt> upon success and throwing an
 <tt>IllegalStateException</tt> if no space is currently available.
 <p>This method is equivalent to <code>addFirst</code>.
 @param e the element to push
 @throws IllegalStateException if the element cannot be added at this
 time due to capacity restrictions
 @throws ClassCastException if the class of the specified element
 prevents it from being added to this deque
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements
 @throws IllegalArgumentException if some property of the specified
 element prevents it from being added to this deque
 */
- (void)pushWithId:(id)e;

/*!
 @brief Pops an element from the stack represented by this deque.
 In other
 words, removes and returns the first element of this deque.
 <p>This method is equivalent to <code>removeFirst()</code>.
 @return the element at the front of this deque (which is the top
 of the stack represented by this deque)
 @throws NoSuchElementException if this deque is empty
 */
- (id)pop;

/*!
 @brief Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>
 (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).
 <p>This method is equivalent to <code>removeFirstOccurrence</code>.
 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if an element was removed as a result of this call
 @throws ClassCastException if the class of the specified element
 is incompatible with this deque (optional)
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements (optional)
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Returns <tt>true</tt> if this deque contains the specified element.
 More formally, returns <tt>true</tt> if and only if this deque contains
 at least one element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 @param o element whose presence in this deque is to be tested
 @return <tt>true</tt> if this deque contains the specified element
 @throws ClassCastException if the type of the specified element
 is incompatible with this deque (optional)
 @throws NullPointerException if the specified element is null and this
 deque does not permit null elements (optional)
 */
- (jboolean)containsWithId:(id)o;

/*!
 @brief Returns the number of elements in this deque.
 @return the number of elements in this deque
 */
- (jint)size;

/*!
 @brief Returns an iterator over the elements in this deque in proper sequence.
 The elements will be returned in order from first (head) to last (tail).
 @return an iterator over the elements in this deque in proper sequence
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Returns an iterator over the elements in this deque in reverse
 sequential order.
 The elements will be returned in order from
 last (tail) to first (head).
 @return an iterator over the elements in this deque in reverse
 sequence
 */
- (id<JavaUtilIterator>)descendingIterator;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilDeque)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilDeque)

#endif // _JavaUtilDeque_H_
