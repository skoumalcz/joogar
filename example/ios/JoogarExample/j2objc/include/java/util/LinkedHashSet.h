//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/LinkedHashSet.java
//

#ifndef _JavaUtilLinkedHashSet_H_
#define _JavaUtilLinkedHashSet_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@class JavaUtilHashMap;
@protocol JavaUtilCollection;

/*!
 @brief LinkedHashSet is a variant of HashSet.
 Its entries are kept in a
 doubly-linked list. The iteration order is the order in which entries were
 inserted.
 <p>
 Null elements are allowed, and all the optional Set operations are supported.
 <p>
 Like HashSet, LinkedHashSet is not thread safe, so access by multiple threads
 must be synchronized by an external mechanism such as
 <code>Collections.synchronizedSet(Set)</code>.
 @since 1.4
 */
@interface JavaUtilLinkedHashSet : JavaUtilHashSet < JavaUtilSet, NSCopying, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new empty instance of <code>LinkedHashSet</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a new instance of <code>LinkedHashSet</code> containing the unique
 elements in the specified collection.
 @param collection
 the collection of elements to add.
 */
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Constructs a new instance of <code>LinkedHashSet</code> with the specified
 capacity.
 @param capacity
 the initial capacity of this <code>LinkedHashSet</code>.
 */
- (instancetype)initWithInt:(jint)capacity;

/*!
 @brief Constructs a new instance of <code>LinkedHashSet</code> with the specified
 capacity and load factor.
 @param capacity
 the initial capacity.
 @param loadFactor
 the initial load factor.
 */
- (instancetype)initWithInt:(jint)capacity
                  withFloat:(jfloat)loadFactor;

#pragma mark Package-Private

- (JavaUtilHashMap *)createBackingMapWithInt:(jint)capacity
                                   withFloat:(jfloat)loadFactor;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashSet)

FOUNDATION_EXPORT void JavaUtilLinkedHashSet_init(JavaUtilLinkedHashSet *self);

FOUNDATION_EXPORT JavaUtilLinkedHashSet *new_JavaUtilLinkedHashSet_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilLinkedHashSet_initWithInt_(JavaUtilLinkedHashSet *self, jint capacity);

FOUNDATION_EXPORT JavaUtilLinkedHashSet *new_JavaUtilLinkedHashSet_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilLinkedHashSet_initWithInt_withFloat_(JavaUtilLinkedHashSet *self, jint capacity, jfloat loadFactor);

FOUNDATION_EXPORT JavaUtilLinkedHashSet *new_JavaUtilLinkedHashSet_initWithInt_withFloat_(jint capacity, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilLinkedHashSet_initWithJavaUtilCollection_(JavaUtilLinkedHashSet *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaUtilLinkedHashSet *new_JavaUtilLinkedHashSet_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashSet)

#endif // _JavaUtilLinkedHashSet_H_
