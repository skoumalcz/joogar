//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/List.java
//

#ifndef _JavaUtilList_H_
#define _JavaUtilList_H_

#include "J2ObjC_header.h"
#include "java/util/Collection.h"

@class IOSObjectArray;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;

/*!
 @brief A <code>List</code> is a collection which maintains an ordering for its elements.
 Every
 element in the <code>List</code> has an index. Each element can thus be accessed by its
 index, with the first index being zero. Normally, <code>List</code>s allow duplicate
 elements, as compared to Sets, where elements have to be unique.
 */
@protocol JavaUtilList < JavaUtilCollection, NSObject, JavaObject >

/*!
 @brief Inserts the specified object into this <code>List</code> at the specified location.
 The object is inserted before the current element at the specified
 location. If the location is equal to the size of this <code>List</code>, the object
 is added at the end. If the location is smaller than the size of this
 <code>List</code>, then all elements beyond the specified location are moved by one
 position towards the end of the <code>List</code>.
 @param location
 the index at which to insert.
 @param object
 the object to add.
 @throws UnsupportedOperationException
 if adding to this <code>List</code> is not supported.
 @throws ClassCastException
 if the class of the object is inappropriate for this
 <code>List</code>.
 @throws IllegalArgumentException
 if the object cannot be added to this <code>List</code>.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location > size()</code>
 */
- (void)addWithInt:(jint)location
            withId:(id)object;

/*!
 @brief Adds the specified object at the end of this <code>List</code>.
 @param object
 the object to add.
 @return always true.
 @throws UnsupportedOperationException
 if adding to this <code>List</code> is not supported.
 @throws ClassCastException
 if the class of the object is inappropriate for this
 <code>List</code>.
 @throws IllegalArgumentException
 if the object cannot be added to this <code>List</code>.
 */
- (jboolean)addWithId:(id)object;

/*!
 @brief Inserts the objects in the specified collection at the specified location
 in this <code>List</code>.
 The objects are added in the order they are returned from
 the collection's iterator.
 @param location
 the index at which to insert.
 @param collection
 the collection of objects to be inserted.
 @return true if this <code>List</code> has been modified through the insertion, false
 otherwise (i.e. if the passed collection was empty).
 @throws UnsupportedOperationException
 if adding to this <code>List</code> is not supported.
 @throws ClassCastException
 if the class of an object is inappropriate for this
 <code>List</code>.
 @throws IllegalArgumentException
 if an object cannot be added to this <code>List</code>.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location > size()</code>
 */
- (jboolean)addAllWithInt:(jint)location
   withJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Adds the objects in the specified collection to the end of this <code>List</code>.
 The
 objects are added in the order in which they are returned from the
 collection's iterator.
 @param collection
 the collection of objects.
 @return <code>true</code> if this <code>List</code> is modified, <code>false</code> otherwise
 (i.e. if the passed collection was empty).
 @throws UnsupportedOperationException
 if adding to this <code>List</code> is not supported.
 @throws ClassCastException
 if the class of an object is inappropriate for this
 <code>List</code>.
 @throws IllegalArgumentException
 if an object cannot be added to this <code>List</code>.
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Removes all elements from this <code>List</code>, leaving it empty.
 @throws UnsupportedOperationException
 if removing from this <code>List</code> is not supported.
 */
- (void)clear;

/*!
 @brief Tests whether this <code>List</code> contains the specified object.
 @param object
 the object to search for.
 @return <code>true</code> if object is an element of this <code>List</code>, <code>false</code>
 otherwise
 */
- (jboolean)containsWithId:(id)object;

/*!
 @brief Tests whether this <code>List</code> contains all objects contained in the
 specified collection.
 @param collection
 the collection of objects
 @return <code>true</code> if all objects in the specified collection are
 elements of this <code>List</code>, <code>false</code> otherwise.
 */
- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Compares the given object with the <code>List</code>, and returns true if they
 represent the <em>same</em> object using a class specific comparison.
 For
 <code>List</code>s, this means that they contain the same elements in exactly the same
 order.
 @param object
 the object to compare with this object.
 @return boolean <code>true</code> if the object is the same as this object,
 and <code>false</code> if it is different from this object.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns the element at the specified location in this <code>List</code>.
 @param location
 the index of the element to return.
 @return the element at the specified location.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location >= size()</code>
 */
- (id)getWithInt:(jint)location;

/*!
 @brief Returns the hash code for this <code>List</code>.
 It is calculated by taking each
 element' hashcode and its position in the <code>List</code> into account.
 @return the hash code of the <code>List</code>.
 */
- (NSUInteger)hash;

/*!
 @brief Searches this <code>List</code> for the specified object and returns the index of the
 first occurrence.
 @param object
 the object to search for.
 @return the index of the first occurrence of the object or -1 if the
 object was not found.
 */
- (jint)indexOfWithId:(id)object;

/*!
 @brief Returns whether this <code>List</code> contains no elements.
 @return <code>true</code> if this <code>List</code> has no elements, <code>false</code>
 otherwise.
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an iterator on the elements of this <code>List</code>.
 The elements are
 iterated in the same order as they occur in the <code>List</code>.
 @return an iterator on the elements of this <code>List</code>.
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Searches this <code>List</code> for the specified object and returns the index of the
 last occurrence.
 @param object
 the object to search for.
 @return the index of the last occurrence of the object, or -1 if the
 object was not found.
 */
- (jint)lastIndexOfWithId:(id)object;

/*!
 @brief Returns a <code>List</code> iterator on the elements of this <code>List</code>.
 The elements are
 iterated in the same order that they occur in the <code>List</code>.
 @return a <code>List</code> iterator on the elements of this <code>List</code>
 */
- (id<JavaUtilListIterator>)listIterator;

/*!
 @brief Returns a list iterator on the elements of this <code>List</code>.
 The elements are
 iterated in the same order as they occur in the <code>List</code>. The iteration
 starts at the specified location.
 @param location
 the index at which to start the iteration.
 @return a list iterator on the elements of this <code>List</code>.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location > size()</code>
 */
- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)location;

/*!
 @brief Removes the object at the specified location from this <code>List</code>.
 @param location
 the index of the object to remove.
 @return the removed object.
 @throws UnsupportedOperationException
 if removing from this <code>List</code> is not supported.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location >= size()</code>
 */
- (id)removeWithInt:(jint)location;

/*!
 @brief Removes the first occurrence of the specified object from this <code>List</code>.
 @param object
 the object to remove.
 @return true if this <code>List</code> was modified by this operation, false
 otherwise.
 @throws UnsupportedOperationException
 if removing from this <code>List</code> is not supported.
 */
- (jboolean)removeWithId:(id)object;

/*!
 @brief Removes all occurrences in this <code>List</code> of each object in the specified
 collection.
 @param collection
 the collection of objects to remove.
 @return <code>true</code> if this <code>List</code> is modified, <code>false</code> otherwise.
 @throws UnsupportedOperationException
 if removing from this <code>List</code> is not supported.
 */
- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Removes all objects from this <code>List</code> that are not contained in the
 specified collection.
 @param collection
 the collection of objects to retain.
 @return <code>true</code> if this <code>List</code> is modified, <code>false</code> otherwise.
 @throws UnsupportedOperationException
 if removing from this <code>List</code> is not supported.
 */
- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Replaces the element at the specified location in this <code>List</code> with the
 specified object.
 This operation does not change the size of the <code>List</code>.
 @param location
 the index at which to put the specified object.
 @param object
 the object to insert.
 @return the previous element at the index.
 @throws UnsupportedOperationException
 if replacing elements in this <code>List</code> is not supported.
 @throws ClassCastException
 if the class of an object is inappropriate for this
 <code>List</code>.
 @throws IllegalArgumentException
 if an object cannot be added to this <code>List</code>.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location >= size()</code>
 */
- (id)setWithInt:(jint)location
          withId:(id)object;

/*!
 @brief Returns the number of elements in this <code>List</code>.
 @return the number of elements in this <code>List</code>.
 */
- (jint)size;

/*!
 @brief Returns a <code>List</code> of the specified portion of this <code>List</code> from the given start
 index to the end index minus one.
 The returned <code>List</code> is backed by this
 <code>List</code> so changes to it are reflected by the other.
 @param start
 the index at which to start the sublist.
 @param end
 the index one past the end of the sublist.
 @return a list of a portion of this <code>List</code>.
 @throws IndexOutOfBoundsException
 if <code>start < 0, start > end</code> or <code>end >
 size()</code>
 */
- (id<JavaUtilList>)subListWithInt:(jint)start
                           withInt:(jint)end;

/*!
 @brief Returns an array containing all elements contained in this <code>List</code>.
 @return an array of the elements from this <code>List</code>.
 */
- (IOSObjectArray *)toArray;

/*!
 @brief Returns an array containing all elements contained in this <code>List</code>.
 If the
 specified array is large enough to hold the elements, the specified array
 is used, otherwise an array of the same type is created. If the specified
 array is used and is larger than this <code>List</code>, the array element following
 the collection elements is set to null.
 @param array
 the array.
 @return an array of the elements from this <code>List</code>.
 @throws ArrayStoreException
 if the type of an element in this <code>List</code> cannot be stored
 in the type of the specified array.
 */
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilList)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilList)

#endif // _JavaUtilList_H_
