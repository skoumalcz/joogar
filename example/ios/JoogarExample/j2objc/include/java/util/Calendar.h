//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Calendar.java
//

#ifndef _JavaUtilCalendar_H_
#define _JavaUtilCalendar_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"

@class IOSBooleanArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol JavaUtilMap;

#define JavaUtilCalendar_JANUARY 0
#define JavaUtilCalendar_FEBRUARY 1
#define JavaUtilCalendar_MARCH 2
#define JavaUtilCalendar_APRIL 3
#define JavaUtilCalendar_MAY 4
#define JavaUtilCalendar_JUNE 5
#define JavaUtilCalendar_JULY 6
#define JavaUtilCalendar_AUGUST 7
#define JavaUtilCalendar_SEPTEMBER 8
#define JavaUtilCalendar_OCTOBER 9
#define JavaUtilCalendar_NOVEMBER 10
#define JavaUtilCalendar_DECEMBER 11
#define JavaUtilCalendar_UNDECIMBER 12
#define JavaUtilCalendar_SUNDAY 1
#define JavaUtilCalendar_MONDAY 2
#define JavaUtilCalendar_TUESDAY 3
#define JavaUtilCalendar_WEDNESDAY 4
#define JavaUtilCalendar_THURSDAY 5
#define JavaUtilCalendar_FRIDAY 6
#define JavaUtilCalendar_SATURDAY 7
#define JavaUtilCalendar_ERA 0
#define JavaUtilCalendar_YEAR 1
#define JavaUtilCalendar_MONTH 2
#define JavaUtilCalendar_WEEK_OF_YEAR 3
#define JavaUtilCalendar_WEEK_OF_MONTH 4
#define JavaUtilCalendar_DATE 5
#define JavaUtilCalendar_DAY_OF_MONTH 5
#define JavaUtilCalendar_DAY_OF_YEAR 6
#define JavaUtilCalendar_DAY_OF_WEEK 7
#define JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH 8
#define JavaUtilCalendar_AM_PM 9
#define JavaUtilCalendar_HOUR 10
#define JavaUtilCalendar_HOUR_OF_DAY 11
#define JavaUtilCalendar_MINUTE 12
#define JavaUtilCalendar_SECOND 13
#define JavaUtilCalendar_MILLISECOND 14
#define JavaUtilCalendar_ZONE_OFFSET 15
#define JavaUtilCalendar_DST_OFFSET 16
#define JavaUtilCalendar_FIELD_COUNT 17
#define JavaUtilCalendar_AM 0
#define JavaUtilCalendar_PM 1
#define JavaUtilCalendar_ALL_STYLES 0
#define JavaUtilCalendar_SHORT 1
#define JavaUtilCalendar_LONG 2

/*!
 @brief <code>Calendar</code> is an abstract base class for converting between a
 <code>Date</code> object and a set of integer fields such as
 <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>,
 <code>HOUR</code>, and so on.
 (A <code>Date</code> object represents a
 specific instant in time with millisecond precision. See <code>Date</code> for
 information about the <code>Date</code> class.)
 <p>
 Subclasses of <code>Calendar</code> interpret a <code>Date</code>
 according to the rules of a specific calendar system.
 <p>
 Like other locale-sensitive classes, <code>Calendar</code> provides a class
 method, <code>getInstance</code>, for getting a default instance of
 this class for general use. <code>Calendar</code>'s <code>getInstance</code> method
 returns a calendar whose locale is based on system settings and whose time fields
 have been initialized with the current date and time: <blockquote>
 @code
Calendar rightNow = Calendar.getInstance()
@endcode
 </blockquote>
 <p>
 A <code>Calendar</code> object can produce all the time field values needed
 to implement the date-time formatting for a particular language and calendar
 style (for example, Japanese-Gregorian, Japanese-Traditional).
 <code>Calendar</code> defines the range of values returned by certain
 fields, as well as their meaning. For example, the first month of the year
 has value <code>MONTH</code> == <code>JANUARY</code> for all calendars.
 Other values are defined by the concrete subclass, such as <code>ERA</code>
 and <code>YEAR</code>. See individual field documentation and subclass
 documentation for details.
 <p>
 When a <code>Calendar</code> is <em>lenient</em>, it accepts a wider
 range of field values than it produces. For example, a lenient
 <code>GregorianCalendar</code> interprets <code>MONTH</code> ==
 <code>JANUARY</code>, <code>DAY_OF_MONTH</code> == 32 as February 1. A
 non-lenient <code>GregorianCalendar</code> throws an exception when given
 out-of-range field settings. When calendars recompute field values for return
 by <code>get()</code>, they normalize them. For example, a
 <code>GregorianCalendar</code> always produces <code>DAY_OF_MONTH</code>
 values between 1 and the length of the month.
 <p>
 <code>Calendar</code> defines a locale-specific seven day week using two
 parameters: the first day of the week and the minimal days in first week
 (from 1 to 7). These numbers are taken from the locale resource data when a
 <code>Calendar</code> is constructed. They may also be specified explicitly
 through the API.
 <p>
 When setting or getting the <code>WEEK_OF_MONTH</code> or
 <code>WEEK_OF_YEAR</code> fields, <code>Calendar</code> must determine
 the first week of the month or year as a reference point. The first week of a
 month or year is defined as the earliest seven day period beginning on
 <code>getFirstDayOfWeek()</code> and containing at least
 <code>getMinimalDaysInFirstWeek()</code> days of that month or year. Weeks
 numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow
 it. Note that the normalized numbering returned by <code>get()</code> may
 be different. For example, a specific <code>Calendar</code> subclass may
 designate the week before week 1 of a year as week <em>n</em> of the
 previous year.
 <p>
 When computing a <code>Date</code> from time fields, two special
 circumstances may arise: there may be insufficient information to compute the
 <code>Date</code> (such as only year and month but no day in the month), or
 there may be inconsistent information (such as "Tuesday, July 15, 1996" --
 July 15, 1996 is actually a Monday).
 <p>
 <strong>Insufficient information.</strong> The calendar will use default
 information to specify the missing fields. This may vary by calendar; for the
 Gregorian calendar, the default for a field is the same as that of the start
 of the epoch: i.e., YEAR = 1970, MONTH = JANUARY, DATE = 1, etc.
 <p>
 <strong>Inconsistent information.</strong> If fields conflict, the calendar
 will give preference to fields set more recently. For example, when
 determining the day, the calendar will look for one of the following
 combinations of fields. The most recent combination, as determined by the
 most recently set single field, will be used.
 <blockquote>
 @code

  MONTH + DAY_OF_MONTH
  MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
  MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
  DAY_OF_YEAR
  
@endcode
 </blockquote>
 For the time of day:
 <blockquote>
 @code

  HOUR_OF_DAY
  
@endcode
 </blockquote>
 <p>
 <strong>Note:</strong> There are certain possible ambiguities in
 interpretation of certain singular times, which are resolved in the following
 ways:
 <ol>
 <li> 24:00:00 "belongs" to the following day. That is, 23:59 on Dec 31, 1969
 &lt; 24:00 on Jan 1, 1970 &lt; 24:01:00 on Jan 1, 1970 form a sequence of
 three consecutive minutes in time.
 <li> Although historically not precise, midnight also belongs to "am", and
 noon belongs to "pm", so on the same day, we have 12:00 am (midnight) &lt; 12:01 am,
 and 12:00 pm (noon) &lt; 12:01 pm
 </ol>
 <p>
 The date or time format strings are not part of the definition of a calendar,
 as those must be modifiable or overridable by the user at runtime. Use
 <code>java.text.DateFormat</code> to format dates.
 <p>
 <strong>Field manipulation methods</strong>
 <p>
 <code>Calendar</code> fields can be changed using three methods:
 <code>set()</code>, <code>add()</code>, and <code>roll()</code>.
 <p>
 <strong><code>set(f, value)</code></strong> changes field <code>f</code>
 to <code>value</code>. In addition, it sets an internal member variable to
 indicate that field <code>f</code> has been changed. Although field
 <code>f</code> is changed immediately, the calendar's milliseconds is not
 recomputed until the next call to <code>get()</code>,
 <code>getTime()</code>, or <code>getTimeInMillis()</code> is made. Thus,
 multiple calls to <code>set()</code> do not trigger multiple, unnecessary
 computations. As a result of changing a field using <code>set()</code>,
 other fields may also change, depending on the field, the field value, and
 the calendar system. In addition, <code>get(f)</code> will not necessarily
 return <code>value</code> after the fields have been recomputed. The
 specifics are determined by the concrete calendar class.
 <p>
 <em>Example</em>: Consider a <code>GregorianCalendar</code> originally
 set to August 31, 1999. Calling <code>set(Calendar.MONTH,
 Calendar.SEPTEMBER)</code>
 sets the calendar to September 31, 1999. This is a temporary internal
 representation that resolves to October 1, 1999 if <code>getTime()</code>is
 then called. However, a call to <code>set(Calendar.DAY_OF_MONTH, 30)</code>
 before the call to <code>getTime()</code> sets the calendar to September
 30, 1999, since no recomputation occurs after <code>set()</code> itself.
 <p>
 <strong><code>add(f, delta)</code></strong> adds <code>delta</code> to
 field <code>f</code>. This is equivalent to calling <code>set(f,
 get(f) + delta)</code>
 with two adjustments:
 <blockquote>
 <p>
 <strong>Add rule 1</strong>. The value of field <code>f</code> after the
 call minus the value of field <code>f</code> before the call is
 <code>delta</code>, modulo any overflow that has occurred in field
 <code>f</code>. Overflow occurs when a field value exceeds its range and,
 as a result, the next larger field is incremented or decremented and the
 field value is adjusted back into its range.
 <p>
 <strong>Add rule 2</strong>. If a smaller field is expected to be invariant,
 but &nbsp; it is impossible for it to be equal to its prior value because of
 changes in its minimum or maximum after field <code>f</code> is changed,
 then its value is adjusted to be as close as possible to its expected value.
 A smaller field represents a smaller unit of time. <code>HOUR</code> is a
 smaller field than <code>DAY_OF_MONTH</code>. No adjustment is made to
 smaller fields that are not expected to be invariant. The calendar system
 determines what fields are expected to be invariant.
 </blockquote>
 <p>
 In addition, unlike <code>set()</code>, <code>add()</code> forces an
 immediate recomputation of the calendar's milliseconds and all fields.
 <p>
 <em>Example</em>: Consider a <code>GregorianCalendar</code> originally
 set to August 31, 1999. Calling <code>add(Calendar.MONTH, 13)</code> sets
 the calendar to September 30, 2000. <strong>Add rule 1</strong> sets the
 <code>MONTH</code> field to September, since adding 13 months to August
 gives September of the next year. Since <code>DAY_OF_MONTH</code> cannot be
 31 in September in a <code>GregorianCalendar</code>, <strong>add rule 2</strong>
 sets the <code>DAY_OF_MONTH</code> to 30, the closest possible value.
 Although it is a smaller field, <code>DAY_OF_WEEK</code> is not adjusted by
 rule 2, since it is expected to change when the month changes in a
 <code>GregorianCalendar</code>.
 <p>
 <strong><code>roll(f, delta)</code></strong> adds <code>delta</code> to
 field <code>f</code> without changing larger fields. This is equivalent to
 calling <code>add(f, delta)</code> with the following adjustment:
 <blockquote>
 <p>
 <strong>Roll rule</strong>. Larger fields are unchanged after the call. A
 larger field represents a larger unit of time. <code>DAY_OF_MONTH</code> is
 a larger field than <code>HOUR</code>.
 </blockquote>
 <p>
 <em>Example</em>: Consider a <code>GregorianCalendar</code> originally
 set to August 31, 1999. Calling <code>roll(Calendar.MONTH,
 8)</code> sets
 the calendar to April 30, <strong>1999</strong>. Add rule 1 sets the
 <code>MONTH</code> field to April. Using a <code>GregorianCalendar</code>,
 the <code>DAY_OF_MONTH</code> cannot be 31 in the month April. Add rule 2
 sets it to the closest possible value, 30. Finally, the <strong>roll rule</strong>
 maintains the <code>YEAR</code> field value of 1999.
 <p>
 <em>Example</em>: Consider a <code>GregorianCalendar</code> originally
 set to Sunday June 6, 1999. Calling
 <code>roll(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to Tuesday
 June 1, 1999, whereas calling <code>add(Calendar.WEEK_OF_MONTH, -1)</code>
 sets the calendar to Sunday May 30, 1999. This is because the roll rule
 imposes an additional constraint: The <code>MONTH</code> must not change
 when the <code>WEEK_OF_MONTH</code> is rolled. Taken together with add rule
 1, the resultant date must be between Tuesday June 1 and Saturday June 5.
 According to add rule 2, the <code>DAY_OF_WEEK</code>, an invariant when
 changing the <code>WEEK_OF_MONTH</code>, is set to Tuesday, the closest
 possible value to Sunday (where Sunday is the first day of the week).
 <p>
 <strong>Usage model</strong>. To motivate the behavior of <code>add()</code>
 and <code>roll()</code>, consider a user interface component with
 increment and decrement buttons for the month, day, and year, and an
 underlying <code>GregorianCalendar</code>. If the interface reads January
 31, 1999 and the user presses the month increment button, what should it
 read? If the underlying implementation uses <code>set()</code>, it might
 read March 3, 1999. A better result would be February 28, 1999. Furthermore,
 if the user presses the month increment button again, it should read March
 31, 1999, not March 28, 1999. By saving the original date and using either
 <code>add()</code> or <code>roll()</code>, depending on whether larger
 fields should be affected, the user interface can behave as most users will
 intuitively expect.
 <p>
 <b>Note:</b> You should always use <code>roll</code> and <code>add</code> rather than
 attempting to perform arithmetic operations directly on the fields of a
 <tt>Calendar</tt>. It is quite possible for <tt>Calendar</tt> subclasses
 to have fields with non-linear behavior, for example missing months or days
 during non-leap years. The subclasses' <tt>add</tt> and <tt>roll</tt>
 methods will take this into account, while simple arithmetic manipulations
 may give invalid results.
 */
@interface JavaUtilCalendar : NSObject < JavaIoSerializable, NSCopying, JavaLangComparable > {
 @public
  /*!
   @brief True iff the values in <code>fields[]</code> correspond to <code>time</code>.
   Despite the name, this
 is effectively "are the values in fields[] up-to-date?" --- <code>fields[]</code> may contain
 non-zero values and <code>isSet[]</code> may contain <code>true</code> values even when
 <code>areFieldsSet</code> is false.
 Accessing the fields via <code>get</code> will ensure the fields are up-to-date.
   */
  jboolean areFieldsSet_;
  /*!
   @brief Contains broken-down field values for the current value of <code>time</code> if
 <code>areFieldsSet</code> is true, or stale data corresponding to some previous value otherwise.
   Accessing the fields via <code>get</code> will ensure the fields are up-to-date.
 The array length is always <code>FIELD_COUNT</code>.
   */
  IOSIntArray *fields_;
  /*!
   @brief Whether the corresponding element in <code>field[]</code> has been set.
   Initially, these are all
 false. The first time the fields are computed, these are set to true and remain set even if
 the data becomes stale: you <i>must</i> check <code>areFieldsSet</code> if you want to know
 whether the value is up-to-date.
 Note that <code>isSet</code> is <i>not</i> a safe alternative to accessing this array directly,
 and will likewise return stale data!
 The array length is always <code>FIELD_COUNT</code>.
   */
  IOSBooleanArray *isSet_;
  /*!
   @brief Whether <code>time</code> corresponds to the values in <code>fields[]</code>.
   If false, <code>time</code>
 is out-of-date with respect to changes <code>fields[]</code>.
 Accessing the time via <code>getTimeInMillis</code> will always return the correct value.
   */
  jboolean isTimeSet_;
  /*!
   @brief A time in milliseconds since January 1, 1970.
   See <code>isTimeSet</code>.
 Accessing the time via <code>getTimeInMillis</code> will always return the correct value.
   */
  jlong time_;
  jint lastTimeFieldSet_;
  jint lastDateFieldSet_;
}

#pragma mark Public

/*!
 @brief Adds the given amount to a <code>Calendar</code> field.
 @param field
 the <code>Calendar</code> field to modify.
 @param value
 the amount to add to the field.
 @throws IllegalArgumentException
 if <code>field</code> is <code>DST_OFFSET</code> or <code>ZONE_OFFSET</code>
 .
 */
- (void)addWithInt:(jint)field
           withInt:(jint)value;

/*!
 @brief Returns whether the <code>Date</code> represented by this <code>Calendar</code> instance is after the <code>Date</code>
 represented by the parameter.
 The comparison is not dependent on the time
 zones of the <code>Calendar</code>.
 @param calendar
 the <code>Calendar</code> instance to compare.
 @return <code>true</code> when this Calendar is after calendar, <code>false</code> otherwise.
 @throws IllegalArgumentException
 if the time is not set and the time cannot be computed
 from the current field values.
 */
- (jboolean)afterWithId:(id)calendar;

/*!
 @brief Returns whether the <code>Date</code> represented by this <code>Calendar</code> instance is before the
 <code>Date</code> represented by the parameter.
 The comparison is not dependent on the
 time zones of the <code>Calendar</code>.
 @param calendar
 the <code>Calendar</code> instance to compare.
 @return <code>true</code> when this Calendar is before calendar, <code>false</code> otherwise.
 @throws IllegalArgumentException
 if the time is not set and the time cannot be computed
 from the current field values.
 */
- (jboolean)beforeWithId:(id)calendar;

/*!
 @brief Clears the values of all the time fields, marking them all unset and assigning
 them all a value of zero.
 The actual field values will be determined the next
 time the fields are accessed.
 */
- (void)clear;

/*!
 @brief Clears the value in the given time field, marking it unset and assigning
 it a value of zero.
 The actual field value will be determined the next
 time the field is accessed.
 */
- (void)clearWithInt:(jint)field;

/*!
 @brief Returns a shallow copy of this <code>Calendar</code> with the same properties.
 */
- (id)clone;

/*!
 @brief Compares the time represented by this <code>Calendar</code> to that represented by the given
 <code>Calendar</code>.
 @return 0 if the times of the two <code>Calendar</code>s are equal, -1 if the time of
 this <code>Calendar</code> is before the other one, 1 if the time of this
 <code>Calendar</code> is after the other one.
 @throws NullPointerException
 if the argument is null.
 @throws IllegalArgumentException
 if the argument does not include a valid time
 value.
 */
- (jint)compareToWithId:(JavaUtilCalendar *)anotherCalendar;

/*!
 @brief Compares the given object to this <code>Calendar</code> and returns whether they are
 equal.
 The object must be an instance of <code>Calendar</code> and have the same
 properties.
 @return <code>true</code> if the given object is equal to this <code>Calendar</code>, <code>false</code>
 otherwise.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns the value of the given field after computing the field values by
 calling <code>complete()</code> first.
 @throws IllegalArgumentException
 if the fields are not set, the time is not set, and the
 time cannot be computed from the current field values.
 @throws ArrayIndexOutOfBoundsException
 if the field is not inside the range of possible fields.
 The range is starting at 0 up to <code>FIELD_COUNT</code>.
 */
- (jint)getWithInt:(jint)field;

/*!
 @brief Returns the maximum value of the given field for the current date.
 For example, the maximum number of days in the current month.
 */
- (jint)getActualMaximumWithInt:(jint)field;

/*!
 @brief Returns the minimum value of the given field for the current date.
 */
- (jint)getActualMinimumWithInt:(jint)field;

/*!
 @brief Returns an array of locales for which custom <code>Calendar</code> instances
 are available.
 <p>Note that Android does not support user-supplied locale service providers.
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief Returns a human-readable string for the value of <code>field</code>
 using the given style and locale.
 If no string is available, returns null.
 The value is retrieved by invoking <code>get(field)</code>.
 <p>For example, <code>getDisplayName(MONTH, SHORT, Locale.US)</code> will return "Jan"
 while <code>getDisplayName(MONTH, LONG, Locale.US)</code> will return "January".
 @param field the field
 @param style <code>SHORT</code> or <code>LONG</code>
 @param locale the locale
 @return the display name, or null
 @throws NullPointerException if <code>locale == null</code>
 @throws IllegalArgumentException if <code>field</code> or <code>style</code> is invalid
 @since 1.6
 */
- (NSString *)getDisplayNameWithInt:(jint)field
                            withInt:(jint)style
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a map of human-readable strings to corresponding values,
 for the given field, style, and locale.
 Returns null if no strings are available.
 <p>For example, <code>getDisplayNames(MONTH, ALL_STYLES, Locale.US)</code> would
 contain mappings from "Jan" and "January" to <code>JANUARY</code>, and so on.
 @param field the field
 @param style <code>SHORT</code>, <code>LONG</code>, or <code>ALL_STYLES</code>
 @param locale the locale
 @return the display name, or null
 @throws NullPointerException if <code>locale == null</code>
 @throws IllegalArgumentException if <code>field</code> or <code>style</code> is invalid
 @since 1.6
 */
- (id<JavaUtilMap>)getDisplayNamesWithInt:(jint)field
                                  withInt:(jint)style
                       withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns the first day of the week for this <code>Calendar</code>.
 */
- (jint)getFirstDayOfWeek;

/*!
 @brief Returns the greatest minimum value of the given field.
 This is the
 biggest value that <code>getActualMinimum</code> can return for any possible
 time.
 */
- (jint)getGreatestMinimumWithInt:(jint)field;

/*!
 @brief Constructs a new instance of the <code>Calendar</code> subclass appropriate for the
 default <code>Locale</code> and default <code>TimeZone</code>, set to the current date and time.
 */
+ (JavaUtilCalendar *)getInstance;

/*!
 @brief Constructs a new instance of the <code>Calendar</code> subclass appropriate for the
 given <code>Locale</code> and default <code>TimeZone</code>, set to the current date and time.
 */
+ (JavaUtilCalendar *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Constructs a new instance of the <code>Calendar</code> subclass appropriate for the
 default <code>Locale</code> and given <code>TimeZone</code>, set to the current date and time.
 */
+ (JavaUtilCalendar *)getInstanceWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone;

/*!
 @brief Constructs a new instance of the <code>Calendar</code> subclass appropriate for the
 given <code>Locale</code> and given <code>TimeZone</code>, set to the current date and time.
 */
+ (JavaUtilCalendar *)getInstanceWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                                   withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns the smallest maximum value of the given field.
 This is the
 smallest value that <code>getActualMaximum()</code> can return for any
 possible time.
 */
- (jint)getLeastMaximumWithInt:(jint)field;

/*!
 @brief Returns the greatest maximum value of the given field.
 This returns the
 biggest value that <code>get</code> can return for the given field.
 */
- (jint)getMaximumWithInt:(jint)field;

/*!
 @brief Returns the minimal days in the first week of the year.
 */
- (jint)getMinimalDaysInFirstWeek;

/*!
 @brief Returns the smallest minimum value of the given field. this returns the
 smallest value that <code>get</code> can return for the given field.
 */
- (jint)getMinimumWithInt:(jint)field;

/*!
 @brief Returns the time of this <code>Calendar</code> as a <code>Date</code> object.
 @throws IllegalArgumentException
 if the time is not set and the time cannot be computed
 from the current field values.
 */
- (JavaUtilDate *)getTime;

/*!
 @brief Returns the time represented by this <code>Calendar</code>, recomputing the time from its
 fields if necessary.
 @throws IllegalArgumentException
 if the time is not set and the time cannot be computed
 from the current field values.
 */
- (jlong)getTimeInMillis;

/*!
 @brief Returns the time zone used by this <code>Calendar</code>.
 */
- (JavaUtilTimeZone *)getTimeZone;

- (NSUInteger)hash;

/*!
 @brief Tests whether this <code>Calendar</code> accepts field values which are outside the valid
 range for the field.
 */
- (jboolean)isLenient;

/*!
 @brief Tests whether the given field is set.
 Note that the interpretation of "is set" is
 somewhat technical. In particular, it does <i>not</i> mean that the field's value is up
 to date. If you want to know whether a field contains an up-to-date value, you must also
 check <code>areFieldsSet</code>, making this method somewhat useless unless you're a subclass,
 in which case you can access the <code>isSet</code> array directly.
 <p>
 A field remains "set" from the first time its value is computed until it's cleared by one
 of the <code>clear</code> methods. Thus "set" does not mean "valid". You probably want to call
 <code>get</code> -- which will update fields as necessary -- rather than try to make use of
 this method.
 */
- (jboolean)isSetWithInt:(jint)field;

/*!
 @brief Increment or decrement the given field and wrap the value of the
 field when it goes beyond the maximum or minimum value for the current
 date.
 Other fields will be adjusted as required to maintain a consistent
 date.
 */
- (void)rollWithInt:(jint)field
        withBoolean:(jboolean)increment;

/*!
 @brief Adds the given amount to the given field and wraps the value of
 the field when it goes beyond the maximum or minimum value for the
 current date.
 Other fields will be adjusted as required to maintain a
 consistent date.
 */
- (void)rollWithInt:(jint)field
            withInt:(jint)value;

/*!
 @brief Sets the given field to the given value.
 */
- (void)setWithInt:(jint)field
           withInt:(jint)value;

/*!
 @brief Sets the year, month, and day of the month fields.
 Other fields are not changed; call <code>clear</code> first if this is not desired.
 The month value is 0-based, so it may be clearer to use a constant like <code>JANUARY</code>.
 */
- (void)setWithInt:(jint)year
           withInt:(jint)month
           withInt:(jint)day;

/*!
 @brief Sets the year, month, day of the month, hour of day, and minute fields.
 Other fields are not changed; call <code>clear</code> first if this is not desired.
 The month value is 0-based, so it may be clearer to use a constant like <code>JANUARY</code>.
 */
- (void)setWithInt:(jint)year
           withInt:(jint)month
           withInt:(jint)day
           withInt:(jint)hourOfDay
           withInt:(jint)minute;

/*!
 @brief Sets the year, month, day of the month, hour of day, minute, and second fields.
 Other fields are not changed; call <code>clear</code> first if this is not desired.
 The month value is 0-based, so it may be clearer to use a constant like <code>JANUARY</code>.
 */
- (void)setWithInt:(jint)year
           withInt:(jint)month
           withInt:(jint)day
           withInt:(jint)hourOfDay
           withInt:(jint)minute
           withInt:(jint)second;

/*!
 @brief Sets the first day of the week for this <code>Calendar</code>.
 The value should be a day of the week such as <code>MONDAY</code>.
 */
- (void)setFirstDayOfWeekWithInt:(jint)value;

/*!
 @brief Sets whether this <code>Calendar</code> accepts field values which are outside the valid
 range for the field.
 */
- (void)setLenientWithBoolean:(jboolean)value;

/*!
 @brief Sets the minimal days in the first week of the year.
 */
- (void)setMinimalDaysInFirstWeekWithInt:(jint)value;

/*!
 @brief Sets the time of this <code>Calendar</code>.
 */
- (void)setTimeWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Sets the time of this <code>Calendar</code> to the given Unix time.
 See <code>Date</code> for more
 about what this means.
 */
- (void)setTimeInMillisWithLong:(jlong)milliseconds;

/*!
 @brief Sets the <code>TimeZone</code> used by this Calendar.
 */
- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone;

/*!
 @brief Returns a string representation of this <code>Calendar</code>, showing which fields are set.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a <code>Calendar</code> instance using the default <code>TimeZone</code> and <code>Locale</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a <code>Calendar</code> instance using the given <code>TimeZone</code> and <code>Locale</code>.
 */
- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                      withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Computes the time from the fields if the time has not already been set.
 Computes the fields from the time if the fields are not already set.
 @throws IllegalArgumentException
 if the time is not set and the time cannot be computed
 from the current field values.
 */
- (void)complete;

/*!
 @brief Computes the <code>Calendar</code> fields from <code>time</code>.
 */
- (void)computeFields;

/*!
 @brief Computes <code>time</code> from the Calendar fields.
 @throws IllegalArgumentException
 if the time cannot be computed from the current field
 values.
 */
- (void)computeTime;

/*!
 @brief Returns the value of the given field without recomputing.
 */
- (jint)internalGetWithInt:(jint)field;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone;

@end

J2OBJC_STATIC_INIT(JavaUtilCalendar)

J2OBJC_FIELD_SETTER(JavaUtilCalendar, fields_, IOSIntArray *)
J2OBJC_FIELD_SETTER(JavaUtilCalendar, isSet_, IOSBooleanArray *)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, JANUARY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, FEBRUARY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, MARCH, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, APRIL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, MAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, JUNE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, JULY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, AUGUST, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, SEPTEMBER, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, OCTOBER, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, NOVEMBER, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DECEMBER, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, UNDECIMBER, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, SUNDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, MONDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, TUESDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, WEDNESDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, THURSDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, FRIDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, SATURDAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, ERA, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, MONTH, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, WEEK_OF_YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, WEEK_OF_MONTH, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DATE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DAY_OF_MONTH, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DAY_OF_YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DAY_OF_WEEK, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DAY_OF_WEEK_IN_MONTH, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, AM_PM, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, HOUR, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, HOUR_OF_DAY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, MINUTE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, SECOND, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, MILLISECOND, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, ZONE_OFFSET, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, DST_OFFSET, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, FIELD_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, AM, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, PM, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, ALL_STYLES, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, SHORT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilCalendar, LONG, jint)

FOUNDATION_EXPORT void JavaUtilCalendar_init(JavaUtilCalendar *self);

FOUNDATION_EXPORT void JavaUtilCalendar_initWithJavaUtilTimeZone_(JavaUtilCalendar *self, JavaUtilTimeZone *timezone);

FOUNDATION_EXPORT void JavaUtilCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilCalendar *self, JavaUtilTimeZone *timezone, JavaUtilLocale *locale);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilCalendar_getAvailableLocales();

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstance();

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone *timezone);

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *timezone, JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCalendar)

#endif // _JavaUtilCalendar_H_
