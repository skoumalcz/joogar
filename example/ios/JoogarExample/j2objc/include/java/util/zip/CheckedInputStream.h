//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/zip/CheckedInputStream.java
//

#ifndef _JavaUtilZipCheckedInputStream_H_
#define _JavaUtilZipCheckedInputStream_H_

#include "J2ObjC_header.h"
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@protocol JavaUtilZipChecksum;

/*!
 @brief The <code>CheckedInputStream</code> class is used to maintain a checksum at the
 same time as the data, on which the checksum is computed, is read from a
 stream.
 The purpose of this checksum is to establish data integrity,
 comparing the computed checksum against a published checksum value.
 */
@interface JavaUtilZipCheckedInputStream : JavaIoFilterInputStream

#pragma mark Public

/*!
 @brief Constructs a new <code>CheckedInputStream</code> on <code>InputStream</code>
 <code>is</code>.
 The checksum will be calculated using the algorithm
 implemented by <code>csum</code>.
 <p><strong>Warning:</strong> passing a null source creates an invalid
 <code>CheckedInputStream</code>. All operations on such a stream will fail.
 @param is
 the input stream to calculate checksum from.
 @param csum
 an entity implementing the checksum algorithm.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                  withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)csum;

/*!
 @brief Returns the checksum calculated on the stream read so far.
 */
- (id<JavaUtilZipChecksum>)getChecksum;

/*!
 @brief Reads one byte of data from the underlying input stream and updates the
 checksum with the byte data.
 @return <code>-1</code> at the end of the stream, a single byte value
 otherwise.
 @throws IOException
 if an <code>IOException</code> occurs.
 */
- (jint)read;

/*!
 @brief Reads up to <code>byteCount</code> bytes of data from the underlying input stream, storing it
 into <code>buffer</code>, starting at offset <code>byteOffset</code>.
 The checksum is
 updated with the bytes read.
 Returns the number of bytes actually read or <code>-1</code> if arrived at the
 end of the filtered stream while reading the data.
 @throws IOException
 if this stream is closed or some I/O error occurs.
 */
- (jint)readWithByteArray:(IOSByteArray *)buffer
                  withInt:(jint)byteOffset
                  withInt:(jint)byteCount;

/*!
 @brief Skip up to <code>byteCount</code> bytes of data on the underlying input
 stream.
 Any skipped bytes are added to the running checksum value.
 @param byteCount the number of bytes to skip.
 @throws IOException if this stream is closed or another I/O error occurs.
 @return the number of bytes skipped.
 */
- (jlong)skipWithLong:(jlong)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilZipCheckedInputStream)

FOUNDATION_EXPORT void JavaUtilZipCheckedInputStream_initWithJavaIoInputStream_withJavaUtilZipChecksum_(JavaUtilZipCheckedInputStream *self, JavaIoInputStream *is, id<JavaUtilZipChecksum> csum);

FOUNDATION_EXPORT JavaUtilZipCheckedInputStream *new_JavaUtilZipCheckedInputStream_initWithJavaIoInputStream_withJavaUtilZipChecksum_(JavaIoInputStream *is, id<JavaUtilZipChecksum> csum) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilZipCheckedInputStream)

#endif // _JavaUtilZipCheckedInputStream_H_
