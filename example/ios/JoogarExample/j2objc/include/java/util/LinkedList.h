//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/LinkedList.java
//

#ifndef _JavaUtilLinkedList_H_
#define _JavaUtilLinkedList_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractSequentialList.h"
#include "java/util/Deque.h"
#include "java/util/List.h"
#include "java/util/Queue.h"

@class IOSObjectArray;
@class JavaUtilLinkedList_Link;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;

/*!
 @brief LinkedList is an implementation of <code>List</code>, backed by a doubly-linked list.
 All optional operations including adding, removing, and replacing elements are supported.
 <p>All elements are permitted, including null.
 <p>This class is primarily useful if you need queue-like behavior. It may also be useful
 as a list if you expect your lists to contain zero or one element, but still require the
 ability to scale to slightly larger numbers of elements. In general, though, you should
 probably use <code>ArrayList</code> if you don't need the queue-like behavior.
 @since 1.2
 */
@interface JavaUtilLinkedList : JavaUtilAbstractSequentialList < JavaUtilList, JavaUtilDeque, JavaUtilQueue, NSCopying, JavaIoSerializable > {
 @public
  jint size_;
  JavaUtilLinkedList_Link *voidLink_;
}

#pragma mark Public

/*!
 @brief Constructs a new empty instance of <code>LinkedList</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a new instance of <code>LinkedList</code> that holds all of the
 elements contained in the specified <code>collection</code>.
 The order of the
 elements in this new <code>LinkedList</code> will be determined by the
 iteration order of <code>collection</code>.
 @param collection
 the collection of elements to add.
 */
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Adds the specified object at the end of this <code>LinkedList</code>.
 @param object
 the object to add.
 @return always true
 */
- (jboolean)addWithId:(id)object;

/*!
 @brief Inserts the specified object into this <code>LinkedList</code> at the
 specified location.
 The object is inserted before any previous element at
 the specified location. If the location is equal to the size of this
 <code>LinkedList</code>, the object is added at the end.
 @param location
 the index at which to insert.
 @param object
 the object to add.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location > size()</code>
 */
- (void)addWithInt:(jint)location
            withId:(id)object;

/*!
 @brief Adds the objects in the specified Collection to this <code>LinkedList</code>.
 @param collection
 the collection of objects.
 @return <code>true</code> if this <code>LinkedList</code> is modified,
 <code>false</code> otherwise.
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Inserts the objects in the specified collection at the specified location
 in this <code>LinkedList</code>.
 The objects are added in the order they are
 returned from the collection's iterator.
 @param location
 the index at which to insert.
 @param collection
 the collection of objects
 @return <code>true</code> if this <code>LinkedList</code> is modified,
 <code>false</code> otherwise.
 @throws ClassCastException
 if the class of an object is inappropriate for this list.
 @throws IllegalArgumentException
 if an object cannot be added to this list.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location > size()</code>
 */
- (jboolean)addAllWithInt:(jint)location
   withJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Adds the specified object at the beginning of this <code>LinkedList</code>.
 @param object
 the object to add.
 */
- (void)addFirstWithId:(id)object;

/*!
 @brief Adds the specified object at the end of this <code>LinkedList</code>.
 @param object
 the object to add.
 */
- (void)addLastWithId:(id)object;

/*!
 @brief Removes all elements from this <code>LinkedList</code>, leaving it empty.
 */
- (void)clear;

/*!
 @brief Returns a new <code>LinkedList</code> with the same elements and size as this
 <code>LinkedList</code>.
 @return a shallow copy of this <code>LinkedList</code>.
 */
- (id)clone;

/*!
 @brief Searches this <code>LinkedList</code> for the specified object.
 @param object
 the object to search for.
 @return <code>true</code> if <code>object</code> is an element of this
 <code>LinkedList</code>, <code>false</code> otherwise
 */
- (jboolean)containsWithId:(id)object;

/*!
 
 @since 1.6
 */
- (id<JavaUtilIterator>)descendingIterator;

- (id)element;

- (id)getWithInt:(jint)location;

/*!
 @brief Returns the first element in this <code>LinkedList</code>.
 @return the first element.
 @throws NoSuchElementException
 if this <code>LinkedList</code> is empty.
 */
- (id)getFirst;

/*!
 @brief Returns the last element in this <code>LinkedList</code>.
 @return the last element
 @throws NoSuchElementException
 if this <code>LinkedList</code> is empty
 */
- (id)getLast;

- (jint)indexOfWithId:(id)object;

/*!
 @brief Searches this <code>LinkedList</code> for the specified object and returns the
 index of the last occurrence.
 @param object
 the object to search for
 @return the index of the last occurrence of the object, or -1 if it was
 not found.
 */
- (jint)lastIndexOfWithId:(id)object;

/*!
 @brief Returns a ListIterator on the elements of this <code>LinkedList</code>.
 The
 elements are iterated in the same order that they occur in the
 <code>LinkedList</code>. The iteration starts at the specified location.
 @param location
 the index at which to start the iteration
 @return a ListIterator on the elements of this <code>LinkedList</code>
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location > size()</code>
 */
- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)location;

- (jboolean)offerWithId:(id)o;

/*!
 
 @since 1.6
 */
- (jboolean)offerFirstWithId:(id)e;

/*!
 
 @since 1.6
 */
- (jboolean)offerLastWithId:(id)e;

- (id)peek;

/*!
 
 @since 1.6
 */
- (id)peekFirst;

/*!
 
 @since 1.6
 */
- (id)peekLast;

- (id)poll;

/*!
 
 @since 1.6
 */
- (id)pollFirst;

/*!
 
 @since 1.6
 */
- (id)pollLast;

/*!
 
 @since 1.6
 */
- (id)pop;

/*!
 
 @since 1.6
 */
- (void)pushWithId:(id)e;

- (id)remove;

/*!
 @brief Removes the object at the specified location from this <code>LinkedList</code>.
 @param location
 the index of the object to remove
 @return the removed object
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location >= size()</code>
 */
- (id)removeWithInt:(jint)location;

- (jboolean)removeWithId:(id)object;

/*!
 @brief Removes the first object from this <code>LinkedList</code>.
 @return the removed object.
 @throws NoSuchElementException
 if this <code>LinkedList</code> is empty.
 */
- (id)removeFirst;

/*!
 
 @since 1.6
 */
- (jboolean)removeFirstOccurrenceWithId:(id)o;

/*!
 @brief Removes the last object from this <code>LinkedList</code>.
 @return the removed object.
 @throws NoSuchElementException
 if this <code>LinkedList</code> is empty.
 */
- (id)removeLast;

/*!
 
 @since 1.6
 */
- (jboolean)removeLastOccurrenceWithId:(id)o;

/*!
 @brief Replaces the element at the specified location in this <code>LinkedList</code>
 with the specified object.
 @param location
 the index at which to put the specified object.
 @param object
 the object to add.
 @return the previous element at the index.
 @throws ClassCastException
 if the class of an object is inappropriate for this list.
 @throws IllegalArgumentException
 if an object cannot be added to this list.
 @throws IndexOutOfBoundsException
 if <code>location < 0 || location >= size()</code>
 */
- (id)setWithInt:(jint)location
          withId:(id)object;

/*!
 @brief Returns the number of elements in this <code>LinkedList</code>.
 @return the number of elements in this <code>LinkedList</code>.
 */
- (jint)size;

/*!
 @brief Returns a new array containing all elements contained in this
 <code>LinkedList</code>.
 @return an array of the elements from this <code>LinkedList</code>.
 */
- (IOSObjectArray *)toArray;

/*!
 @brief Returns an array containing all elements contained in this
 <code>LinkedList</code>.
 If the specified array is large enough to hold the
 elements, the specified array is used, otherwise an array of the same
 type is created. If the specified array is used and is larger than this
 <code>LinkedList</code>, the array element following the collection elements
 is set to null.
 @param contents
 the array.
 @return an array of the elements from this <code>LinkedList</code>.
 @throws ArrayStoreException
 if the type of an element in this <code>LinkedList</code> cannot
 be stored in the type of the specified array.
 */
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents;

#pragma mark Protected

- (void)dealloc;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedList)

J2OBJC_FIELD_SETTER(JavaUtilLinkedList, voidLink_, JavaUtilLinkedList_Link *)

FOUNDATION_EXPORT void JavaUtilLinkedList_init(JavaUtilLinkedList *self);

FOUNDATION_EXPORT JavaUtilLinkedList *new_JavaUtilLinkedList_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilLinkedList_initWithJavaUtilCollection_(JavaUtilLinkedList *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaUtilLinkedList *new_JavaUtilLinkedList_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedList)

@interface JavaUtilLinkedList_Link : NSObject {
 @public
  id data_;
  __weak JavaUtilLinkedList_Link *previous_;
  JavaUtilLinkedList_Link *next_;
}

#pragma mark Package-Private

- (instancetype)initWithId:(id)o
withJavaUtilLinkedList_Link:(JavaUtilLinkedList_Link *)p
withJavaUtilLinkedList_Link:(JavaUtilLinkedList_Link *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedList_Link)

J2OBJC_FIELD_SETTER(JavaUtilLinkedList_Link, data_, id)
J2OBJC_FIELD_SETTER(JavaUtilLinkedList_Link, next_, JavaUtilLinkedList_Link *)

FOUNDATION_EXPORT void JavaUtilLinkedList_Link_initWithId_withJavaUtilLinkedList_Link_withJavaUtilLinkedList_Link_(JavaUtilLinkedList_Link *self, id o, JavaUtilLinkedList_Link *p, JavaUtilLinkedList_Link *n);

FOUNDATION_EXPORT JavaUtilLinkedList_Link *new_JavaUtilLinkedList_Link_initWithId_withJavaUtilLinkedList_Link_withJavaUtilLinkedList_Link_(id o, JavaUtilLinkedList_Link *p, JavaUtilLinkedList_Link *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedList_Link)

#endif // _JavaUtilLinkedList_H_
