//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/ArrayDeque.java
//

#ifndef _JavaUtilArrayDeque_H_
#define _JavaUtilArrayDeque_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Deque.h"

@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

/*!
 @brief Resizable-array implementation of the <code>Deque</code> interface.
 Array
 deques have no capacity restrictions; they grow as necessary to support
 usage.  They are not thread-safe; in the absence of external
 synchronization, they do not support concurrent access by multiple threads.
 Null elements are prohibited.  This class is likely to be faster than
 <code>Stack</code> when used as a stack, and faster than <code>LinkedList</code>
 when used as a queue.
 <p>Most <tt>ArrayDeque</tt> operations run in amortized constant time.
 Exceptions include <code>remove</code>, <code>removeFirstOccurrence</code>
 , <code>removeLastOccurrence</code>
 , <code>contains</code>, <code>iterator.remove()</code>
 , and the bulk operations, all of which run in linear
 time.
 <p>The iterators returned by this class's <tt>iterator</tt> method are
 <i>fail-fast</i>: If the deque is modified at any time after the iterator
 is created, in any way except through the iterator's own <tt>remove</tt>
 method, the iterator will generally throw a <code>ConcurrentModificationException</code>
 .  Thus, in the face of concurrent
 modification, the iterator fails quickly and cleanly, rather than risking
 arbitrary, non-deterministic behavior at an undetermined time in the
 future.
 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness: <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i>
 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the <code>Collection</code> and <code>Iterator</code>
  interfaces.
 @author Josh Bloch and Doug Lea
 @since 1.6
 */
@interface JavaUtilArrayDeque : JavaUtilAbstractCollection < JavaUtilDeque, NSCopying, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs an empty array deque with an initial capacity
 sufficient to hold 16 elements.
 */
- (instancetype)init;

/*!
 @brief Constructs a deque containing the elements of the specified
 collection, in the order they are returned by the collection's
 iterator.
 (The first element returned by the collection's
 iterator becomes the first element, or <i>front</i> of the
 deque.)
 @param c the collection whose elements are to be placed into the deque
 @throws NullPointerException if the specified collection is null
 */
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Constructs an empty array deque with an initial capacity
 sufficient to hold the specified number of elements.
 @param numElements  lower bound on initial capacity of the deque
 */
- (instancetype)initWithInt:(jint)numElements;

/*!
 @brief Inserts the specified element at the end of this deque.
 <p>This method is equivalent to <code>addLast</code>.
 @param e the element to add
 @return <tt>true</tt> (as specified by <code>Collection.add</code>)
 @throws NullPointerException if the specified element is null
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this deque.
 @param e the element to add
 @throws NullPointerException if the specified element is null
 */
- (void)addFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque.
 <p>This method is equivalent to <code>add</code>.
 @param e the element to add
 @throws NullPointerException if the specified element is null
 */
- (void)addLastWithId:(id)e;

/*!
 @brief Removes all of the elements from this deque.
 The deque will be empty after this call returns.
 */
- (void)clear;

/*!
 @brief Returns a copy of this deque.
 @return a copy of this deque
 */
- (JavaUtilArrayDeque *)clone;

/*!
 @brief Returns <tt>true</tt> if this deque contains the specified element.
 More formally, returns <tt>true</tt> if and only if this deque contains
 at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.
 @param o object to be checked for containment in this deque
 @return <tt>true</tt> if this deque contains the specified element
 */
- (jboolean)containsWithId:(id)o;

- (id<JavaUtilIterator>)descendingIterator;

/*!
 @brief Retrieves, but does not remove, the head of the queue represented by
 this deque.
 This method differs from <code>peek</code> only in
 that it throws an exception if this deque is empty.
 <p>This method is equivalent to <code>getFirst</code>.
 @return the head of the queue represented by this deque
 @throws NoSuchElementException
 */
- (id)element;

/*!
 @throws NoSuchElementException
 */
- (id)getFirst;

/*!
 @throws NoSuchElementException
 */
- (id)getLast;

/*!
 @brief Returns <tt>true</tt> if this deque contains no elements.
 @return <tt>true</tt> if this deque contains no elements
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an iterator over the elements in this deque.
 The elements
 will be ordered from first (head) to last (tail).  This is the same
 order that elements would be dequeued (via successive calls to
 <code>remove</code> or popped (via successive calls to <code>pop</code>).
 @return an iterator over the elements in this deque
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Inserts the specified element at the end of this deque.
 <p>This method is equivalent to <code>offerLast</code>.
 @param e the element to add
 @return <tt>true</tt> (as specified by <code>Queue.offer</code>)
 @throws NullPointerException if the specified element is null
 */
- (jboolean)offerWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this deque.
 @param e the element to add
 @return <tt>true</tt> (as specified by <code>Deque.offerFirst</code>)
 @throws NullPointerException if the specified element is null
 */
- (jboolean)offerFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque.
 @param e the element to add
 @return <tt>true</tt> (as specified by <code>Deque.offerLast</code>)
 @throws NullPointerException if the specified element is null
 */
- (jboolean)offerLastWithId:(id)e;

/*!
 @brief Retrieves, but does not remove, the head of the queue represented by
 this deque, or returns <tt>null</tt> if this deque is empty.
 <p>This method is equivalent to <code>peekFirst</code>.
 @return the head of the queue represented by this deque, or
 <tt>null</tt> if this deque is empty
 */
- (id)peek;

- (id)peekFirst;

- (id)peekLast;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 <tt>null</tt> if this deque is empty.
 <p>This method is equivalent to <code>pollFirst</code>.
 @return the head of the queue represented by this deque, or
 <tt>null</tt> if this deque is empty
 */
- (id)poll;

- (id)pollFirst;

- (id)pollLast;

/*!
 @brief Pops an element from the stack represented by this deque.
 In other
 words, removes and returns the first element of this deque.
 <p>This method is equivalent to <code>removeFirst()</code>.
 @return the element at the front of this deque (which is the top
 of the stack represented by this deque)
 @throws NoSuchElementException
 */
- (id)pop;

/*!
 @brief Pushes an element onto the stack represented by this deque.
 In other
 words, inserts the element at the front of this deque.
 <p>This method is equivalent to <code>addFirst</code>.
 @param e the element to push
 @throws NullPointerException if the specified element is null
 */
- (void)pushWithId:(id)e;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque.
 This method differs from <code>poll</code> only in that it throws an
 exception if this deque is empty.
 <p>This method is equivalent to <code>removeFirst</code>.
 @return the head of the queue represented by this deque
 @throws NoSuchElementException
 */
- (id)remove;

/*!
 @brief Removes a single instance of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element <tt>e</tt> such that
 <tt>o.equals(e)</tt> (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).
 <p>This method is equivalent to <code>removeFirstOccurrence</code>.
 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if this deque contained the specified element
 */
- (jboolean)removeWithId:(id)o;

/*!
 @throws NoSuchElementException
 */
- (id)removeFirst;

/*!
 @brief Removes the first occurrence of the specified element in this
 deque (when traversing the deque from head to tail).
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element <tt>e</tt> such that
 <tt>o.equals(e)</tt> (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).
 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if the deque contained the specified element
 */
- (jboolean)removeFirstOccurrenceWithId:(id)o;

/*!
 @throws NoSuchElementException
 */
- (id)removeLast;

/*!
 @brief Removes the last occurrence of the specified element in this
 deque (when traversing the deque from head to tail).
 If the deque does not contain the element, it is unchanged.
 More formally, removes the last element <tt>e</tt> such that
 <tt>o.equals(e)</tt> (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).
 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if the deque contained the specified element
 */
- (jboolean)removeLastOccurrenceWithId:(id)o;

/*!
 @brief Returns the number of elements in this deque.
 @return the number of elements in this deque
 */
- (jint)size;

/*!
 @brief Returns an array containing all of the elements in this deque
 in proper sequence (from first to last element).
 <p>The returned array will be "safe" in that no references to it are
 maintained by this deque.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.
 <p>This method acts as bridge between array-based and collection-based
 APIs.
 @return an array containing all of the elements in this deque
 */
- (IOSObjectArray *)toArray;

/*!
 @brief Returns an array containing all of the elements in this deque in
 proper sequence (from first to last element); the runtime type of the
 returned array is that of the specified array.
 If the deque fits in
 the specified array, it is returned therein.  Otherwise, a new array
 is allocated with the runtime type of the specified array and the
 size of this deque.
 <p>If this deque fits in the specified array with room to spare
 (i.e., the array has more elements than this deque), the element in
 the array immediately following the end of the deque is set to
 <tt>null</tt>.
 <p>Like the <code>toArray()</code> method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.
 <p>Suppose <tt>x</tt> is a deque known to contain only strings.
 The following code can be used to dump the deque into a newly
 allocated array of <tt>String</tt>:
 @code

     
@endcode
 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.
 @param a the array into which the elements of the deque are to
 be stored, if it is big enough; otherwise, a new array of the
 same runtime type is allocated for this purpose
 @return an array containing all of the elements in this deque
 @throws ArrayStoreException if the runtime type of the specified array
 is not a supertype of the runtime type of every element in
 this deque
 @throws NullPointerException if the specified array is null
 */
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilArrayDeque)

FOUNDATION_EXPORT void JavaUtilArrayDeque_init(JavaUtilArrayDeque *self);

FOUNDATION_EXPORT JavaUtilArrayDeque *new_JavaUtilArrayDeque_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilArrayDeque_initWithInt_(JavaUtilArrayDeque *self, jint numElements);

FOUNDATION_EXPORT JavaUtilArrayDeque *new_JavaUtilArrayDeque_initWithInt_(jint numElements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilArrayDeque_initWithJavaUtilCollection_(JavaUtilArrayDeque *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilArrayDeque *new_JavaUtilArrayDeque_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilArrayDeque)

#endif // _JavaUtilArrayDeque_H_
