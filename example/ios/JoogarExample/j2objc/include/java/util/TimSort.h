//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/TimSort.java
//

#ifndef _JavaUtilTimSort_H_
#define _JavaUtilTimSort_H_

#include "J2ObjC_header.h"

@class IOSObjectArray;
@protocol JavaUtilComparator;

/*!
 @brief A stable, adaptive, iterative mergesort that requires far fewer than
 n lg(n) comparisons when running on partially sorted arrays, while
 offering performance comparable to a traditional mergesort when run
 on random arrays.
 Like all proper mergesorts, this sort is stable and
 runs O(n log n) time (worst case).  In the worst case, this sort requires
 temporary storage space for n/2 object references; in the best case,
 it requires only a small constant amount of space.
 This implementation was adapted from Tim Peters's list sort for
 Python, which is described in detail here:
 http://svn.python.org/projects/python/trunk/Objects/listsort.txt
 Tim's C code may be found here:
 http://svn.python.org/projects/python/trunk/Objects/listobject.c
 The underlying techniques are described in this paper (and may have
 even earlier origins):
 "Optimistic Sorting and Information Theoretic Complexity"
 Peter McIlroy
 SODA (Fourth Annual ACM-SIAM Symposium on Discrete Algorithms),
 pp 467-474, Austin, Texas, 25-27 January 1993.
 While the API to this class consists solely of static methods, it is
 (privately) instantiable; a TimSort instance holds the state of an ongoing
 sort, assuming the input array is large enough to warrant the full-blown
 TimSort. Small arrays are sorted in place, using a binary insertion sort.
 */
@interface JavaUtilTimSort : NSObject

#pragma mark Package-Private

+ (void)sortWithNSObjectArray:(IOSObjectArray *)a
       withJavaUtilComparator:(id<JavaUtilComparator>)c;

+ (void)sortWithNSObjectArray:(IOSObjectArray *)a
                      withInt:(jint)lo
                      withInt:(jint)hi
       withJavaUtilComparator:(id<JavaUtilComparator>)c;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTimSort)

FOUNDATION_EXPORT void JavaUtilTimSort_sortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> c);

FOUNDATION_EXPORT void JavaUtilTimSort_sortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(IOSObjectArray *a, jint lo, jint hi, id<JavaUtilComparator> c);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTimSort)

#endif // _JavaUtilTimSort_H_
