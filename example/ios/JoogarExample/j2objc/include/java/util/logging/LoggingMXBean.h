//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/logging/LoggingMXBean.java
//

#ifndef _JavaUtilLoggingLoggingMXBean_H_
#define _JavaUtilLoggingLoggingMXBean_H_

#include "J2ObjC_header.h"

@protocol JavaUtilList;

/*!
 @brief <code>LoggingMXBean</code> is the management interface for the logging sub-system.
 <p>
 The ObjectName for identifying the <code>LoggingMXBean</code> in a bean server is
 <code>LogManager.LOGGING_MXBEAN_NAME</code>.
 </p>
 @since 1.5
 */
@protocol JavaUtilLoggingLoggingMXBean < NSObject, JavaObject >

/*!
 @brief Gets the string value of the logging level of a logger.
 An empty string
 is returned when the logger's level is defined by its parent. A
 <code>null</code> is returned if the specified logger does not exist.
 @param loggerName
 the name of the logger lookup.
 @return a <code>String</code> if the logger is found, otherwise <code>null</code>.
 */
- (NSString *)getLoggerLevelWithNSString:(NSString *)loggerName;

/*!
 @brief Gets a list of all currently registered logger names.
 This is performed
 using the <code>LogManager.getLoggerNames()</code>.
 @return a list of logger names.
 */
- (id<JavaUtilList>)getLoggerNames;

/*!
 @brief Gets the name of the parent logger of a logger.
 If the logger doesn't
 exist then <code>null</code> is returned. If the logger is the root logger,
 then an empty <code>String</code> is returned.
 @param loggerName
 the name of the logger to lookup.
 @return a <code>String</code> if the logger was found, otherwise <code>null</code>.
 */
- (NSString *)getParentLoggerNameWithNSString:(NSString *)loggerName;

/*!
 @brief Sets the log level of a logger.
 LevelName set to <code>null</code> means the
 level is inherited from the nearest non-null ancestor.
 @param loggerName
 the name of the logger to set the level on, which must not be
 <code>null</code>.
 @param levelName
 the level to set on the logger, which may be <code>null</code>.
 @throws IllegalArgumentException
 if <code>loggerName</code> is not a registered logger or if
 <code>levelName</code> is not null and not valid.
 */
- (void)setLoggerLevelWithNSString:(NSString *)loggerName
                      withNSString:(NSString *)levelName;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLoggingLoggingMXBean)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLoggingLoggingMXBean)

#endif // _JavaUtilLoggingLoggingMXBean_H_
