//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Arrays.java
//

#ifndef _JavaUtilArrays_H_
#define _JavaUtilArrays_H_

#include "J2ObjC_header.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@protocol JavaUtilComparator;
@protocol JavaUtilList;

/*!
 @brief <code>Arrays</code> contains static methods which operate on arrays.
 @since 1.2
 */
@interface JavaUtilArrays : NSObject

#pragma mark Public

/*!
 @brief Returns a <code>List</code> of the objects in the specified array.
 The size of the
 <code>List</code> cannot be modified, i.e. adding and removing are unsupported, but
 the elements can be set. Setting an element modifies the underlying
 array.
 @param array
 the array.
 @return a <code>List</code> of the elements of the specified array.
 */
+ (id<JavaUtilList>)asListWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithByteArray:(IOSByteArray *)array
                         withByte:(jbyte)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithByteArray:(IOSByteArray *)array
                          withInt:(jint)startIndex
                          withInt:(jint)endIndex
                         withByte:(jbyte)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithCharArray:(IOSCharArray *)array
                         withChar:(jchar)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithCharArray:(IOSCharArray *)array
                          withInt:(jint)startIndex
                          withInt:(jint)endIndex
                         withChar:(jchar)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithDoubleArray:(IOSDoubleArray *)array
                         withDouble:(jdouble)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithDoubleArray:(IOSDoubleArray *)array
                            withInt:(jint)startIndex
                            withInt:(jint)endIndex
                         withDouble:(jdouble)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithFloatArray:(IOSFloatArray *)array
                         withFloat:(jfloat)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithFloatArray:(IOSFloatArray *)array
                           withInt:(jint)startIndex
                           withInt:(jint)endIndex
                         withFloat:(jfloat)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithIntArray:(IOSIntArray *)array
                         withInt:(jint)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithIntArray:(IOSIntArray *)array
                         withInt:(jint)startIndex
                         withInt:(jint)endIndex
                         withInt:(jint)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithLongArray:(IOSLongArray *)array
                          withInt:(jint)startIndex
                          withInt:(jint)endIndex
                         withLong:(jlong)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithLongArray:(IOSLongArray *)array
                         withLong:(jlong)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws ClassCastException
 if an element in the array or the search element does not
 implement <code>Comparable</code>, or cannot be compared to each other.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                              withInt:(jint)startIndex
                              withInt:(jint)endIndex
                               withId:(id)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws ClassCastException
 if an element in the array or the search element does not
 implement <code>Comparable</code>, or cannot be compared to each other.
 */
+ (jint)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive).
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithShortArray:(IOSShortArray *)array
                           withInt:(jint)startIndex
                           withInt:(jint)endIndex
                         withShort:(jshort)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 */
+ (jint)binarySearchWithShortArray:(IOSShortArray *)array
                         withShort:(jshort)value;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 in the range specified by fromIndex (inclusive) and toIndex (exclusive),
 using <code>comparator</code> to compare elements.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param startIndex the inclusive start index.
 @param endIndex the exclusive start index.
 @param value the element to find.
 @param comparator the <code>Comparator</code> used to compare the elements.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws ClassCastException
 if an element in the array or the search element does not
 implement <code>Comparable</code>, or cannot be compared to each other.
 @throws IllegalArgumentException if <code>startIndex > endIndex</code>
 @throws ArrayIndexOutOfBoundsException if <code>startIndex < 0 || endIndex > array.length</code>
 @since 1.6
 */
+ (jint)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                              withInt:(jint)startIndex
                              withInt:(jint)endIndex
                               withId:(id)value
               withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Performs a binary search for <code>value</code> in the ascending sorted array <code>array</code>,
 using <code>comparator</code> to compare elements.
 Searching in an unsorted array has an undefined result. It's also undefined which element
 is found if there are multiple occurrences of the same element.
 @param array the sorted array to search.
 @param value the element to find.
 @param comparator the <code>Comparator</code> used to compare the elements.
 @return the non-negative index of the element, or a negative index which
 is <code>-index - 1</code> where the element would be inserted.
 @throws ClassCastException
 if an element in the array or the search element does not
 implement <code>Comparable</code>, or cannot be compared to each other.
 */
+ (jint)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)value
               withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Checks that the range described by <code>offset</code> and <code>count</code> doesn't exceed
 <code>arrayLength</code>.
 */
+ (void)checkOffsetAndCountWithInt:(jint)arrayLength
                           withInt:(jint)offset
                           withInt:(jint)count;

/*!
 @brief Checks that the range described by <code>start</code> and <code>end</code> doesn't exceed
 <code>len</code>.
 */
+ (void)checkStartAndEndWithInt:(jint)len
                        withInt:(jint)start
                        withInt:(jint)end;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>false</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSBooleanArray *)copyOfWithBooleanArray:(IOSBooleanArray *)original
                                    withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>(byte) 0</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)original
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>'\\u0000'</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSCharArray *)copyOfWithCharArray:(IOSCharArray *)original
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0.0d</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSDoubleArray *)copyOfWithDoubleArray:(IOSDoubleArray *)original
                                  withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0.0f</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSFloatArray *)copyOfWithFloatArray:(IOSFloatArray *)original
                                withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)original
                            withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0L</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSLongArray *)copyOfWithLongArray:(IOSLongArray *)original
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>(short) 0</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSShortArray *)copyOfWithShortArray:(IOSShortArray *)original
                                withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>null</code>.
 @param original the original array
 @param newLength the length of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSObjectArray *)copyOfWithNSObjectArray:(IOSObjectArray *)original
                                    withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies <code>newLength</code> elements from <code>original</code> into a new array.
 If <code>newLength</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>null</code>.
 @param original the original array
 @param newLength the length of the new array
 @param newType the class of the new array
 @return the new array
 @throws NegativeArraySizeException if <code>newLength < 0</code>
 @throws NullPointerException if <code>original == null</code>
 @throws ArrayStoreException if a value in <code>original</code> is incompatible with T
 @since 1.6
 */
+ (IOSObjectArray *)copyOfWithNSObjectArray:(IOSObjectArray *)original
                                    withInt:(jint)newLength
                               withIOSClass:(IOSClass *)newType OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>false</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSBooleanArray *)copyOfRangeWithBooleanArray:(IOSBooleanArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>(byte) 0</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSByteArray *)copyOfRangeWithByteArray:(IOSByteArray *)original
                                   withInt:(jint)start
                                   withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>'\\u0000'</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSCharArray *)copyOfRangeWithCharArray:(IOSCharArray *)original
                                   withInt:(jint)start
                                   withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0.0d</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSDoubleArray *)copyOfRangeWithDoubleArray:(IOSDoubleArray *)original
                                       withInt:(jint)start
                                       withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0.0f</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSFloatArray *)copyOfRangeWithFloatArray:(IOSFloatArray *)original
                                     withInt:(jint)start
                                     withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSIntArray *)copyOfRangeWithIntArray:(IOSIntArray *)original
                                 withInt:(jint)start
                                 withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>0L</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSLongArray *)copyOfRangeWithLongArray:(IOSLongArray *)original
                                   withInt:(jint)start
                                   withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>(short) 0</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSShortArray *)copyOfRangeWithShortArray:(IOSShortArray *)original
                                     withInt:(jint)start
                                     withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>null</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @since 1.6
 */
+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies elements from <code>original</code> into a new array, from indexes start (inclusive) to
 end (exclusive).
 The original order of elements is preserved.
 If <code>end</code> is greater than <code>original.length</code>, the result is padded
 with the value <code>null</code>.
 @param original the original array
 @param start the start index, inclusive
 @param end the end index, exclusive
 @return the new array
 @throws ArrayIndexOutOfBoundsException if <code>start < 0 || start > original.length</code>
 @throws IllegalArgumentException if <code>start > end</code>
 @throws NullPointerException if <code>original == null</code>
 @throws ArrayStoreException if a value in <code>original</code> is incompatible with T
 @since 1.6
 */
+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end
                                    withIOSClass:(IOSClass *)newType OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns <code>true</code> if the two given arrays are deeply equal to one another.
 Unlike the method <code>equals(Object[] array1, Object[] array2)</code>, this method
 is appropriate for use for nested arrays of arbitrary depth.
 <p>
 Two array references are considered deeply equal if they are both <code>null</code>,
 or if they refer to arrays that have the same length and the elements at
 each index in the two arrays are equal.
 <p>
 Two <code>null</code> elements <code>element1</code> and <code>element2</code> are possibly deeply equal if any
 of the following conditions satisfied:
 <p>
 <code>element1</code> and <code>element2</code> are both arrays of object reference types, and
 <code>Arrays.deepEquals(element1, element2)</code> would return <code>true</code>.
 <p>
 <code>element1</code> and <code>element2</code> are arrays of the same primitive type, and the
 appropriate overloading of <code>Arrays.equals(element1, element2)</code> would return
 <code>true</code>.
 <p>
 <code>element1 == element2</code>
 <p>
 <code>element1.equals(element2)</code> would return <code>true</code>.
 <p>
 Note that this definition permits <code>null</code> elements at any depth.
 <p>
 If either of the given arrays contain themselves as elements, the
 behavior of this method is uncertain.
 @param array1
 the first <code>Object</code> array.
 @param array2
 the second <code>Object</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal according to <code>equals()</code>, <code>false</code> otherwise.
 */
+ (jboolean)deepEqualsWithNSObjectArray:(IOSObjectArray *)array1
                      withNSObjectArray:(IOSObjectArray *)array2;

/*!
 @brief Returns a hash code based on the "deep contents" of the given array.
 If
 the array contains other arrays as its elements, the hash code is based
 on their contents not their identities. So it is not acceptable to invoke
 this method on an array that contains itself as an element, either
 directly or indirectly.
 <p>
 For any two arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.deepEquals(a, b)</code> returns <code>true</code>, it
 means that the return value of <code>Arrays.deepHashCode(a)</code> equals
 <code>Arrays.deepHashCode(b)</code>.
 <p>
 The computation of the value returned by this method is similar to that
 of the value returned by <code>List.hashCode()</code> invoked on a
 <code>List</code> containing a sequence of instances representing the
 elements of array in the same order. The difference is: If an element e
 of array is itself an array, its hash code is computed by calling the
 appropriate overloading of <code>Arrays.hashCode(e)</code> if e is an array of a
 primitive type, or by calling <code>Arrays.deepHashCode(e)</code> recursively if e is
 an array of a reference type. The value returned by this method is the
 same value as the method <code>Arrays.asList(array).hashCode()</code>. If the array is
 <code>null</code>, the return value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)deepHashCodeWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Creates a <i>"deep"</i> <code>String</code> representation of the
 <code>Object[]</code> passed, such that if the array contains other arrays,
 the <code>String</code> representation of those arrays is generated as well.
 <p>
 If any of the elements are primitive arrays, the generation is delegated
 to the other <code>toString</code> methods in this class. If any element
 contains a reference to the original array, then it will be represented
 as <code>"[...]"</code>. If an element is an <code>Object[]</code>, then its
 representation is generated by a recursive call to this method. All other
 elements are converted via the <code>String.valueOf(Object)</code> method.
 @param array
 the <code>Object</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)deepToStringWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>boolean</code> array.
 @param array2
 the second <code>boolean</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithBooleanArray:(IOSBooleanArray *)array1
                  withBooleanArray:(IOSBooleanArray *)array2;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>byte</code> array.
 @param array2
 the second <code>byte</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithByteArray:(IOSByteArray *)array1
                  withByteArray:(IOSByteArray *)array2;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>char</code> array.
 @param array2
 the second <code>char</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithCharArray:(IOSCharArray *)array1
                  withCharArray:(IOSCharArray *)array2;

/*!
 @brief Compares the two arrays.
 The values are compared in the same manner as
 <code>Double.equals()</code>.
 @param array1
 the first <code>double</code> array.
 @param array2
 the second <code>double</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithDoubleArray:(IOSDoubleArray *)array1
                  withDoubleArray:(IOSDoubleArray *)array2;

/*!
 @brief Compares the two arrays.
 The values are compared in the same manner as
 <code>Float.equals()</code>.
 @param array1
 the first <code>float</code> array.
 @param array2
 the second <code>float</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithFloatArray:(IOSFloatArray *)array1
                  withFloatArray:(IOSFloatArray *)array2;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>int</code> array.
 @param array2
 the second <code>int</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithIntArray:(IOSIntArray *)array1
                  withIntArray:(IOSIntArray *)array2;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>long</code> array.
 @param array2
 the second <code>long</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithLongArray:(IOSLongArray *)array1
                  withLongArray:(IOSLongArray *)array2;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>Object</code> array.
 @param array2
 the second <code>Object</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal according to <code>equals()</code>, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithNSObjectArray:(IOSObjectArray *)array1
                  withNSObjectArray:(IOSObjectArray *)array2;

/*!
 @brief Compares the two arrays.
 @param array1
 the first <code>short</code> array.
 @param array2
 the second <code>short</code> array.
 @return <code>true</code> if both arrays are <code>null</code> or if the arrays have the
 same length and the elements at each index in the two arrays are
 equal, <code>false</code> otherwise.
 */
+ (jboolean)equalsWithShortArray:(IOSShortArray *)array1
                  withShortArray:(IOSShortArray *)array2;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>boolean</code> array to fill.
 @param value
 the <code>boolean</code> element.
 */
+ (void)fillWithBooleanArray:(IOSBooleanArray *)array
                 withBoolean:(jboolean)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>boolean</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>boolean</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithBooleanArray:(IOSBooleanArray *)array
                     withInt:(jint)start
                     withInt:(jint)end
                 withBoolean:(jboolean)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>byte</code> array to fill.
 @param value
 the <code>byte</code> element.
 */
+ (void)fillWithByteArray:(IOSByteArray *)array
                 withByte:(jbyte)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>byte</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>byte</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithByteArray:(IOSByteArray *)array
                  withInt:(jint)start
                  withInt:(jint)end
                 withByte:(jbyte)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>char</code> array to fill.
 @param value
 the <code>char</code> element.
 */
+ (void)fillWithCharArray:(IOSCharArray *)array
                 withChar:(jchar)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>char</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>char</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithCharArray:(IOSCharArray *)array
                  withInt:(jint)start
                  withInt:(jint)end
                 withChar:(jchar)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>double</code> array to fill.
 @param value
 the <code>double</code> element.
 */
+ (void)fillWithDoubleArray:(IOSDoubleArray *)array
                 withDouble:(jdouble)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>double</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>double</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithDoubleArray:(IOSDoubleArray *)array
                    withInt:(jint)start
                    withInt:(jint)end
                 withDouble:(jdouble)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>float</code> array to fill.
 @param value
 the <code>float</code> element.
 */
+ (void)fillWithFloatArray:(IOSFloatArray *)array
                 withFloat:(jfloat)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>float</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>float</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithFloatArray:(IOSFloatArray *)array
                   withInt:(jint)start
                   withInt:(jint)end
                 withFloat:(jfloat)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>int</code> array to fill.
 @param value
 the <code>int</code> element.
 */
+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(jint)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>int</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>int</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(jint)start
                 withInt:(jint)end
                 withInt:(jint)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>long</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>long</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithLongArray:(IOSLongArray *)array
                  withInt:(jint)start
                  withInt:(jint)end
                 withLong:(jlong)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>long</code> array to fill.
 @param value
 the <code>long</code> element.
 */
+ (void)fillWithLongArray:(IOSLongArray *)array
                 withLong:(jlong)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>Object</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>Object</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(jint)start
                      withInt:(jint)end
                       withId:(id)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>Object</code> array to fill.
 @param value
 the <code>Object</code> element.
 */
+ (void)fillWithNSObjectArray:(IOSObjectArray *)array
                       withId:(id)value;

/*!
 @brief Fills the specified range in the array with the specified element.
 @param array
 the <code>short</code> array to fill.
 @param start
 the first index to fill.
 @param end
 the last + 1 index to fill.
 @param value
 the <code>short</code> element.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)fillWithShortArray:(IOSShortArray *)array
                   withInt:(jint)start
                   withInt:(jint)end
                 withShort:(jshort)value;

/*!
 @brief Fills the specified array with the specified element.
 @param array
 the <code>short</code> array to fill.
 @param value
 the <code>short</code> element.
 */
+ (void)fillWithShortArray:(IOSShortArray *)array
                 withShort:(jshort)value;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>boolean</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Boolean</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithBooleanArray:(IOSBooleanArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>byte</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Byte</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithByteArray:(IOSByteArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>char</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Character</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithCharArray:(IOSCharArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>double</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Double</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithDoubleArray:(IOSDoubleArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>float</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Float</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithFloatArray:(IOSFloatArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 not-null <code>int</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Integer</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithIntArray:(IOSIntArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>long</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Long</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithLongArray:(IOSLongArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 If the
 array contains other arrays as its elements, the hash code is based on
 their identities not their contents. So it is acceptable to invoke this
 method on an array that contains itself as an element, either directly or
 indirectly.
 <p>
 For any two arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals
 <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the method
 Arrays.asList(array).hashCode(). If the array is <code>null</code>, the return value
 is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Returns a hash code based on the contents of the given array.
 For any two
 <code>short</code> arrays <code>a</code> and <code>b</code>, if
 <code>Arrays.equals(a, b)</code> returns <code>true</code>, it means
 that the return value of <code>Arrays.hashCode(a)</code> equals <code>Arrays.hashCode(b)</code>.
 <p>
 The value returned by this method is the same value as the
 <code>List.hashCode()</code> method which is invoked on a <code>List</code>
 containing a sequence of <code>Short</code> instances representing the
 elements of array in the same order. If the array is <code>null</code>, the return
 value is 0.
 @param array
 the array whose hash code to compute.
 @return the hash code for <code>array</code>.
 */
+ (jint)hashCodeWithShortArray:(IOSShortArray *)array;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>byte</code> array to be sorted.
 */
+ (void)sortWithByteArray:(IOSByteArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 @param array
 the <code>byte</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithByteArray:(IOSByteArray *)array
                  withInt:(jint)start
                  withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>char</code> array to be sorted.
 */
+ (void)sortWithCharArray:(IOSCharArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 @param array
 the <code>char</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithCharArray:(IOSCharArray *)array
                  withInt:(jint)start
                  withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>double</code> array to be sorted.
 */
+ (void)sortWithDoubleArray:(IOSDoubleArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 The
 values are sorted according to the order imposed by <code>Double.compareTo()</code>.
 @param array
 the <code>double</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithDoubleArray:(IOSDoubleArray *)array
                    withInt:(jint)start
                    withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>float</code> array to be sorted.
 */
+ (void)sortWithFloatArray:(IOSFloatArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 The
 values are sorted according to the order imposed by <code>Float.compareTo()</code>.
 @param array
 the <code>float</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithFloatArray:(IOSFloatArray *)array
                   withInt:(jint)start
                   withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>int</code> array to be sorted.
 */
+ (void)sortWithIntArray:(IOSIntArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 @param array
 the <code>int</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithIntArray:(IOSIntArray *)array
                 withInt:(jint)start
                 withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>long</code> array to be sorted.
 */
+ (void)sortWithLongArray:(IOSLongArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 @param array
 the <code>long</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithLongArray:(IOSLongArray *)array
                  withInt:(jint)start
                  withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending natural order.
 @throws ClassCastException if any element does not implement <code>Comparable</code>,
 or if <code>compareTo</code> throws for any pair of elements.
 */
+ (void)sortWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending natural order.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws ClassCastException if any element does not implement <code>Comparable</code>,
 or if <code>compareTo</code> throws for any pair of elements.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(jint)start
                      withInt:(jint)end;

/*!
 @brief Sorts the specified array in ascending numerical order.
 @param array
 the <code>short</code> array to be sorted.
 */
+ (void)sortWithShortArray:(IOSShortArray *)array;

/*!
 @brief Sorts the specified range in the array in ascending numerical order.
 @param array
 the <code>short</code> array to be sorted.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithShortArray:(IOSShortArray *)array
                   withInt:(jint)start
                   withInt:(jint)end;

/*!
 @brief Sorts the specified array using the specified <code>Comparator</code>.
 All elements
 must be comparable to each other without a <code>ClassCastException</code> being thrown.
 @throws ClassCastException
 if elements in the array cannot be compared to each other
 using the <code>Comparator</code>.
 */
+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
       withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Sorts the specified range in the array using the specified <code>Comparator</code>.
 All elements must be comparable to each other without a
 <code>ClassCastException</code> being thrown.
 @param start
 the start index to sort.
 @param end
 the last + 1 index to sort.
 @param comparator
 the <code>Comparator</code>.
 @throws ClassCastException
 if elements in the array cannot be compared to each other
 using the given <code>Comparator</code>.
 @throws IllegalArgumentException
 if <code>start > end</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>start < 0</code> or <code>end > array.length</code>.
 */
+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(jint)start
                      withInt:(jint)end
       withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Creates a <code>String</code> representation of the <code>boolean[]</code> passed.
 The result is surrounded by brackets (<code>"[]"</code>), each
 element is converted to a <code>String</code> via the
 <code>String.valueOf(boolean)</code> and separated by <code>", "</code>.
 If the array is <code>null</code>, then <code>"null"</code> is returned.
 @param array
 the <code>boolean</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithBooleanArray:(IOSBooleanArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>byte[]</code> passed.
 The
 result is surrounded by brackets (<code>"[]"</code>), each element
 is converted to a <code>String</code> via the <code>String.valueOf(int)</code> and
 separated by <code>", "</code>. If the array is <code>null</code>, then
 <code>"null"</code> is returned.
 @param array
 the <code>byte</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithByteArray:(IOSByteArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>char[]</code> passed.
 The
 result is surrounded by brackets (<code>"[]"</code>), each element
 is converted to a <code>String</code> via the <code>String.valueOf(char)</code> and
 separated by <code>", "</code>. If the array is <code>null</code>, then
 <code>"null"</code> is returned.
 @param array
 the <code>char</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithCharArray:(IOSCharArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>double[]</code> passed.
 The result is surrounded by brackets (<code>"[]"</code>), each
 element is converted to a <code>String</code> via the
 <code>String.valueOf(double)</code> and separated by <code>", "</code>.
 If the array is <code>null</code>, then <code>"null"</code> is returned.
 @param array
 the <code>double</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithDoubleArray:(IOSDoubleArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>float[]</code> passed.
 The result is surrounded by brackets (<code>"[]"</code>), each
 element is converted to a <code>String</code> via the
 <code>String.valueOf(float)</code> and separated by <code>", "</code>.
 If the array is <code>null</code>, then <code>"null"</code> is returned.
 @param array
 the <code>float</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithFloatArray:(IOSFloatArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>int[]</code> passed.
 The
 result is surrounded by brackets (<code>"[]"</code>), each element
 is converted to a <code>String</code> via the <code>String.valueOf(int)</code> and
 separated by <code>", "</code>. If the array is <code>null</code>, then
 <code>"null"</code> is returned.
 @param array
 the <code>int</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithIntArray:(IOSIntArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>long[]</code> passed.
 The
 result is surrounded by brackets (<code>"[]"</code>), each element
 is converted to a <code>String</code> via the <code>String.valueOf(long)</code> and
 separated by <code>", "</code>. If the array is <code>null</code>, then
 <code>"null"</code> is returned.
 @param array
 the <code>long</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithLongArray:(IOSLongArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>Object[]</code> passed.
 The result is surrounded by brackets (<code>"[]"</code>), each
 element is converted to a <code>String</code> via the
 <code>String.valueOf(Object)</code> and separated by <code>", "</code>.
 If the array is <code>null</code>, then <code>"null"</code> is returned.
 @param array
 the <code>Object</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Creates a <code>String</code> representation of the <code>short[]</code> passed.
 The result is surrounded by brackets (<code>"[]"</code>), each
 element is converted to a <code>String</code> via the
 <code>String.valueOf(int)</code> and separated by <code>", "</code>. If
 the array is <code>null</code>, then <code>"null"</code> is returned.
 @param array
 the <code>short</code> array to convert.
 @return the <code>String</code> representation of <code>array</code>.
 @since 1.5
 */
+ (NSString *)toStringWithShortArray:(IOSShortArray *)array;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilArrays)

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilArrays_asListWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithByteArray_withByte_(IOSByteArray *array, jbyte value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithByteArray_withInt_withInt_withByte_(IOSByteArray *array, jint startIndex, jint endIndex, jbyte value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithCharArray_withChar_(IOSCharArray *array, jchar value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithCharArray_withInt_withInt_withChar_(IOSCharArray *array, jint startIndex, jint endIndex, jchar value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithDoubleArray_withDouble_(IOSDoubleArray *array, jdouble value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithDoubleArray_withInt_withInt_withDouble_(IOSDoubleArray *array, jint startIndex, jint endIndex, jdouble value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithFloatArray_withFloat_(IOSFloatArray *array, jfloat value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithFloatArray_withInt_withInt_withFloat_(IOSFloatArray *array, jint startIndex, jint endIndex, jfloat value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint startIndex, jint endIndex, jint value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithLongArray_withLong_(IOSLongArray *array, jlong value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint startIndex, jint endIndex, jlong value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint startIndex, jint endIndex, id value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithNSObjectArray_withId_withJavaUtilComparator_(IOSObjectArray *array, id value, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithNSObjectArray_withInt_withInt_withId_withJavaUtilComparator_(IOSObjectArray *array, jint startIndex, jint endIndex, id value, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithShortArray_withShort_(IOSShortArray *array, jshort value);

FOUNDATION_EXPORT jint JavaUtilArrays_binarySearchWithShortArray_withInt_withInt_withShort_(IOSShortArray *array, jint startIndex, jint endIndex, jshort value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithByteArray_withByte_(IOSByteArray *array, jbyte value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(IOSByteArray *array, jint start, jint end, jbyte value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithShortArray_withShort_(IOSShortArray *array, jshort value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithShortArray_withInt_withInt_withShort_(IOSShortArray *array, jint start, jint end, jshort value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithCharArray_withChar_(IOSCharArray *array, jchar value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithCharArray_withInt_withInt_withChar_(IOSCharArray *array, jint start, jint end, jchar value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint start, jint end, jint value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithLongArray_withLong_(IOSLongArray *array, jlong value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint start, jint end, jlong value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithFloatArray_withFloat_(IOSFloatArray *array, jfloat value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithFloatArray_withInt_withInt_withFloat_(IOSFloatArray *array, jint start, jint end, jfloat value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithDoubleArray_withDouble_(IOSDoubleArray *array, jdouble value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithDoubleArray_withInt_withInt_withDouble_(IOSDoubleArray *array, jint start, jint end, jdouble value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithBooleanArray_withBoolean_(IOSBooleanArray *array, jboolean value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint start, jint end, jboolean value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT void JavaUtilArrays_fillWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint start, jint end, id value);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithBooleanArray_(IOSBooleanArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithShortArray_(IOSShortArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithCharArray_(IOSCharArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithByteArray_(IOSByteArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithFloatArray_(IOSFloatArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithDoubleArray_(IOSDoubleArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_hashCodeWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT jint JavaUtilArrays_deepHashCodeWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithByteArray_withByteArray_(IOSByteArray *array1, IOSByteArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithShortArray_withShortArray_(IOSShortArray *array1, IOSShortArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithCharArray_withCharArray_(IOSCharArray *array1, IOSCharArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithIntArray_withIntArray_(IOSIntArray *array1, IOSIntArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithLongArray_withLongArray_(IOSLongArray *array1, IOSLongArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithFloatArray_withFloatArray_(IOSFloatArray *array1, IOSFloatArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(IOSDoubleArray *array1, IOSDoubleArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithBooleanArray_withBooleanArray_(IOSBooleanArray *array1, IOSBooleanArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array1, IOSObjectArray *array2);

FOUNDATION_EXPORT jboolean JavaUtilArrays_deepEqualsWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array1, IOSObjectArray *array2);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithByteArray_(IOSByteArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithByteArray_withInt_withInt_(IOSByteArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_checkOffsetAndCountWithInt_withInt_withInt_(jint arrayLength, jint offset, jint count);

FOUNDATION_EXPORT void JavaUtilArrays_checkStartAndEndWithInt_withInt_withInt_(jint len, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithCharArray_(IOSCharArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithCharArray_withInt_withInt_(IOSCharArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithDoubleArray_(IOSDoubleArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithFloatArray_(IOSFloatArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithFloatArray_withInt_withInt_(IOSFloatArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithIntArray_withInt_withInt_(IOSIntArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithLongArray_withInt_withInt_(IOSLongArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithShortArray_(IOSShortArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithShortArray_withInt_withInt_(IOSShortArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_(IOSObjectArray *array, jint start, jint end);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(IOSObjectArray *array, jint start, jint end, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *array, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithBooleanArray_(IOSBooleanArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithByteArray_(IOSByteArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithCharArray_(IOSCharArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithDoubleArray_(IOSDoubleArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithFloatArray_(IOSFloatArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithShortArray_(IOSShortArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_toStringWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT NSString *JavaUtilArrays_deepToStringWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT IOSBooleanArray *JavaUtilArrays_copyOfWithBooleanArray_withInt_(IOSBooleanArray *original, jint newLength);

FOUNDATION_EXPORT IOSByteArray *JavaUtilArrays_copyOfWithByteArray_withInt_(IOSByteArray *original, jint newLength);

FOUNDATION_EXPORT IOSCharArray *JavaUtilArrays_copyOfWithCharArray_withInt_(IOSCharArray *original, jint newLength);

FOUNDATION_EXPORT IOSDoubleArray *JavaUtilArrays_copyOfWithDoubleArray_withInt_(IOSDoubleArray *original, jint newLength);

FOUNDATION_EXPORT IOSFloatArray *JavaUtilArrays_copyOfWithFloatArray_withInt_(IOSFloatArray *original, jint newLength);

FOUNDATION_EXPORT IOSIntArray *JavaUtilArrays_copyOfWithIntArray_withInt_(IOSIntArray *original, jint newLength);

FOUNDATION_EXPORT IOSLongArray *JavaUtilArrays_copyOfWithLongArray_withInt_(IOSLongArray *original, jint newLength);

FOUNDATION_EXPORT IOSShortArray *JavaUtilArrays_copyOfWithShortArray_withInt_(IOSShortArray *original, jint newLength);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilArrays_copyOfWithNSObjectArray_withInt_(IOSObjectArray *original, jint newLength);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilArrays_copyOfWithNSObjectArray_withInt_withIOSClass_(IOSObjectArray *original, jint newLength, IOSClass *newType);

FOUNDATION_EXPORT IOSBooleanArray *JavaUtilArrays_copyOfRangeWithBooleanArray_withInt_withInt_(IOSBooleanArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSByteArray *JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(IOSByteArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSCharArray *JavaUtilArrays_copyOfRangeWithCharArray_withInt_withInt_(IOSCharArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSDoubleArray *JavaUtilArrays_copyOfRangeWithDoubleArray_withInt_withInt_(IOSDoubleArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSFloatArray *JavaUtilArrays_copyOfRangeWithFloatArray_withInt_withInt_(IOSFloatArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSIntArray *JavaUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(IOSIntArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSLongArray *JavaUtilArrays_copyOfRangeWithLongArray_withInt_withInt_(IOSLongArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSShortArray *JavaUtilArrays_copyOfRangeWithShortArray_withInt_withInt_(IOSShortArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_(IOSObjectArray *original, jint start, jint end);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_withIOSClass_(IOSObjectArray *original, jint start, jint end, IOSClass *newType);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilArrays)

#endif // _JavaUtilArrays_H_
