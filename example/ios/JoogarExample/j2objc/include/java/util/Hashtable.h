//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Hashtable.java
//

#ifndef _JavaUtilHashtable_H_
#define _JavaUtilHashtable_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/Dictionary.h"
#include "java/util/Map.h"

@protocol JavaUtilCollection;
@protocol JavaUtilEnumeration;
@protocol JavaUtilSet;

/*!
 @brief Hashtable is a synchronized implementation of <code>Map</code>.
 All optional operations are supported.
 <p>Neither keys nor values can be null. (Use <code>HashMap</code> or <code>LinkedHashMap</code> if you
 need null keys or values.)
 */
@interface JavaUtilHashtable : JavaUtilDictionary < JavaUtilMap, NSCopying, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new <code>Hashtable</code> using the default capacity and load
 factor.
 */
- (instancetype)init;

/*!
 @brief Constructs a new <code>Hashtable</code> using the specified capacity and the
 default load factor.
 @param capacity
 the initial capacity.
 */
- (instancetype)initWithInt:(jint)capacity;

/*!
 @brief Constructs a new <code>Hashtable</code> using the specified capacity and load
 factor.
 @param capacity
 the initial capacity.
 @param loadFactor
 the initial load factor.
 */
- (instancetype)initWithInt:(jint)capacity
                  withFloat:(jfloat)loadFactor;

/*!
 @brief Constructs a new instance of <code>Hashtable</code> containing the mappings
 from the specified map.
 @param map
 the mappings to add.
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Removes all key/value pairs from this <code>Hashtable</code>, leaving the
 size zero and the capacity unchanged.
 */
- (void)clear;

/*!
 @brief Returns a new <code>Hashtable</code> with the same key/value pairs, capacity
 and load factor.
 @return a shallow copy of this <code>Hashtable</code>.
 */
- (id)clone;

/*!
 @brief Returns true if this <code>Hashtable</code> contains the specified object as
 the value of at least one of the key/value pairs.
 @param value
 the object to look for as a value in this <code>Hashtable</code>.
 @return <code>true</code> if object is a value in this <code>Hashtable</code>,
 <code>false</code> otherwise.
 */
- (jboolean)containsWithId:(id)value;

/*!
 @brief Returns true if this <code>Hashtable</code> contains the specified object as a
 key of one of the key/value pairs.
 @param key
 the object to look for as a key in this <code>Hashtable</code>.
 @return <code>true</code> if object is a key in this <code>Hashtable</code>,
 <code>false</code> otherwise.
 */
- (jboolean)containsKeyWithId:(id)key;

/*!
 @brief Searches this <code>Hashtable</code> for the specified value.
 @param value
 the object to search for.
 @return <code>true</code> if <code>value</code> is a value of this
 <code>Hashtable</code>, <code>false</code> otherwise.
 */
- (jboolean)containsValueWithId:(id)value;

/*!
 @brief Returns an enumeration on the values of this <code>Hashtable</code>.
 The
 results of the Enumeration may be affected if the contents of this
 <code>Hashtable</code> are modified.
 @return an enumeration of the values of this <code>Hashtable</code>.
 */
- (id<JavaUtilEnumeration>)elements;

/*!
 @brief Returns a set of the mappings contained in this <code>Hashtable</code>.
 Each
 element in the set is a <code>Map.Entry</code>. The set is backed by this
 <code>Hashtable</code> so changes to one are reflected by the other. The set
 does not support adding.
 @return a set of the mappings.
 */
- (id<JavaUtilSet>)entrySet;

/*!
 @brief Compares this <code>Hashtable</code> with the specified object and indicates
 if they are equal.
 In order to be equal, <code>object</code> must be an
 instance of Map and contain the same key/value pairs.
 @param object
 the object to compare with this object.
 @return <code>true</code> if the specified object is equal to this Map,
 <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns the value associated with the specified key in this
 <code>Hashtable</code>.
 @param key
 the key of the value returned.
 @return the value associated with the specified key, or <code>null</code> if
 the specified key does not exist.
 */
- (id)getWithId:(id)key;

- (NSUInteger)hash;

/*!
 @brief Returns true if this <code>Hashtable</code> has no key/value pairs.
 @return <code>true</code> if this <code>Hashtable</code> has no key/value pairs,
 <code>false</code> otherwise.
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an enumeration on the keys of this <code>Hashtable</code> instance.
 The results of the enumeration may be affected if the contents of this
 <code>Hashtable</code> are modified.
 @return an enumeration of the keys of this <code>Hashtable</code>.
 */
- (id<JavaUtilEnumeration>)keys;

/*!
 @brief Returns a set of the keys contained in this <code>Hashtable</code>.
 The set
 is backed by this <code>Hashtable</code> so changes to one are reflected by
 the other. The set does not support adding.
 @return a set of the keys.
 */
- (id<JavaUtilSet>)keySet;

/*!
 @brief Associate the specified value with the specified key in this
 <code>Hashtable</code>.
 If the key already exists, the old value is replaced.
 The key and value cannot be null.
 @param key
 the key to add.
 @param value
 the value to add.
 @return the old value associated with the specified key, or <code>null</code>
 if the key did not exist.
 */
- (id)putWithId:(id)key
         withId:(id)value;

/*!
 @brief Copies every mapping to this <code>Hashtable</code> from the specified map.
 @param map
 the map to copy mappings from.
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Removes the key/value pair with the specified key from this
 <code>Hashtable</code>.
 @param key
 the key to remove.
 @return the value associated with the specified key, or <code>null</code> if
 the specified key did not exist.
 */
- (id)removeWithId:(id)key;

/*!
 @brief Returns the number of key/value pairs in this <code>Hashtable</code>.
 @return the number of key/value pairs in this <code>Hashtable</code>.
 */
- (jint)size;

/*!
 @brief Returns the string representation of this <code>Hashtable</code>.
 @return the string representation of this <code>Hashtable</code>.
 */
- (NSString *)description;

/*!
 @brief Returns a collection of the values contained in this <code>Hashtable</code>.
 The collection is backed by this <code>Hashtable</code> so changes to one are
 reflected by the other. The collection does not support adding.
 @return a collection of the values.
 */
- (id<JavaUtilCollection>)values;

#pragma mark Protected

/*!
 @brief Increases the capacity of this <code>Hashtable</code>.
 This method is called
 when the size of this <code>Hashtable</code> exceeds the load factor.
 */
- (void)rehash;

@end

J2OBJC_STATIC_INIT(JavaUtilHashtable)

FOUNDATION_EXPORT void JavaUtilHashtable_init(JavaUtilHashtable *self);

FOUNDATION_EXPORT JavaUtilHashtable *new_JavaUtilHashtable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashtable_initWithInt_(JavaUtilHashtable *self, jint capacity);

FOUNDATION_EXPORT JavaUtilHashtable *new_JavaUtilHashtable_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashtable_initWithInt_withFloat_(JavaUtilHashtable *self, jint capacity, jfloat loadFactor);

FOUNDATION_EXPORT JavaUtilHashtable *new_JavaUtilHashtable_initWithInt_withFloat_(jint capacity, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilHashtable_initWithJavaUtilMap_(JavaUtilHashtable *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilHashtable *new_JavaUtilHashtable_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilHashtable)

#endif // _JavaUtilHashtable_H_
