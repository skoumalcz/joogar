//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Collections.java
//

#ifndef _JavaUtilCollections_H_
#define _JavaUtilCollections_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/RandomAccess.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilRandom;
@protocol JavaLangComparable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilDeque;
@protocol JavaUtilEnumeration;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilListIterator;
@protocol JavaUtilMap;
@protocol JavaUtilQueue;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;

/*!
 @brief <code>Collections</code> contains static methods which operate on
 <code>Collection</code> classes.
 @since 1.2
 */
@interface JavaUtilCollections : NSObject

#pragma mark Public

/*!
 @brief Adds all the specified elements to the specified collection.
 @param c
 the collection the elements are to be inserted into.
 @param a
 the elements to insert.
 @return true if the collection changed during insertion.
 @throws UnsupportedOperationException
 when the method is not supported.
 @throws NullPointerException
 when <code>c</code> or <code>a</code> is <code>null</code>, or <code>a</code>
 contains one or more <code>null</code> elements and <code>c</code>
 doesn't support <code>null</code> elements.
 @throws IllegalArgumentException
 if at least one of the elements can't be inserted into the
 collection.
 */
+ (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c
                       withNSObjectArray:(IOSObjectArray *)a;

/*!
 @brief Returns a last-in, first-out queue as a view of <code>deque</code>.
 @since 1.6
 */
+ (id<JavaUtilQueue>)asLifoQueueWithJavaUtilDeque:(id<JavaUtilDeque>)deque;

/*!
 @brief Performs a binary search for the specified element in the specified
 sorted list.
 The list needs to be already sorted in natural sorting
 order. Searching in an unsorted array has an undefined result. It's also
 undefined which element is found if there are multiple occurrences of the
 same element.
 @param list
 the sorted list to search.
 @param object
 the element to find.
 @return the non-negative index of the element, or a negative index which
 is the <code>-index - 1</code> where the element would be inserted
 @throws ClassCastException
 if an element in the List or the search element does not
 implement Comparable, or cannot be compared to each other.
 */
+ (jint)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                              withId:(id)object;

/*!
 @brief Performs a binary search for the specified element in the specified
 sorted list using the specified comparator.
 The list needs to be already
 sorted according to the comparator passed. Searching in an unsorted array
 has an undefined result. It's also undefined which element is found if
 there are multiple occurrences of the same element.
 @param list
 the sorted List to search.
 @param object
 the element to find.
 @param comparator
 the comparator. If the comparator is <code>null</code> then the
 search uses the objects' natural ordering.
 @return the non-negative index of the element, or a negative index which
 is the <code>-index - 1</code> where the element would be inserted.
 @throws ClassCastException
 when an element in the list and the searched element cannot
 be compared to each other using the comparator.
 */
+ (jint)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                              withId:(id)object
              withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Returns a dynamically typesafe view of the specified collection.
 Trying
 to insert an element of the wrong type into this collection throws a
 <code>ClassCastException</code>. At creation time the types in <code>c</code> are
 not checked for correct type.
 @param c
 the collection to be wrapped in a typesafe collection.
 @param type
 the type of the elements permitted to insert.
 @return a typesafe collection.
 */
+ (id<JavaUtilCollection>)checkedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                     withIOSClass:(IOSClass *)type;

/*!
 @brief Returns a dynamically typesafe view of the specified list.
 Trying to
 insert an element of the wrong type into this list throws a
 <code>ClassCastException</code>. At creation time the types in <code>list</code>
 are not checked for correct type.
 @param list
 the list to be wrapped in a typesafe list.
 @param type
 the type of the elements permitted to insert.
 @return a typesafe list.
 */
+ (id<JavaUtilList>)checkedListWithJavaUtilList:(id<JavaUtilList>)list
                                   withIOSClass:(IOSClass *)type;

/*!
 @brief Returns a dynamically typesafe view of the specified map.
 Trying to
 insert an element of the wrong type into this map throws a
 <code>ClassCastException</code>. At creation time the types in <code>m</code> are
 not checked for correct type.
 @param m
 the map to be wrapped in a typesafe map.
 @param keyType
 the type of the keys permitted to insert.
 @param valueType
 the type of the values permitted to insert.
 @return a typesafe map.
 */
+ (id<JavaUtilMap>)checkedMapWithJavaUtilMap:(id<JavaUtilMap>)m
                                withIOSClass:(IOSClass *)keyType
                                withIOSClass:(IOSClass *)valueType;

/*!
 @brief Returns a dynamically typesafe view of the specified set.
 Trying to
 insert an element of the wrong type into this set throws a
 <code>ClassCastException</code>. At creation time the types in <code>s</code> are
 not checked for correct type.
 @param s
 the set to be wrapped in a typesafe set.
 @param type
 the type of the elements permitted to insert.
 @return a typesafe set.
 */
+ (id<JavaUtilSet>)checkedSetWithJavaUtilSet:(id<JavaUtilSet>)s
                                withIOSClass:(IOSClass *)type;

/*!
 @brief Returns a dynamically typesafe view of the specified sorted map.
 Trying
 to insert an element of the wrong type into this sorted map throws a
 <code>ClassCastException</code>. At creation time the types in <code>m</code> are
 not checked for correct type.
 @param m
 the sorted map to be wrapped in a typesafe sorted map.
 @param keyType
 the type of the keys permitted to insert.
 @param valueType
 the type of the values permitted to insert.
 @return a typesafe sorted map.
 */
+ (id<JavaUtilSortedMap>)checkedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m
                                                  withIOSClass:(IOSClass *)keyType
                                                  withIOSClass:(IOSClass *)valueType;

/*!
 @brief Returns a dynamically typesafe view of the specified sorted set.
 Trying
 to insert an element of the wrong type into this sorted set throws a
 <code>ClassCastException</code>. At creation time the types in <code>s</code> are
 not checked for correct type.
 @param s
 the sorted set to be wrapped in a typesafe sorted set.
 @param type
 the type of the elements permitted to insert.
 @return a typesafe sorted set.
 */
+ (id<JavaUtilSortedSet>)checkedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)s
                                                  withIOSClass:(IOSClass *)type;

/*!
 @brief Copies the elements from the source list to the destination list.
 At the
 end both lists will have the same objects at the same index. If the
 destination array is larger than the source list, the elements in the
 destination list with <code>index >= source.size()</code> will be unchanged.
 @param destination
 the list whose elements are set from the source list.
 @param source
 the list with the elements to be copied into the destination.
 @throws IndexOutOfBoundsException
 when the destination list is smaller than the source list.
 @throws UnsupportedOperationException
 when replacing an element in the destination list is not
 supported.
 */
+ (void)copy__WithJavaUtilList:(id<JavaUtilList>)destination
              withJavaUtilList:(id<JavaUtilList>)source OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns whether the specified collections have no elements in common.
 @param c1
 the first collection.
 @param c2
 the second collection.
 @return <code>true</code> if the collections have no elements in common,
 <code>false</code> otherwise.
 @throws NullPointerException
 if one of the collections is <code>null</code>.
 */
+ (jboolean)disjointWithJavaUtilCollection:(id<JavaUtilCollection>)c1
                    withJavaUtilCollection:(id<JavaUtilCollection>)c2;

/*!
 @brief Returns an enumeration containing no elements.
 @since 1.7
 */
+ (id<JavaUtilEnumeration>)emptyEnumeration;

/*!
 @brief Returns an iterator containing no elements.
 @since 1.7
 */
+ (id<JavaUtilIterator>)emptyIterator;

/*!
 @brief Returns a type-safe empty, immutable <code>List</code>.
 @return an empty <code>List</code>.
 @since 1.5
 */
+ (id<JavaUtilList>)emptyList;

/*!
 @brief Returns a list iterator containing no elements.
 @since 1.7
 */
+ (id<JavaUtilListIterator>)emptyListIterator;

/*!
 @brief Returns a type-safe empty, immutable <code>Map</code>.
 @return an empty <code>Map</code>.
 @since 1.5
 */
+ (id<JavaUtilMap>)emptyMap;

/*!
 @brief Returns a type-safe empty, immutable <code>Set</code>.
 @return an empty <code>Set</code>.
 @since 1.5
 */
+ (id<JavaUtilSet>)emptySet;

/*!
 @brief Returns an <code>Enumeration</code> on the specified collection.
 @param collection
 the collection to enumerate.
 @return an Enumeration.
 */
+ (id<JavaUtilEnumeration>)enumerationWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Fills the specified list with the specified element.
 @param list
 the list to fill.
 @param object
 the element to fill the list with.
 @throws UnsupportedOperationException
 when replacing an element in the List is not supported.
 */
+ (void)fillWithJavaUtilList:(id<JavaUtilList>)list
                      withId:(id)object;

/*!
 @brief Returns the number of elements in the <code>Collection</code> that match the
 <code>Object</code> passed.
 If the <code>Object</code> is <code>null</code>, then the
 number of <code>null</code> elements is returned.
 @param c
 the <code>Collection</code> to search.
 @param o
 the <code>Object</code> to search for.
 @return the number of matching elements.
 @throws NullPointerException
 if the <code>Collection</code> parameter is <code>null</code>.
 @since 1.5
 */
+ (jint)frequencyWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                 withId:(id)o;

/*!
 @brief Searches the <code>list</code> for <code>sublist</code> and returns the beginning
 index of the first occurrence.
 <p>
 -1 is returned if the <code>sublist</code> does not exist in <code>list</code>.
 @param list
 the List to search <code>sublist</code> in.
 @param sublist
 the List to search in <code>list</code>.
 @return the beginning index of the first occurrence of <code>sublist</code> in
 <code>list</code>, or -1.
 */
+ (jint)indexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                      withJavaUtilList:(id<JavaUtilList>)sublist;

/*!
 @brief Searches the <code>list</code> for <code>sublist</code> and returns the beginning
 index of the last occurrence.
 <p>
 -1 is returned if the <code>sublist</code> does not exist in <code>list</code>.
 @param list
 the list to search <code>sublist</code> in.
 @param sublist
 the list to search in <code>list</code>.
 @return the beginning index of the last occurrence of <code>sublist</code> in
 <code>list</code>, or -1.
 */
+ (jint)lastIndexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                          withJavaUtilList:(id<JavaUtilList>)sublist;

/*!
 @brief Returns an <code>ArrayList</code> with all the elements in the <code>enumeration</code>
 .
 The elements in the returned <code>ArrayList</code> are in the
 same order as in the <code>enumeration</code>.
 @param enumeration
 the source <code>Enumeration</code>.
 @return an <code>ArrayList</code> from <code>enumeration</code>.
 */
+ (JavaUtilArrayList *)listWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)enumeration;

/*!
 @brief Searches the specified collection for the maximum element.
 @param collection
 the collection to search.
 @return the maximum element in the Collection.
 @throws ClassCastException
 when an element in the collection does not implement
 <code>Comparable</code> or elements cannot be compared to each
 other.
 */
+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Searches the specified collection for the maximum element using the
 specified comparator.
 @param collection
 the collection to search.
 @param comparator
 the comparator.
 @return the maximum element in the Collection.
 @throws ClassCastException
 when elements in the collection cannot be compared to each
 other using the <code>Comparator</code>.
 */
+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Searches the specified collection for the minimum element.
 @param collection
 the collection to search.
 @return the minimum element in the collection.
 @throws ClassCastException
 when an element in the collection does not implement
 <code>Comparable</code> or elements cannot be compared to each
 other.
 */
+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Searches the specified collection for the minimum element using the
 specified comparator.
 @param collection
 the collection to search.
 @param comparator
 the comparator.
 @return the minimum element in the collection.
 @throws ClassCastException
 when elements in the collection cannot be compared to each
 other using the <code>Comparator</code>.
 */
+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Returns a list containing the specified number of the specified element.
 The list cannot be modified. The list is serializable.
 @param length
 the size of the returned list.
 @param object
 the element to be added <code>length</code> times to a list.
 @return a list containing <code>length</code> copies of the element.
 @throws IllegalArgumentException
 when <code>length < 0</code>.
 */
+ (id<JavaUtilList>)nCopiesWithInt:(jint)length
                            withId:(id)object;

/*!
 @brief Returns a set backed by <code>map</code>.
 @throws IllegalArgumentException if the map is not empty
 @since 1.6
 */
+ (id<JavaUtilSet>)newSetFromMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Replaces all occurrences of Object <code>obj</code> in <code>list</code> with
 <code>newObj</code>.
 If the <code>obj</code> is <code>null</code>, then all
 occurrences of <code>null</code> are replaced with <code>newObj</code>.
 @param list
 the list to modify.
 @param obj
 the object to find and replace occurrences of.
 @param obj2
 the object to replace all occurrences of <code>obj</code> in
 <code>list</code>.
 @return true, if at least one occurrence of <code>obj</code> has been found in
 <code>list</code>.
 @throws UnsupportedOperationException
 if the list does not support setting elements.
 */
+ (jboolean)replaceAllWithJavaUtilList:(id<JavaUtilList>)list
                                withId:(id)obj
                                withId:(id)obj2;

/*!
 @brief Modifies the specified <code>List</code> by reversing the order of the
 elements.
 @param list
 the list to reverse.
 @throws UnsupportedOperationException
 when replacing an element in the List is not supported.
 */
+ (void)reverseWithJavaUtilList:(id<JavaUtilList>)list;

/*!
 @brief A comparator which reverses the natural order of the elements.
 The
 <code>Comparator</code> that's returned is <code>Serializable</code>.
 @return a <code>Comparator</code> instance.
 */
+ (id<JavaUtilComparator>)reverseOrder;

/*!
 @brief Returns a <code>Comparator</code> that reverses the order of the
 <code>Comparator</code> passed.
 If the <code>Comparator</code> passed is
 <code>null</code>, then this method is equivalent to <code>reverseOrder()</code>.
 <p>
 The <code>Comparator</code> that's returned is <code>Serializable</code> if the
 <code>Comparator</code> passed is serializable or <code>null</code>.
 @param c
 the <code>Comparator</code> to reverse or <code>null</code>.
 @return a <code>Comparator</code> instance.
 @since 1.5
 */
+ (id<JavaUtilComparator>)reverseOrderWithJavaUtilComparator:(id<JavaUtilComparator>)c;

/*!
 @brief Rotates the elements in <code>list</code> by the distance <code>dist</code>
 <p>
 e.g. for a given list with elements [1, 2, 3, 4, 5, 6, 7, 8, 9, 0],
 calling rotate(list, 3) or rotate(list, -7) would modify the list to look
 like this: [8, 9, 0, 1, 2, 3, 4, 5, 6, 7]
 @param lst
 the list whose elements are to be rotated.
 @param dist
 is the distance the list is rotated. This can be any valid
 integer. Negative values rotate the list backwards.
 */
+ (void)rotateWithJavaUtilList:(id<JavaUtilList>)lst
                       withInt:(jint)dist;

/*!
 @brief Returns the smallest power of two >= its argument, with several caveats:
 If the argument is negative but not Integer.MIN_VALUE, the method returns
 zero.
 If the argument is > 2^30 or equal to Integer.MIN_VALUE, the method
 returns Integer.MIN_VALUE. If the argument is zero, the method returns
 zero.
 */
+ (jint)roundUpToPowerOfTwoWithInt:(jint)i;

/*!
 @brief Computes a hash code and applies a supplemental hash function to defend
 against poor quality hash functions.
 This is critical because HashMap
 uses power-of-two length hash tables, that otherwise encounter collisions
 for hash codes that do not differ in lower or upper bits.
 Routine taken from java.util.concurrent.ConcurrentHashMap.hash(int).
 */
+ (jint)secondaryHashWithId:(id)key;

/*!
 @brief Computes an identity hash code and applies a supplemental hash function to defend
 against poor quality hash functions.
 This is critical because identity hash codes
 are currently implemented as object addresses, which will have been aligned by the
 underlying memory allocator causing all hash codes to have the same bottom bits.
 */
+ (jint)secondaryIdentityHashWithId:(id)key;

/*!
 @brief Moves every element of the list to a random new position in the list.
 @param list
 the List to shuffle.
 @throws UnsupportedOperationException
 when replacing an element in the List is not supported.
 */
+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list;

/*!
 @brief Moves every element of the list to a random new position in the list
 using the specified random number generator.
 @param list
 the list to shuffle.
 @param random
 the random number generator.
 @throws UnsupportedOperationException
 when replacing an element in the list is not supported.
 */
+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list
             withJavaUtilRandom:(JavaUtilRandom *)random;

/*!
 @brief Returns a set containing the specified element.
 The set cannot be
 modified. The set is serializable.
 @param object
 the element.
 @return a set containing the element.
 */
+ (id<JavaUtilSet>)singletonWithId:(id)object;

/*!
 @brief Returns a list containing the specified element.
 The list cannot be
 modified. The list is serializable.
 @param object
 the element.
 @return a list containing the element.
 */
+ (id<JavaUtilList>)singletonListWithId:(id)object;

/*!
 @brief Returns a Map containing the specified key and value.
 The map cannot be
 modified. The map is serializable.
 @param key
 the key.
 @param value
 the value.
 @return a Map containing the key and value.
 */
+ (id<JavaUtilMap>)singletonMapWithId:(id)key
                               withId:(id)value;

/*!
 @brief Sorts the specified list in ascending natural order.
 The algorithm is
 stable which means equal elements don't get reordered.
 @param list
 the list to be sorted.
 @throws ClassCastException
 when an element in the List does not implement Comparable or
 elements cannot be compared to each other.
 */
+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list;

/*!
 @brief Sorts the specified list using the specified comparator.
 The algorithm is
 stable which means equal elements don't get reordered.
 @param list
 the list to be sorted.
 @param comparator
 the comparator.
 @throws ClassCastException
 when elements in the list cannot be compared to each other
 using the comparator.
 */
+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list
      withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Swaps the elements of list <code>list</code> at indices <code>index1</code> and
 <code>index2</code>.
 @param list
 the list to manipulate.
 @param index1
 position of the first element to swap with the element in
 index2.
 @param index2
 position of the other element.
 @throws IndexOutOfBoundsException
 if index1 or index2 is out of range of this list.
 @since 1.4
 */
+ (void)swapWithJavaUtilList:(id<JavaUtilList>)list
                     withInt:(jint)index1
                     withInt:(jint)index2;

/*!
 @brief Returns a wrapper on the specified collection which synchronizes all
 access to the collection.
 @param collection
 the Collection to wrap in a synchronized collection.
 @return a synchronized Collection.
 */
+ (id<JavaUtilCollection>)synchronizedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Returns a wrapper on the specified List which synchronizes all access to
 the List.
 @param list
 the List to wrap in a synchronized list.
 @return a synchronized List.
 */
+ (id<JavaUtilList>)synchronizedListWithJavaUtilList:(id<JavaUtilList>)list;

/*!
 @brief Returns a wrapper on the specified map which synchronizes all access to
 the map.
 @param map
 the map to wrap in a synchronized map.
 @return a synchronized Map.
 */
+ (id<JavaUtilMap>)synchronizedMapWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Returns a wrapper on the specified set which synchronizes all access to
 the set.
 @param set
 the set to wrap in a synchronized set.
 @return a synchronized set.
 */
+ (id<JavaUtilSet>)synchronizedSetWithJavaUtilSet:(id<JavaUtilSet>)set;

/*!
 @brief Returns a wrapper on the specified sorted map which synchronizes all
 access to the sorted map.
 @param map
 the sorted map to wrap in a synchronized sorted map.
 @return a synchronized sorted map.
 */
+ (id<JavaUtilSortedMap>)synchronizedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

/*!
 @brief Returns a wrapper on the specified sorted set which synchronizes all
 access to the sorted set.
 @param set
 the sorted set to wrap in a synchronized sorted set.
 @return a synchronized sorted set.
 */
+ (id<JavaUtilSortedSet>)synchronizedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set;

/*!
 @brief Returns a wrapper on the specified collection which throws an
 <code>UnsupportedOperationException</code> whenever an attempt is made to
 modify the collection.
 @param collection
 the collection to wrap in an unmodifiable collection.
 @return an unmodifiable collection.
 */
+ (id<JavaUtilCollection>)unmodifiableCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Returns a wrapper on the specified list which throws an
 <code>UnsupportedOperationException</code> whenever an attempt is made to
 modify the list.
 @param list
 the list to wrap in an unmodifiable list.
 @return an unmodifiable List.
 */
+ (id<JavaUtilList>)unmodifiableListWithJavaUtilList:(id<JavaUtilList>)list;

/*!
 @brief Returns a wrapper on the specified map which throws an
 <code>UnsupportedOperationException</code> whenever an attempt is made to
 modify the map.
 @param map
 the map to wrap in an unmodifiable map.
 @return a unmodifiable map.
 */
+ (id<JavaUtilMap>)unmodifiableMapWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Returns a wrapper on the specified set which throws an
 <code>UnsupportedOperationException</code> whenever an attempt is made to
 modify the set.
 @param set
 the set to wrap in an unmodifiable set.
 @return a unmodifiable set
 */
+ (id<JavaUtilSet>)unmodifiableSetWithJavaUtilSet:(id<JavaUtilSet>)set;

/*!
 @brief Returns a wrapper on the specified sorted map which throws an
 <code>UnsupportedOperationException</code> whenever an attempt is made to
 modify the sorted map.
 @param map
 the sorted map to wrap in an unmodifiable sorted map.
 @return a unmodifiable sorted map
 */
+ (id<JavaUtilSortedMap>)unmodifiableSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

/*!
 @brief Returns a wrapper on the specified sorted set which throws an
 <code>UnsupportedOperationException</code> whenever an attempt is made to
 modify the sorted set.
 @param set
 the sorted set to wrap in an unmodifiable sorted set.
 @return a unmodifiable sorted set.
 */
+ (id<JavaUtilSortedSet>)unmodifiableSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set;

#pragma mark Package-Private

/*!
 @brief Checks if specified object is instance of specified class.
 Used for a
 dynamically typesafe view of the collections.
 @param obj -
 object is to be checked
 @param type -
 class of object that should be
 @return specified object
 */
+ (id)checkTypeWithId:(id)obj
         withIOSClass:(IOSClass *)type;

@end

J2OBJC_STATIC_INIT(JavaUtilCollections)

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_EMPTY_LIST_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilCollections, EMPTY_LIST_, id<JavaUtilList>)

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_EMPTY_SET_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilCollections, EMPTY_SET_, id<JavaUtilSet>)

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_EMPTY_MAP_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilCollections, EMPTY_MAP_, id<JavaUtilMap>)

FOUNDATION_EXPORT jint JavaUtilCollections_binarySearchWithJavaUtilList_withId_(id<JavaUtilList> list, id object);

FOUNDATION_EXPORT jint JavaUtilCollections_binarySearchWithJavaUtilList_withId_withJavaUtilComparator_(id<JavaUtilList> list, id object, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void JavaUtilCollections_copy__WithJavaUtilList_withJavaUtilList_(id<JavaUtilList> destination, id<JavaUtilList> source);

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaUtilCollections_enumerationWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT void JavaUtilCollections_fillWithJavaUtilList_withId_(id<JavaUtilList> list, id object);

FOUNDATION_EXPORT id JavaUtilCollections_maxWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id JavaUtilCollections_maxWithJavaUtilCollection_withJavaUtilComparator_(id<JavaUtilCollection> collection, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id JavaUtilCollections_minWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id JavaUtilCollections_minWithJavaUtilCollection_withJavaUtilComparator_(id<JavaUtilCollection> collection, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_nCopiesWithInt_withId_(jint length, id object);

FOUNDATION_EXPORT void JavaUtilCollections_reverseWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilCollections_reverseOrder();

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilCollections_reverseOrderWithJavaUtilComparator_(id<JavaUtilComparator> c);

FOUNDATION_EXPORT void JavaUtilCollections_shuffleWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT void JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(id<JavaUtilList> list, JavaUtilRandom *random);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_singletonWithId_(id object);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_singletonListWithId_(id object);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_singletonMapWithId_withId_(id key, id value);

FOUNDATION_EXPORT void JavaUtilCollections_sortWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT void JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> list, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void JavaUtilCollections_swapWithJavaUtilList_withInt_withInt_(id<JavaUtilList> list, jint index1, jint index2);

FOUNDATION_EXPORT jboolean JavaUtilCollections_replaceAllWithJavaUtilList_withId_withId_(id<JavaUtilList> list, id obj, id obj2);

FOUNDATION_EXPORT void JavaUtilCollections_rotateWithJavaUtilList_withInt_(id<JavaUtilList> lst, jint dist);

FOUNDATION_EXPORT jint JavaUtilCollections_indexOfSubListWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list, id<JavaUtilList> sublist);

FOUNDATION_EXPORT jint JavaUtilCollections_lastIndexOfSubListWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list, id<JavaUtilList> sublist);

FOUNDATION_EXPORT JavaUtilArrayList *JavaUtilCollections_listWithJavaUtilEnumeration_(id<JavaUtilEnumeration> enumeration);

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilCollections_synchronizedCollectionWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_synchronizedListWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_synchronizedMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_synchronizedSetWithJavaUtilSet_(id<JavaUtilSet> set);

FOUNDATION_EXPORT id<JavaUtilSortedMap> JavaUtilCollections_synchronizedSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilSortedSet> JavaUtilCollections_synchronizedSortedSetWithJavaUtilSortedSet_(id<JavaUtilSortedSet> set);

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_unmodifiableListWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(id<JavaUtilSet> set);

FOUNDATION_EXPORT id<JavaUtilSortedMap> JavaUtilCollections_unmodifiableSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilSortedSet> JavaUtilCollections_unmodifiableSortedSetWithJavaUtilSortedSet_(id<JavaUtilSortedSet> set);

FOUNDATION_EXPORT jint JavaUtilCollections_frequencyWithJavaUtilCollection_withId_(id<JavaUtilCollection> c, id o);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_emptyList();

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_emptySet();

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_emptyMap();

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaUtilCollections_emptyEnumeration();

FOUNDATION_EXPORT id<JavaUtilIterator> JavaUtilCollections_emptyIterator();

FOUNDATION_EXPORT id<JavaUtilListIterator> JavaUtilCollections_emptyListIterator();

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilCollections_checkedCollectionWithJavaUtilCollection_withIOSClass_(id<JavaUtilCollection> c, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_checkedMapWithJavaUtilMap_withIOSClass_withIOSClass_(id<JavaUtilMap> m, IOSClass *keyType, IOSClass *valueType);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_checkedListWithJavaUtilList_withIOSClass_(id<JavaUtilList> list, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_checkedSetWithJavaUtilSet_withIOSClass_(id<JavaUtilSet> s, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilSortedMap> JavaUtilCollections_checkedSortedMapWithJavaUtilSortedMap_withIOSClass_withIOSClass_(id<JavaUtilSortedMap> m, IOSClass *keyType, IOSClass *valueType);

FOUNDATION_EXPORT id<JavaUtilSortedSet> JavaUtilCollections_checkedSortedSetWithJavaUtilSortedSet_withIOSClass_(id<JavaUtilSortedSet> s, IOSClass *type);

FOUNDATION_EXPORT jboolean JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(id<JavaUtilCollection> c, IOSObjectArray *a);

FOUNDATION_EXPORT jboolean JavaUtilCollections_disjointWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> c1, id<JavaUtilCollection> c2);

FOUNDATION_EXPORT id JavaUtilCollections_checkTypeWithId_withIOSClass_(id obj, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_newSetFromMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilQueue> JavaUtilCollections_asLifoQueueWithJavaUtilDeque_(id<JavaUtilDeque> deque);

FOUNDATION_EXPORT jint JavaUtilCollections_secondaryHashWithId_(id key);

FOUNDATION_EXPORT jint JavaUtilCollections_secondaryIdentityHashWithId_(id key);

FOUNDATION_EXPORT jint JavaUtilCollections_roundUpToPowerOfTwoWithInt_(jint i);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections)

@interface JavaUtilCollections_SynchronizedCollection : NSObject < JavaUtilCollection, JavaIoSerializable > {
 @public
  id<JavaUtilCollection> c_;
  id mutex_;
}

#pragma mark Public

- (jboolean)addWithId:(id)object;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (void)clear;

- (jboolean)containsWithId:(id)object;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)object;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                    withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedCollection)

J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedCollection, c_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedCollection, mutex_, id)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_(JavaUtilCollections_SynchronizedCollection *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedCollection *new_JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_withId_(JavaUtilCollections_SynchronizedCollection *self, id<JavaUtilCollection> collection, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedCollection *new_JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_withId_(id<JavaUtilCollection> collection, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedCollection)

@interface JavaUtilCollections_SynchronizedList : JavaUtilCollections_SynchronizedCollection < JavaUtilList > {
 @public
  id<JavaUtilList> list_;
}

#pragma mark Public

- (void)addWithInt:(jint)location
            withId:(id)object;

- (jboolean)addAllWithInt:(jint)location
   withJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)isEqual:(id)object;

- (id)getWithInt:(jint)location;

- (NSUInteger)hash;

- (jint)indexOfWithId:(id)object;

- (jint)lastIndexOfWithId:(id)object;

- (id<JavaUtilListIterator>)listIterator;

- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)location;

- (id)removeWithInt:(jint)location;

- (id)setWithInt:(jint)location
          withId:(id)object;

- (id<JavaUtilList>)subListWithInt:(jint)start
                           withInt:(jint)end;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l
                              withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedList)

J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedList, list_, id<JavaUtilList>)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedList_initWithJavaUtilList_(JavaUtilCollections_SynchronizedList *self, id<JavaUtilList> l);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedList *new_JavaUtilCollections_SynchronizedList_initWithJavaUtilList_(id<JavaUtilList> l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedList_initWithJavaUtilList_withId_(JavaUtilCollections_SynchronizedList *self, id<JavaUtilList> l, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedList *new_JavaUtilCollections_SynchronizedList_initWithJavaUtilList_withId_(id<JavaUtilList> l, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedList)

@interface JavaUtilCollections_SynchronizedRandomAccessList : JavaUtilCollections_SynchronizedList < JavaUtilRandomAccess >

#pragma mark Public

- (id<JavaUtilList>)subListWithInt:(jint)start
                           withInt:(jint)end;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l
                              withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedRandomAccessList)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_(JavaUtilCollections_SynchronizedRandomAccessList *self, id<JavaUtilList> l);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedRandomAccessList *new_JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_(id<JavaUtilList> l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_withId_(JavaUtilCollections_SynchronizedRandomAccessList *self, id<JavaUtilList> l, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedRandomAccessList *new_JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_withId_(id<JavaUtilList> l, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedRandomAccessList)

@interface JavaUtilCollections_SynchronizedMap : NSObject < JavaUtilMap, JavaIoSerializable > {
 @public
  id mutex_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (jboolean)containsValueWithId:(id)value;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)object;

- (id)getWithId:(id)key;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id)key
         withId:(id)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id)removeWithId:(id)key;

- (jint)size;

- (NSString *)description;

- (id<JavaUtilCollection>)values;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                             withId:(id)mutex;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedMap)

J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedMap, mutex_, id)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_(JavaUtilCollections_SynchronizedMap *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedMap *new_JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_withId_(JavaUtilCollections_SynchronizedMap *self, id<JavaUtilMap> map, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedMap *new_JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_withId_(id<JavaUtilMap> map, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedMap)

@interface JavaUtilCollections_SynchronizedSet : JavaUtilCollections_SynchronizedCollection < JavaUtilSet >

#pragma mark Public

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)set;

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)set
                             withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedSet)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_(JavaUtilCollections_SynchronizedSet *self, id<JavaUtilSet> set);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSet *new_JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_(id<JavaUtilSet> set) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_withId_(JavaUtilCollections_SynchronizedSet *self, id<JavaUtilSet> set, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSet *new_JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_withId_(id<JavaUtilSet> set, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedSet)

@interface JavaUtilCollections_SynchronizedSortedMap : JavaUtilCollections_SynchronizedMap < JavaUtilSortedMap >

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id)firstKey;

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey;

- (id)lastKey;

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey;

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                                   withId:(id)mutex;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedSortedMap)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_(JavaUtilCollections_SynchronizedSortedMap *self, id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedMap *new_JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_withId_(JavaUtilCollections_SynchronizedSortedMap *self, id<JavaUtilSortedMap> map, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedMap *new_JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_withId_(id<JavaUtilSortedMap> map, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedSortedMap)

@interface JavaUtilCollections_SynchronizedSortedSet : JavaUtilCollections_SynchronizedSet < JavaUtilSortedSet >

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id)first;

- (id<JavaUtilSortedSet>)headSetWithId:(id)end;

- (id)last;

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end;

- (id<JavaUtilSortedSet>)tailSetWithId:(id)start;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set;

- (instancetype)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set
                                   withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedSortedSet)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_(JavaUtilCollections_SynchronizedSortedSet *self, id<JavaUtilSortedSet> set);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedSet *new_JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_(id<JavaUtilSortedSet> set) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_withId_(JavaUtilCollections_SynchronizedSortedSet *self, id<JavaUtilSortedSet> set, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedSet *new_JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_withId_(id<JavaUtilSortedSet> set, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedSortedSet)

#endif // _JavaUtilCollections_H_
