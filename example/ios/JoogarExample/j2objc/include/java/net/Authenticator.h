//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/Authenticator.java
//

#ifndef _JavaNetAuthenticator_H_
#define _JavaNetAuthenticator_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class JavaNetAuthenticator_RequestorTypeEnum;
@class JavaNetInetAddress;
@class JavaNetPasswordAuthentication;
@class JavaNetURL;

/*!
 @brief An implementation of this class is able to obtain authentication information
 for a connection in several ways.
 For this purpose it has to set the default
 authenticator which extends <code>Authenticator</code> by <code>setDefault(Authenticator a)</code>
 . Then it should override <code>getPasswordAuthentication()</code>
  which dictates how the authentication info is
 obtained. Usually, it prompts the user for the required input.
 */
@interface JavaNetAuthenticator : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Invokes the methods of the registered
 authenticator to get the authentication info.
 @return password authentication info or <code>null</code> if no authenticator
 exists.
 @param rAddr
 address of the connection that requests authentication.
 @param rPort
 port of the connection that requests authentication.
 @param rProtocol
 protocol of the connection that requests authentication.
 @param rPrompt
 realm of the connection that requests authentication.
 @param rScheme
 scheme of the connection that requests authentication.
 */
+ (JavaNetPasswordAuthentication *)requestPasswordAuthenticationWithJavaNetInetAddress:(JavaNetInetAddress *)rAddr
                                                                               withInt:(jint)rPort
                                                                          withNSString:(NSString *)rProtocol
                                                                          withNSString:(NSString *)rPrompt
                                                                          withNSString:(NSString *)rScheme;

/*!
 @brief Invokes the methods of the registered
 authenticator to get the authentication info.
 @return password authentication info or <code>null</code> if no authenticator
 exists.
 @param rHost
 host name of the connection that requests authentication.
 @param rAddr
 address of the connection that requests authentication.
 @param rPort
 port of the connection that requests authentication.
 @param rProtocol
 protocol of the connection that requests authentication.
 @param rPrompt
 realm of the connection that requests authentication.
 @param rScheme
 scheme of the connection that requests authentication.
 */
+ (JavaNetPasswordAuthentication *)requestPasswordAuthenticationWithNSString:(NSString *)rHost
                                                      withJavaNetInetAddress:(JavaNetInetAddress *)rAddr
                                                                     withInt:(jint)rPort
                                                                withNSString:(NSString *)rProtocol
                                                                withNSString:(NSString *)rPrompt
                                                                withNSString:(NSString *)rScheme;

/*!
 @brief Invokes the methods of the registered
 authenticator to get the authentication info.
 @return password authentication info or <code>null</code> if no authenticator
 exists.
 @param rHost
 host name of the connection that requests authentication.
 @param rAddr
 address of the connection that requests authentication.
 @param rPort
 port of the connection that requests authentication.
 @param rProtocol
 protocol of the connection that requests authentication.
 @param rPrompt
 realm of the connection that requests authentication.
 @param rScheme
 scheme of the connection that requests authentication.
 @param rURL
 url of the connection that requests authentication.
 @param reqType
 requestor type of the connection that requests authentication.
 */
+ (JavaNetPasswordAuthentication *)requestPasswordAuthenticationWithNSString:(NSString *)rHost
                                                      withJavaNetInetAddress:(JavaNetInetAddress *)rAddr
                                                                     withInt:(jint)rPort
                                                                withNSString:(NSString *)rProtocol
                                                                withNSString:(NSString *)rPrompt
                                                                withNSString:(NSString *)rScheme
                                                              withJavaNetURL:(JavaNetURL *)rURL
                                  withJavaNetAuthenticator_RequestorTypeEnum:(JavaNetAuthenticator_RequestorTypeEnum *)reqType;

/*!
 @brief Sets <code>a</code> as the default authenticator.
 It will be called whenever
 the realm that the URL is pointing to requires authorization.
 @param a
 authenticator which has to be set as default.
 */
+ (void)setDefaultWithJavaNetAuthenticator:(JavaNetAuthenticator *)a;

#pragma mark Protected

/*!
 @brief Returns the collected username and password for authorization.
 The
 subclass has to override this method to return a value different to the
 default which is <code>null</code>.
 <p>
 Returns <code>null</code> by default.
 @return collected password authentication data.
 */
- (JavaNetPasswordAuthentication *)getPasswordAuthentication;

/*!
 @brief Returns the host name of the connection that requests authentication or
 <code>null</code> if unknown.
 @return name of the requesting host or <code>null</code>.
 */
- (NSString *)getRequestingHost;

/*!
 @brief Returns the port of the connection that requests authorization.
 @return port of the connection.
 */
- (jint)getRequestingPort;

/*!
 @brief Returns the realm (prompt string) of the connection that requests
 authorization.
 @return prompt string of the connection.
 */
- (NSString *)getRequestingPrompt;

/*!
 @brief Returns the protocol of the connection that requests authorization.
 @return protocol of the connection.
 */
- (NSString *)getRequestingProtocol;

/*!
 @brief Returns the scheme of the connection that requests authorization, for
 example HTTP Basic Authentication.
 @return scheme of the connection.
 */
- (NSString *)getRequestingScheme;

/*!
 @brief Returns the address of the connection that requests authorization or
 <code>null</code> if unknown.
 @return address of the connection.
 */
- (JavaNetInetAddress *)getRequestingSite;

/*!
 @brief Returns the URL of the authentication request.
 @return authentication request url.
 */
- (JavaNetURL *)getRequestingURL;

/*!
 @brief Returns the type of this request, it can be <code>PROXY</code> or <code>SERVER</code>.
 @return RequestorType of the authentication request.
 */
- (JavaNetAuthenticator_RequestorTypeEnum *)getRequestorType;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetAuthenticator)

FOUNDATION_EXPORT JavaNetPasswordAuthentication *JavaNetAuthenticator_requestPasswordAuthenticationWithJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_(JavaNetInetAddress *rAddr, jint rPort, NSString *rProtocol, NSString *rPrompt, NSString *rScheme);

FOUNDATION_EXPORT void JavaNetAuthenticator_setDefaultWithJavaNetAuthenticator_(JavaNetAuthenticator *a);

FOUNDATION_EXPORT JavaNetPasswordAuthentication *JavaNetAuthenticator_requestPasswordAuthenticationWithNSString_withJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_(NSString *rHost, JavaNetInetAddress *rAddr, jint rPort, NSString *rProtocol, NSString *rPrompt, NSString *rScheme);

FOUNDATION_EXPORT JavaNetPasswordAuthentication *JavaNetAuthenticator_requestPasswordAuthenticationWithNSString_withJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_withJavaNetURL_withJavaNetAuthenticator_RequestorTypeEnum_(NSString *rHost, JavaNetInetAddress *rAddr, jint rPort, NSString *rProtocol, NSString *rPrompt, NSString *rScheme, JavaNetURL *rURL, JavaNetAuthenticator_RequestorTypeEnum *reqType);

FOUNDATION_EXPORT void JavaNetAuthenticator_init(JavaNetAuthenticator *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetAuthenticator)

typedef NS_ENUM(NSUInteger, JavaNetAuthenticator_RequestorType) {
  JavaNetAuthenticator_RequestorType_PROXY = 0,
  JavaNetAuthenticator_RequestorType_SERVER = 1,
};

/*!
 @brief Enumeration class for the origin of the authentication request.
 */
@interface JavaNetAuthenticator_RequestorTypeEnum : JavaLangEnum < NSCopying >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *JavaNetAuthenticator_RequestorTypeEnum_values();

+ (JavaNetAuthenticator_RequestorTypeEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT JavaNetAuthenticator_RequestorTypeEnum *JavaNetAuthenticator_RequestorTypeEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(JavaNetAuthenticator_RequestorTypeEnum)

FOUNDATION_EXPORT JavaNetAuthenticator_RequestorTypeEnum *JavaNetAuthenticator_RequestorTypeEnum_values_[];

#define JavaNetAuthenticator_RequestorTypeEnum_PROXY JavaNetAuthenticator_RequestorTypeEnum_values_[JavaNetAuthenticator_RequestorType_PROXY]
J2OBJC_ENUM_CONSTANT_GETTER(JavaNetAuthenticator_RequestorTypeEnum, PROXY)

#define JavaNetAuthenticator_RequestorTypeEnum_SERVER JavaNetAuthenticator_RequestorTypeEnum_values_[JavaNetAuthenticator_RequestorType_SERVER]
J2OBJC_ENUM_CONSTANT_GETTER(JavaNetAuthenticator_RequestorTypeEnum, SERVER)

J2OBJC_TYPE_LITERAL_HEADER(JavaNetAuthenticator_RequestorTypeEnum)

#endif // _JavaNetAuthenticator_H_
