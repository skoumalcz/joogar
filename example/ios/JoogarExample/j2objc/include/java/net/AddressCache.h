//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/AddressCache.java
//

#ifndef _JavaNetAddressCache_H_
#define _JavaNetAddressCache_H_

#include "J2ObjC_header.h"

@class IOSObjectArray;

/*!
 @brief Implements caching for <code>InetAddress</code>.
 We use a unified cache for both positive and negative
 cache entries.
 TODO: benchmark and optimize InetAddress until we get to the point where we can just rely on
 the C library level caching. The main thing caching at this level buys us is avoiding repeated
 conversions from 'struct sockaddr's to InetAddress[].
 */
@interface JavaNetAddressCache : NSObject

#pragma mark Public

/*!
 @brief Removes all entries from the cache.
 */
- (void)clear;

/*!
 @brief Returns the cached InetAddress[] associated with 'hostname'.
 Returns null if nothing is known
 about 'hostname'. Returns a String suitable for use as an UnknownHostException detail
 message if 'hostname' is known not to exist.
 */
- (id)getWithNSString:(NSString *)hostname;

/*!
 @brief Associates the given 'addresses' with 'hostname'.
 The association will expire after a
 certain length of time.
 */
- (void)putWithNSString:(NSString *)hostname
withJavaNetInetAddressArray:(IOSObjectArray *)addresses;

/*!
 @brief Records that 'hostname' is known not to have any associated addresses.
 (I.e. insert a
 negative cache entry.)
 */
- (void)putUnknownHostWithNSString:(NSString *)hostname
                      withNSString:(NSString *)detailMessage;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetAddressCache)

FOUNDATION_EXPORT void JavaNetAddressCache_init(JavaNetAddressCache *self);

FOUNDATION_EXPORT JavaNetAddressCache *new_JavaNetAddressCache_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNetAddressCache)

@interface JavaNetAddressCache_AddressCacheEntry : NSObject {
 @public
  id value_;
  /*!
   @brief The absolute expiry time in nanoseconds.
   Nanoseconds from System.nanoTime is ideal
 because -- unlike System.currentTimeMillis -- it can never go backwards.
 We don't need to worry about overflow with a TTL_NANOS of 2s.
   */
  jlong expiryNanos_;
}

#pragma mark Package-Private

- (instancetype)initWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetAddressCache_AddressCacheEntry)

J2OBJC_FIELD_SETTER(JavaNetAddressCache_AddressCacheEntry, value_, id)

FOUNDATION_EXPORT void JavaNetAddressCache_AddressCacheEntry_initWithId_(JavaNetAddressCache_AddressCacheEntry *self, id value);

FOUNDATION_EXPORT JavaNetAddressCache_AddressCacheEntry *new_JavaNetAddressCache_AddressCacheEntry_initWithId_(id value) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNetAddressCache_AddressCacheEntry)

#endif // _JavaNetAddressCache_H_
