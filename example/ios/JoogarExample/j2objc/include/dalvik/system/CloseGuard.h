//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/dalvik/src/main/java/dalvik/system/CloseGuard.java
//

#ifndef _DalvikSystemCloseGuard_H_
#define _DalvikSystemCloseGuard_H_

#include "J2ObjC_header.h"

@class JavaLangThrowable;
@protocol DalvikSystemCloseGuard_Reporter;

/*!
 @brief CloseGuard is a mechanism for flagging implicit finalizer cleanup of
 resources that should have been cleaned up by explicit close
 methods (aka "explicit termination methods" in Effective Java).
 <p>
 A simple example: 
@code
   
   class Foo 
       private final CloseGuard guard = CloseGuard.get();
       ...
       public Foo() {
           ...;
           guard.open("cleanup");
       }
       public void cleanup() {
          guard.close();
          ...;
       }
       protected void finalize() throws Throwable {
           try {
               if (guard != null) {
                   guard.warnIfOpen();
               }
               cleanup();
           } finally {
               super.finalize();
           }
       }
   }
  
@endcode
 In usage where the resource to be explicitly cleaned up are
 allocated after object construction, CloseGuard protection can
 be deferred. For example: 
@code
   
   class Bar 
       private final CloseGuard guard = CloseGuard.get();
       ...
       public Bar() {
           ...;
       }
       public void connect() {
          ...;
          guard.open("cleanup");
       }
       public void cleanup() {
          guard.close();
          ...;
       }
       protected void finalize() throws Throwable {
           try {
               if (guard != null) {
                   guard.warnIfOpen();
               }
               cleanup();
           } finally {
               super.finalize();
           }
       }
   }
  
@endcode
 When used in a constructor calls to <code>open</code> should occur at
 the end of the constructor since an exception that would cause
 abrupt termination of the constructor will mean that the user will
 not have a reference to the object to cleanup explicitly. When used
 in a method, the call to <code>open</code> should occur just after
 resource acquisition.
 <p>
 Note that the null check on <code>guard</code> in the finalizer is to
 cover cases where a constructor throws an exception causing the
 <code>guard</code> to be uninitialized.
 */
@interface DalvikSystemCloseGuard : NSObject

#pragma mark Public

/*!
 @brief Marks this CloseGuard instance as closed to avoid warnings on
 finalization.
 */
- (void)close;

/*!
 @brief Returns a CloseGuard instance.
 If CloseGuard is enabled, <code>#open(String)</code>
  can be used to set up the instance to warn on
 failure to close. If CloseGuard is disabled, a non-null no-op
 instance is returned.
 */
+ (DalvikSystemCloseGuard *)get;

/*!
 @brief Returns non-null CloseGuard.Reporter.
 */
+ (id<DalvikSystemCloseGuard_Reporter>)getReporter;

/*!
 @brief If CloseGuard is enabled, <code>open</code> initializes the instance
 with a warning that the caller should have explicitly called the
 <code>closer</code> method instead of relying on finalization.
 @param closer non-null name of explicit termination method
 @throws NullPointerException if closer is null, regardless of
 whether or not CloseGuard is enabled
 */
- (void)openWithNSString:(NSString *)closer;

/*!
 @brief Used to enable or disable CloseGuard.
 Note that CloseGuard only
 warns if it is enabled for both allocation and finalization.
 */
+ (void)setEnabledWithBoolean:(jboolean)enabled;

/*!
 @brief Used to replace default Reporter used to warn of CloseGuard
 violations.
 Must be non-null.
 */
+ (void)setReporterWithDalvikSystemCloseGuard_Reporter:(id<DalvikSystemCloseGuard_Reporter>)reporter;

/*!
 @brief If CloseGuard is enabled, logs a warning if the caller did not
 properly cleanup by calling an explicit close method
 before finalization.
 If CloseGuard is disabled, no action is
 performed.
 */
- (void)warnIfOpen;

@end

J2OBJC_STATIC_INIT(DalvikSystemCloseGuard)

FOUNDATION_EXPORT DalvikSystemCloseGuard *DalvikSystemCloseGuard_get();

FOUNDATION_EXPORT void DalvikSystemCloseGuard_setEnabledWithBoolean_(jboolean enabled);

FOUNDATION_EXPORT void DalvikSystemCloseGuard_setReporterWithDalvikSystemCloseGuard_Reporter_(id<DalvikSystemCloseGuard_Reporter> reporter);

FOUNDATION_EXPORT id<DalvikSystemCloseGuard_Reporter> DalvikSystemCloseGuard_getReporter();

J2OBJC_TYPE_LITERAL_HEADER(DalvikSystemCloseGuard)

/*!
 @brief Interface to allow customization of reporting behavior.
 */
@protocol DalvikSystemCloseGuard_Reporter < NSObject, JavaObject >

- (void)reportWithNSString:(NSString *)message
     withJavaLangThrowable:(JavaLangThrowable *)allocationSite;

@end

J2OBJC_EMPTY_STATIC_INIT(DalvikSystemCloseGuard_Reporter)

J2OBJC_TYPE_LITERAL_HEADER(DalvikSystemCloseGuard_Reporter)

#endif // _DalvikSystemCloseGuard_H_
