//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/android/util/Log.java
//

#ifndef _AndroidUtilLog_H_
#define _AndroidUtilLog_H_

#include "J2ObjC_header.h"

@class AndroidUtilLog_TerribleFailure;
@class JavaLangThrowable;
@protocol AndroidUtilLog_TerribleFailureHandler;

#define AndroidUtilLog_VERBOSE 2
#define AndroidUtilLog_DEBUG 3
#define AndroidUtilLog_INFO 4
#define AndroidUtilLog_WARN 5
#define AndroidUtilLog_ERROR 6
#define AndroidUtilLog_ASSERT 7
#define AndroidUtilLog_LOG_ID_MAIN 0
#define AndroidUtilLog_LOG_ID_RADIO 1
#define AndroidUtilLog_LOG_ID_EVENTS 2
#define AndroidUtilLog_LOG_ID_SYSTEM 3

/*!
 @brief API for sending log output.
 <p>Generally, use the Log.v() Log.d() Log.i() Log.w() and Log.e()
 methods.
 <p>The order in terms of verbosity, from least to most is
 ERROR, WARN, INFO, DEBUG, VERBOSE.  Verbose should never be compiled
 into an application except during development.  Debug logs are compiled
 in but stripped at runtime.  Error, warning and info logs are always kept.
 <p><b>Tip:</b> A good convention is to declare a <code>TAG</code> constant
 in your class:
 @code
private static final String TAG = "MyActivity";
@endcode
 and use that in subsequent calls to the log methods.
 </p>
 <p><b>Tip:</b> Don't forget that when you make a call like
 @code
Log.v(TAG, "index=" + i);
@endcode
 that when you're building the string to pass into Log.d, the compiler uses a
 StringBuilder and at least three allocations occur: the StringBuilder
 itself, the buffer, and the String object.  Realistically, there is also
 another buffer allocation and copy, and even more pressure on the gc.
 That means that if your log message is filtered out, you might be doing
 significant work and incurring significant overhead.
 */
@interface AndroidUtilLog : NSObject

#pragma mark Public

/*!
 @brief Send a <code>DEBUG</code> log message.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 */
+ (jint)dWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

/*!
 @brief Send a <code>DEBUG</code> log message and log the exception.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 @param tr An exception to log
 */
+ (jint)dWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief Send an <code>ERROR</code> log message.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 */
+ (jint)eWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

/*!
 @brief Send a <code>ERROR</code> log message and log the exception.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 @param tr An exception to log
 */
+ (jint)eWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief Handy function to get a loggable stack trace from a Throwable
 @param tr An exception to log
 */
+ (NSString *)getStackTraceStringWithJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief Send an <code>INFO</code> log message.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 */
+ (jint)iWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

/*!
 @brief Send a <code>INFO</code> log message and log the exception.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 @param tr An exception to log
 */
+ (jint)iWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief Checks to see whether or not a log for the specified tag is loggable at the specified level.
 The default level of any tag is set to INFO. This means that any level above and including
 INFO will be logged. Before you make any calls to a logging method you should check to see
 if your tag should be logged. You can change the default level by setting a system property:
 'setprop log.tag.&lt;YOUR_LOG_TAG> &lt;LEVEL>'
 Where level is either VERBOSE, DEBUG, INFO, WARN, ERROR, ASSERT, or SUPPRESS. SUPPRESS will
 turn off all logging for your tag. You can also create a local.prop file that with the
 following in it:
 'log.tag.&lt;YOUR_LOG_TAG>=&lt;LEVEL>'
 and place that in /data/local.prop.
 @param tag The tag to check.
 @param level The level to check.
 @return Whether or not that this is allowed to be logged.
 @throws IllegalArgumentException is thrown if the tag.length() > 23.
 */
+ (jboolean)isLoggableWithNSString:(NSString *)tag
                           withInt:(jint)level;

/*!
 @brief Low-level logging call.
 @param priority The priority/type of this log message
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 @return The number of bytes written.
 */
+ (jint)printlnWithInt:(jint)priority
          withNSString:(NSString *)tag
          withNSString:(NSString *)msg;

/*!
  
 */
+ (jint)println_nativeWithInt:(jint)bufID
                      withInt:(jint)priority
                 withNSString:(NSString *)tag
                 withNSString:(NSString *)msg;

/*!
 @brief Sets the terrible failure handler, for testing.
 @return the old handler
 */
+ (id<AndroidUtilLog_TerribleFailureHandler>)setWtfHandlerWithAndroidUtilLog_TerribleFailureHandler:(id<AndroidUtilLog_TerribleFailureHandler>)handler;

/*!
 @brief Send a <code>VERBOSE</code> log message.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 */
+ (jint)vWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

/*!
 @brief Send a <code>VERBOSE</code> log message and log the exception.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 @param tr An exception to log
 */
+ (jint)vWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief Send a <code>WARN</code> log message.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 */
+ (jint)wWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

/*!
 @brief Send a <code>WARN</code> log message and log the exception.
 @param tag Used to identify the source of a log message.  It usually identifies
 the class or activity where the log call occurs.
 @param msg The message you would like logged.
 @param tr An exception to log
 */
+ (jint)wWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

+ (jint)wWithNSString:(NSString *)tag
withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief What a Terrible Failure: Report a condition that should never happen.
 The error will always be logged at level ASSERT with the call stack.
 @param tag Used to identify the source of a log message.
 @param msg The message you would like logged.
 */
+ (jint)wtfWithNSString:(NSString *)tag
           withNSString:(NSString *)msg;

/*!
 @brief What a Terrible Failure: Report an exception that should never happen.
 Similar to <code>wtf(String,Throwable)</code>, with a message as well.
 @param tag Used to identify the source of a log message.
 @param msg The message you would like logged.
 @param tr An exception to log.  May be null.
 */
+ (jint)wtfWithNSString:(NSString *)tag
           withNSString:(NSString *)msg
  withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief What a Terrible Failure: Report an exception that should never happen.
 Similar to <code>wtf(String,String)</code>, with an exception to log.
 @param tag Used to identify the source of a log message.
 @param tr An exception to log.
 */
+ (jint)wtfWithNSString:(NSString *)tag
  withJavaLangThrowable:(JavaLangThrowable *)tr;

/*!
 @brief Like <code>wtf(String,String)</code>, but also writes to the log the full
 call stack.
 */
+ (jint)wtfStackWithNSString:(NSString *)tag
                withNSString:(NSString *)msg;

#pragma mark Package-Private

+ (jint)wtfWithInt:(jint)logId
      withNSString:(NSString *)tag
      withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr
       withBoolean:(jboolean)localStack;

@end

J2OBJC_STATIC_INIT(AndroidUtilLog)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, VERBOSE, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, DEBUG, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, INFO, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, WARN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, ERROR, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, ASSERT, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, LOG_ID_MAIN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, LOG_ID_RADIO, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, LOG_ID_EVENTS, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidUtilLog, LOG_ID_SYSTEM, jint)

FOUNDATION_EXPORT jint AndroidUtilLog_vWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_vWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_dWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_dWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_iWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_iWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_wWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jboolean AndroidUtilLog_isLoggableWithNSString_withInt_(NSString *tag, jint level);

FOUNDATION_EXPORT jint AndroidUtilLog_wWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_eWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_wtfWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_wtfStackWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_wtfWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_wtfWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_wtfWithInt_withNSString_withNSString_withJavaLangThrowable_withBoolean_(jint logId, NSString *tag, NSString *msg, JavaLangThrowable *tr, jboolean localStack);

FOUNDATION_EXPORT id<AndroidUtilLog_TerribleFailureHandler> AndroidUtilLog_setWtfHandlerWithAndroidUtilLog_TerribleFailureHandler_(id<AndroidUtilLog_TerribleFailureHandler> handler);

FOUNDATION_EXPORT NSString *AndroidUtilLog_getStackTraceStringWithJavaLangThrowable_(JavaLangThrowable *tr);

FOUNDATION_EXPORT jint AndroidUtilLog_printlnWithInt_withNSString_withNSString_(jint priority, NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint AndroidUtilLog_println_nativeWithInt_withInt_withNSString_withNSString_(jint bufID, jint priority, NSString *tag, NSString *msg);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilLog)

/*!
 @brief Interface to handle terrible failures from <code>wtf</code>.
 */
@protocol AndroidUtilLog_TerribleFailureHandler < NSObject, JavaObject >

- (void)onTerribleFailureWithNSString:(NSString *)tag
   withAndroidUtilLog_TerribleFailure:(AndroidUtilLog_TerribleFailure *)what;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilLog_TerribleFailureHandler)

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilLog_TerribleFailureHandler)

#endif // _AndroidUtilLog_H_
