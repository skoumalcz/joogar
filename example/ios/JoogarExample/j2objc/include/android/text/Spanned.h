//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/android/text/Spanned.java
//

#ifndef _AndroidTextSpanned_H_
#define _AndroidTextSpanned_H_

#include "J2ObjC_header.h"
#include "java/lang/CharSequence.h"

@class IOSClass;
@class IOSObjectArray;

#define AndroidTextSpanned_SPAN_POINT_MARK_MASK 51
#define AndroidTextSpanned_SPAN_MARK_MARK 17
#define AndroidTextSpanned_SPAN_MARK_POINT 18
#define AndroidTextSpanned_SPAN_POINT_MARK 33
#define AndroidTextSpanned_SPAN_POINT_POINT 34
#define AndroidTextSpanned_SPAN_PARAGRAPH 51
#define AndroidTextSpanned_SPAN_INCLUSIVE_EXCLUSIVE 17
#define AndroidTextSpanned_SPAN_INCLUSIVE_INCLUSIVE 18
#define AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE 33
#define AndroidTextSpanned_SPAN_EXCLUSIVE_INCLUSIVE 34
#define AndroidTextSpanned_SPAN_COMPOSING 256
#define AndroidTextSpanned_SPAN_INTERMEDIATE 512
#define AndroidTextSpanned_SPAN_USER_SHIFT 24
#define AndroidTextSpanned_SPAN_USER -16777216
#define AndroidTextSpanned_SPAN_PRIORITY_SHIFT 16
#define AndroidTextSpanned_SPAN_PRIORITY 16711680

/*!
 @brief This is the interface for text that has markup objects attached to
 ranges of it.
 Not all text classes have mutable markup or text;
 see <code>Spannable</code> for mutable markup and <code>Editable</code> for
 mutable text.
 */
@protocol AndroidTextSpanned < JavaLangCharSequence, NSObject, JavaObject >

/*!
 @brief Return an array of the markup objects attached to the specified
 slice of this CharSequence and whose type is the specified type
 or a subclass of it.
 Specify Object.class for the type if you
 want all the objects regardless of type.
 */
- (IOSObjectArray *)getSpansWithInt:(jint)start
                            withInt:(jint)end
                       withIOSClass:(IOSClass *)type;

/*!
 @brief Return the beginning of the range of text to which the specified
 markup object is attached, or -1 if the object is not attached.
 */
- (jint)getSpanStartWithId:(id)tag;

/*!
 @brief Return the end of the range of text to which the specified
 markup object is attached, or -1 if the object is not attached.
 */
- (jint)getSpanEndWithId:(id)tag;

/*!
 @brief Return the flags that were specified when <code>Spannable.setSpan</code> was
 used to attach the specified markup object, or 0 if the specified
 object has not been attached.
 */
- (jint)getSpanFlagsWithId:(id)tag;

/*!
 @brief Return the first offset greater than or equal to <code>start</code>
 where a markup object of class <code>type</code> begins or ends,
 or <code>limit</code> if there are no starts or ends greater than or
 equal to <code>start</code> but less than <code>limit</code>.
 Specify
 <code>null</code> or Object.class for the type if you want every
 transition regardless of type.
 */
- (jint)nextSpanTransitionWithInt:(jint)start
                          withInt:(jint)limit
                     withIOSClass:(IOSClass *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTextSpanned)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_POINT_MARK_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_MARK_MARK, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_MARK_POINT, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_POINT_MARK, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_POINT_POINT, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_PARAGRAPH, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_INCLUSIVE_EXCLUSIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_INCLUSIVE_INCLUSIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_EXCLUSIVE_EXCLUSIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_EXCLUSIVE_INCLUSIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_COMPOSING, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_INTERMEDIATE, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_USER_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_USER, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_PRIORITY_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextSpanned, SPAN_PRIORITY, jint)

J2OBJC_TYPE_LITERAL_HEADER(AndroidTextSpanned)

#endif // _AndroidTextSpanned_H_
