//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/io/Streams.java
//

#ifndef _LibcoreIoStreams_H_
#define _LibcoreIoStreams_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;

@interface LibcoreIoStreams : NSObject

#pragma mark Public

/*!
 @brief Copies all of the bytes from <code>in</code> to <code>out</code>.
 Neither stream is closed.
 Returns the total number of bytes transferred.
 */
+ (jint)copy__WithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns the ASCII characters up to but not including the next "\r\n", or
 "\n".
 @throws java.io.EOFException if the stream is exhausted before the next newline
 character.
 */
+ (NSString *)readAsciiLineWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Returns a byte[] containing the remainder of 'in', closing it when done.
 */
+ (IOSByteArray *)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Fills 'dst' with bytes from 'in', throwing EOFException if insufficient bytes are available.
 */
+ (void)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withByteArray:(IOSByteArray *)dst;

/*!
 @brief Reads exactly 'byteCount' bytes from 'in' (into 'dst' at offset 'offset'), and throws
 EOFException if insufficient bytes are available.
 Used to implement <code>java.io.DataInputStream.readFully(byte[],int,int)</code>.
 */
+ (void)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withByteArray:(IOSByteArray *)dst
                               withInt:(jint)offset
                               withInt:(jint)byteCount;

/*!
 @brief Returns the remainder of 'reader' as a string, closing it when done.
 */
+ (NSString *)readFullyWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Returns a byte[] containing the remainder of 'in'.
 */
+ (IOSByteArray *)readFullyNoCloseWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Implements InputStream.read(int) in terms of InputStream.read(byte[], int, int).
 InputStream assumes that you implement InputStream.read(int) and provides default
 implementations of the others, but often the opposite is more efficient.
 */
+ (jint)readSingleByteWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (void)skipAllWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Skip <b>at most</b> <code>byteCount</code> bytes from <code>in</code> by calling read
 repeatedly until either the stream is exhausted or we read fewer bytes than
 we ask for.
 <p>This method reuses the skip buffer but is careful to never use it at
 the same time that another stream is using it. Otherwise streams that use
 the caller's buffer for consistency checks like CRC could be clobbered by
 other threads. A thread-local buffer is also insufficient because some
 streams may call other streams in their skip() method, also clobbering the
 buffer.
 */
+ (jlong)skipByReadingWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withLong:(jlong)byteCount;

/*!
 @brief Implements OutputStream.write(int) in terms of OutputStream.write(byte[], int, int).
 OutputStream assumes that you implement OutputStream.write(int) and provides default
 implementations of the others, but often the opposite is more efficient.
 */
+ (void)writeSingleByteWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                      withInt:(jint)b;

@end

J2OBJC_STATIC_INIT(LibcoreIoStreams)

FOUNDATION_EXPORT jint LibcoreIoStreams_readSingleByteWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void LibcoreIoStreams_writeSingleByteWithJavaIoOutputStream_withInt_(JavaIoOutputStream *outArg, jint b);

FOUNDATION_EXPORT void LibcoreIoStreams_readFullyWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inArg, IOSByteArray *dst);

FOUNDATION_EXPORT void LibcoreIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inArg, IOSByteArray *dst, jint offset, jint byteCount);

FOUNDATION_EXPORT IOSByteArray *LibcoreIoStreams_readFullyWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT IOSByteArray *LibcoreIoStreams_readFullyNoCloseWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT NSString *LibcoreIoStreams_readFullyWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT void LibcoreIoStreams_skipAllWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT jlong LibcoreIoStreams_skipByReadingWithJavaIoInputStream_withLong_(JavaIoInputStream *inArg, jlong byteCount);

FOUNDATION_EXPORT jint LibcoreIoStreams_copy__WithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT NSString *LibcoreIoStreams_readAsciiLineWithJavaIoInputStream_(JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(LibcoreIoStreams)

#endif // _LibcoreIoStreams_H_
