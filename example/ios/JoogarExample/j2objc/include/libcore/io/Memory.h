//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/io/Memory.java
//

#ifndef _LibcoreIoMemory_H_
#define _LibcoreIoMemory_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSShortArray;
@class JavaNioByteOrder;

/*!
 @brief Unsafe access to memory.
 */
@interface LibcoreIoMemory : NSObject

#pragma mark Public

/*!
 @brief Copies 'byteCount' bytes from the source to the destination.
 The objects are either
 instances of DirectByteBuffer or byte[]. The offsets in the byte[] case must include
 the Buffer.arrayOffset if the array came from a Buffer.array call. We could make this
 private and provide the four type-safe variants, but then ByteBuffer.put(ByteBuffer)
 would need to work out which to call based on whether the source and destination buffers
 are direct or not.
  make type-safe before making public?
 */
+ (void)memmoveWithId:(id)dstObject
              withInt:(jint)dstOffset
               withId:(id)srcObject
              withInt:(jint)srcOffset
             withLong:(jlong)byteCount;

+ (jbyte)peekByteWithLong:(jlong)address;

+ (void)peekByteArrayWithLong:(jlong)address
                withByteArray:(IOSByteArray *)dst
                      withInt:(jint)dstOffset
                      withInt:(jint)count;

+ (void)peekCharArrayWithLong:(jlong)address
                withCharArray:(IOSCharArray *)dst
                      withInt:(jint)dstOffset
                      withInt:(jint)count
                  withBoolean:(jboolean)swap;

+ (void)peekDoubleArrayWithLong:(jlong)address
                withDoubleArray:(IOSDoubleArray *)dst
                        withInt:(jint)dstOffset
                        withInt:(jint)count
                    withBoolean:(jboolean)swap;

+ (void)peekFloatArrayWithLong:(jlong)address
                withFloatArray:(IOSFloatArray *)dst
                       withInt:(jint)dstOffset
                       withInt:(jint)count
                   withBoolean:(jboolean)swap;

+ (jint)peekIntWithByteArray:(IOSByteArray *)src
                     withInt:(jint)offset
        withJavaNioByteOrder:(JavaNioByteOrder *)order;

+ (jint)peekIntWithLong:(jlong)address
            withBoolean:(jboolean)swap;

+ (void)peekIntArrayWithLong:(jlong)address
                withIntArray:(IOSIntArray *)dst
                     withInt:(jint)dstOffset
                     withInt:(jint)count
                 withBoolean:(jboolean)swap;

+ (jlong)peekLongWithByteArray:(IOSByteArray *)src
                       withInt:(jint)offset
          withJavaNioByteOrder:(JavaNioByteOrder *)order;

+ (jlong)peekLongWithLong:(jlong)address
              withBoolean:(jboolean)swap;

+ (void)peekLongArrayWithLong:(jlong)address
                withLongArray:(IOSLongArray *)dst
                      withInt:(jint)dstOffset
                      withInt:(jint)count
                  withBoolean:(jboolean)swap;

+ (jshort)peekShortWithByteArray:(IOSByteArray *)src
                         withInt:(jint)offset
            withJavaNioByteOrder:(JavaNioByteOrder *)order;

+ (jshort)peekShortWithLong:(jlong)address
                withBoolean:(jboolean)swap;

+ (void)peekShortArrayWithLong:(jlong)address
                withShortArray:(IOSShortArray *)dst
                       withInt:(jint)dstOffset
                       withInt:(jint)count
                   withBoolean:(jboolean)swap;

+ (void)pokeByteWithLong:(jlong)address
                withByte:(jbyte)value;

+ (void)pokeByteArrayWithLong:(jlong)address
                withByteArray:(IOSByteArray *)src
                      withInt:(jint)srcOffset
                      withInt:(jint)count;

+ (void)pokeCharArrayWithLong:(jlong)address
                withCharArray:(IOSCharArray *)src
                      withInt:(jint)srcOffset
                      withInt:(jint)count
                  withBoolean:(jboolean)swap;

+ (void)pokeDoubleArrayWithLong:(jlong)address
                withDoubleArray:(IOSDoubleArray *)src
                        withInt:(jint)srcOffset
                        withInt:(jint)count
                    withBoolean:(jboolean)swap;

+ (void)pokeFloatArrayWithLong:(jlong)address
                withFloatArray:(IOSFloatArray *)src
                       withInt:(jint)srcOffset
                       withInt:(jint)count
                   withBoolean:(jboolean)swap;

+ (void)pokeIntWithByteArray:(IOSByteArray *)dst
                     withInt:(jint)offset
                     withInt:(jint)value
        withJavaNioByteOrder:(JavaNioByteOrder *)order;

+ (void)pokeIntWithLong:(jlong)address
                withInt:(jint)value
            withBoolean:(jboolean)swap;

+ (void)pokeIntArrayWithLong:(jlong)address
                withIntArray:(IOSIntArray *)src
                     withInt:(jint)srcOffset
                     withInt:(jint)count
                 withBoolean:(jboolean)swap;

+ (void)pokeLongWithByteArray:(IOSByteArray *)dst
                      withInt:(jint)offset
                     withLong:(jlong)value
         withJavaNioByteOrder:(JavaNioByteOrder *)order;

+ (void)pokeLongWithLong:(jlong)address
                withLong:(jlong)value
             withBoolean:(jboolean)swap;

+ (void)pokeLongArrayWithLong:(jlong)address
                withLongArray:(IOSLongArray *)src
                      withInt:(jint)srcOffset
                      withInt:(jint)count
                  withBoolean:(jboolean)swap;

+ (void)pokeShortWithByteArray:(IOSByteArray *)dst
                       withInt:(jint)offset
                     withShort:(jshort)value
          withJavaNioByteOrder:(JavaNioByteOrder *)order;

+ (void)pokeShortWithLong:(jlong)address
                withShort:(jshort)value
              withBoolean:(jboolean)swap;

+ (void)pokeShortArrayWithLong:(jlong)address
                withShortArray:(IOSShortArray *)src
                       withInt:(jint)srcOffset
                       withInt:(jint)count
                   withBoolean:(jboolean)swap;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(LibcoreIoMemory)

FOUNDATION_EXPORT jint LibcoreIoMemory_peekIntWithByteArray_withInt_withJavaNioByteOrder_(IOSByteArray *src, jint offset, JavaNioByteOrder *order);

FOUNDATION_EXPORT jlong LibcoreIoMemory_peekLongWithByteArray_withInt_withJavaNioByteOrder_(IOSByteArray *src, jint offset, JavaNioByteOrder *order);

FOUNDATION_EXPORT jshort LibcoreIoMemory_peekShortWithByteArray_withInt_withJavaNioByteOrder_(IOSByteArray *src, jint offset, JavaNioByteOrder *order);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeIntWithByteArray_withInt_withInt_withJavaNioByteOrder_(IOSByteArray *dst, jint offset, jint value, JavaNioByteOrder *order);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeLongWithByteArray_withInt_withLong_withJavaNioByteOrder_(IOSByteArray *dst, jint offset, jlong value, JavaNioByteOrder *order);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeShortWithByteArray_withInt_withShort_withJavaNioByteOrder_(IOSByteArray *dst, jint offset, jshort value, JavaNioByteOrder *order);

FOUNDATION_EXPORT void LibcoreIoMemory_memmoveWithId_withInt_withId_withInt_withLong_(id dstObject, jint dstOffset, id srcObject, jint srcOffset, jlong byteCount);

FOUNDATION_EXPORT jbyte LibcoreIoMemory_peekByteWithLong_(jlong address);

FOUNDATION_EXPORT jint LibcoreIoMemory_peekIntWithLong_withBoolean_(jlong address, jboolean swap);

FOUNDATION_EXPORT jlong LibcoreIoMemory_peekLongWithLong_withBoolean_(jlong address, jboolean swap);

FOUNDATION_EXPORT jshort LibcoreIoMemory_peekShortWithLong_withBoolean_(jlong address, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_peekByteArrayWithLong_withByteArray_withInt_withInt_(jlong address, IOSByteArray *dst, jint dstOffset, jint count);

FOUNDATION_EXPORT void LibcoreIoMemory_peekCharArrayWithLong_withCharArray_withInt_withInt_withBoolean_(jlong address, IOSCharArray *dst, jint dstOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_peekDoubleArrayWithLong_withDoubleArray_withInt_withInt_withBoolean_(jlong address, IOSDoubleArray *dst, jint dstOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_peekFloatArrayWithLong_withFloatArray_withInt_withInt_withBoolean_(jlong address, IOSFloatArray *dst, jint dstOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_peekIntArrayWithLong_withIntArray_withInt_withInt_withBoolean_(jlong address, IOSIntArray *dst, jint dstOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_peekLongArrayWithLong_withLongArray_withInt_withInt_withBoolean_(jlong address, IOSLongArray *dst, jint dstOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_peekShortArrayWithLong_withShortArray_withInt_withInt_withBoolean_(jlong address, IOSShortArray *dst, jint dstOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeByteWithLong_withByte_(jlong address, jbyte value);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeIntWithLong_withInt_withBoolean_(jlong address, jint value, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeLongWithLong_withLong_withBoolean_(jlong address, jlong value, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeShortWithLong_withShort_withBoolean_(jlong address, jshort value, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeByteArrayWithLong_withByteArray_withInt_withInt_(jlong address, IOSByteArray *src, jint srcOffset, jint count);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeCharArrayWithLong_withCharArray_withInt_withInt_withBoolean_(jlong address, IOSCharArray *src, jint srcOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeDoubleArrayWithLong_withDoubleArray_withInt_withInt_withBoolean_(jlong address, IOSDoubleArray *src, jint srcOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeFloatArrayWithLong_withFloatArray_withInt_withInt_withBoolean_(jlong address, IOSFloatArray *src, jint srcOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeIntArrayWithLong_withIntArray_withInt_withInt_withBoolean_(jlong address, IOSIntArray *src, jint srcOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeLongArrayWithLong_withLongArray_withInt_withInt_withBoolean_(jlong address, IOSLongArray *src, jint srcOffset, jint count, jboolean swap);

FOUNDATION_EXPORT void LibcoreIoMemory_pokeShortArrayWithLong_withShortArray_withInt_withInt_withBoolean_(jlong address, IOSShortArray *src, jint srcOffset, jint count, jboolean swap);

J2OBJC_TYPE_LITERAL_HEADER(LibcoreIoMemory)

#endif // _LibcoreIoMemory_H_
