//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/net/url/UrlUtils.java
//

#ifndef _LibcoreNetUrlUrlUtils_H_
#define _LibcoreNetUrlUrlUtils_H_

#include "J2ObjC_header.h"

@interface LibcoreNetUrlUrlUtils : NSObject

#pragma mark Public

/*!
 @brief Returns a path that can be safely concatenated with <code>authority</code>.
 If
 the authority is null or empty, this can be any path. Otherwise the paths
 run together like <code>http://android.comindex.html</code>.
 */
+ (NSString *)authoritySafePathWithNSString:(NSString *)authority
                               withNSString:(NSString *)path;

/*!
 @brief Returns the path will relative path segments like ".." and "." resolved.
 The returned path will not necessarily start with a "/" character. This
 handles ".." and "." segments at both the beginning and end of the path.
 @param discardRelativePrefix true to remove leading ".." segments from
 the path. This is appropriate for paths that are known to be
 absolute.
 */
+ (NSString *)canonicalizePathWithNSString:(NSString *)path
                               withBoolean:(jboolean)discardRelativePrefix;

/*!
 @brief Returns the index of the first char of <code>chars</code> in <code>string</code>
 bounded between <code>start</code> and <code>end</code>.
 This returns <code>end</code>
 if none of the characters exist in the requested range.
 */
+ (jint)findFirstOfWithNSString:(NSString *)string
                   withNSString:(NSString *)chars
                        withInt:(jint)start
                        withInt:(jint)end;

/*!
 @brief Returns the scheme prefix like "http" from the URL spec, or null if the
 spec doesn't start with a scheme.
 Scheme prefixes match this pattern:
 <code>alpha ( alpha | digit | '+' | '-' | '.' )* ':'</code>
 */
+ (NSString *)getSchemePrefixWithNSString:(NSString *)spec;

+ (jboolean)isValidSchemeCharWithInt:(jint)index
                            withChar:(jchar)c;

@end

J2OBJC_EMPTY_STATIC_INIT(LibcoreNetUrlUrlUtils)

FOUNDATION_EXPORT NSString *LibcoreNetUrlUrlUtils_canonicalizePathWithNSString_withBoolean_(NSString *path, jboolean discardRelativePrefix);

FOUNDATION_EXPORT NSString *LibcoreNetUrlUrlUtils_authoritySafePathWithNSString_withNSString_(NSString *authority, NSString *path);

FOUNDATION_EXPORT NSString *LibcoreNetUrlUrlUtils_getSchemePrefixWithNSString_(NSString *spec);

FOUNDATION_EXPORT jboolean LibcoreNetUrlUrlUtils_isValidSchemeCharWithInt_withChar_(jint index, jchar c);

FOUNDATION_EXPORT jint LibcoreNetUrlUrlUtils_findFirstOfWithNSString_withNSString_withInt_withInt_(NSString *string, NSString *chars, jint start, jint end);

J2OBJC_TYPE_LITERAL_HEADER(LibcoreNetUrlUrlUtils)

#endif // _LibcoreNetUrlUrlUtils_H_
