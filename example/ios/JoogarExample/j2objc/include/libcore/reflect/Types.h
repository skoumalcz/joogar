//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/reflect/Types.java
//

#ifndef _LibcoreReflectTypes_H_
#define _LibcoreReflectTypes_H_

#include "J2ObjC_header.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@class LibcoreReflectListOfTypes;
@protocol JavaLangReflectType;

@interface LibcoreReflectTypes : NSObject

#pragma mark Public

/*!
 @brief Appends names of the <code>types</code> to <code>out</code> separated by commas.
 */
+ (void)appendArrayGenericType:(JavaLangStringBuilder *)outArg
                         types:(IOSObjectArray *)types;

+ (void)appendGenericType:(JavaLangStringBuilder *)outArg
                     type:(id<JavaLangReflectType>)type;

/*!
 @brief Appends the best <code>toString</code> name for <code>c</code> to <code>out</code>.
 This works around the fact that <code>Class.getName</code> is lousy for
 primitive arrays (it writes "[C" instead of "char[]") and <code>Class.getCanonicalName()</code>
  is lousy for nested classes (it uses a "."
 separator rather than a "$" separator).
 */
+ (void)appendTypeName:(JavaLangStringBuilder *)outArg
                 class:(IOSClass *)c;

/*!
 @brief Returns the internal name of <code>clazz</code> (also known as the descriptor).
 */
+ (NSString *)getSignature:(IOSClass *)clazz;

+ (id<JavaLangReflectType>)getType:(id<JavaLangReflectType>)type;

+ (IOSObjectArray *)getTypeArray:(LibcoreReflectListOfTypes *)types
                           clone:(jboolean)clone;

/*!
 @brief Returns the names of <code>types</code> separated by commas.
 */
+ (NSString *)toString:(IOSObjectArray *)types;

@end

J2OBJC_STATIC_INIT(LibcoreReflectTypes)

FOUNDATION_EXPORT IOSObjectArray *LibcoreReflectTypes_getTypeArray_clone_(LibcoreReflectListOfTypes *types, jboolean clone);

FOUNDATION_EXPORT id<JavaLangReflectType> LibcoreReflectTypes_getType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT NSString *LibcoreReflectTypes_getSignature_(IOSClass *clazz);

FOUNDATION_EXPORT NSString *LibcoreReflectTypes_toString_(IOSObjectArray *types);

FOUNDATION_EXPORT void LibcoreReflectTypes_appendTypeName_class_(JavaLangStringBuilder *outArg, IOSClass *c);

FOUNDATION_EXPORT void LibcoreReflectTypes_appendArrayGenericType_types_(JavaLangStringBuilder *outArg, IOSObjectArray *types);

FOUNDATION_EXPORT void LibcoreReflectTypes_appendGenericType_type_(JavaLangStringBuilder *outArg, id<JavaLangReflectType> type);

J2OBJC_TYPE_LITERAL_HEADER(LibcoreReflectTypes)

#endif // _LibcoreReflectTypes_H_
