//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/apache/harmony/security/fortress/Services.java
//

#ifndef _OrgApacheHarmonySecurityFortressServices_H_
#define _OrgApacheHarmonySecurityFortressServices_H_

#include "J2ObjC_header.h"

@class JavaSecurityProvider;
@class JavaSecurityProvider_Service;
@class JavaUtilArrayList;

/*!
 @brief This class contains information about all registered providers and preferred
 implementations for all "serviceName.algName".
 */
@interface OrgApacheHarmonySecurityFortressServices : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Returns the current cache version.
 This has the possible side
 effect of updating the cache if needed.
 */
+ (jint)getCacheVersion;

/*!
 @brief Returns the provider with the specified name.
 */
+ (JavaSecurityProvider *)getProviderWithNSString:(NSString *)name;

/*!
 @brief Returns a copy of the registered providers as an array.
 */
+ (JavaUtilArrayList *)getProviders;

/*!
 @brief Returns the default SecureRandom service description.
 */
+ (JavaSecurityProvider_Service *)getSecureRandomService;

/*!
 @brief Looks up the requested service by type and algorithm.
 The
 service key should be provided in the same format used when
 registering a service with a provider, for example,
 "KeyFactory.RSA".
 Callers can cache the returned service information but such
 caches should be validated against the result of
 Service.getCacheVersion() before use.
 */
+ (JavaUtilArrayList *)getServicesWithNSString:(NSString *)key;

/*!
 @brief Adds information about provider services into HashMap.
 */
+ (void)initServiceInfoWithJavaSecurityProvider:(JavaSecurityProvider *)p OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Inserts a provider at a specified 1-based position.
 */
+ (jint)insertProviderAtWithJavaSecurityProvider:(JavaSecurityProvider *)provider
                                         withInt:(jint)position;

/*!
 @brief Returns true if services does not contain any provider information.
 */
+ (jboolean)isEmpty;

/*!
 @brief Removes the provider at the specified 1-based position.
 */
+ (void)removeProviderWithInt:(jint)providerNumber;

/*!
 @brief In addition to being used here when the list of providers
 changes, this method is also used by the Provider
 implementation to indicate that a provides list of services has
 changed.
 */
+ (void)setNeedRefresh;

@end

J2OBJC_STATIC_INIT(OrgApacheHarmonySecurityFortressServices)

FOUNDATION_EXPORT JavaUtilArrayList *OrgApacheHarmonySecurityFortressServices_getProviders();

FOUNDATION_EXPORT JavaSecurityProvider *OrgApacheHarmonySecurityFortressServices_getProviderWithNSString_(NSString *name);

FOUNDATION_EXPORT jint OrgApacheHarmonySecurityFortressServices_insertProviderAtWithJavaSecurityProvider_withInt_(JavaSecurityProvider *provider, jint position);

FOUNDATION_EXPORT void OrgApacheHarmonySecurityFortressServices_removeProviderWithInt_(jint providerNumber);

FOUNDATION_EXPORT void OrgApacheHarmonySecurityFortressServices_initServiceInfoWithJavaSecurityProvider_(JavaSecurityProvider *p);

FOUNDATION_EXPORT jboolean OrgApacheHarmonySecurityFortressServices_isEmpty();

FOUNDATION_EXPORT JavaUtilArrayList *OrgApacheHarmonySecurityFortressServices_getServicesWithNSString_(NSString *key);

FOUNDATION_EXPORT JavaSecurityProvider_Service *OrgApacheHarmonySecurityFortressServices_getSecureRandomService();

FOUNDATION_EXPORT void OrgApacheHarmonySecurityFortressServices_setNeedRefresh();

FOUNDATION_EXPORT jint OrgApacheHarmonySecurityFortressServices_getCacheVersion();

FOUNDATION_EXPORT void OrgApacheHarmonySecurityFortressServices_init(OrgApacheHarmonySecurityFortressServices *self);

FOUNDATION_EXPORT OrgApacheHarmonySecurityFortressServices *new_OrgApacheHarmonySecurityFortressServices_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheHarmonySecurityFortressServices)

#endif // _OrgApacheHarmonySecurityFortressServices_H_
