//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/apache/harmony/security/asn1/ObjectIdentifier.java
//

#ifndef _OrgApacheHarmonySecurityAsn1ObjectIdentifier_H_
#define _OrgApacheHarmonySecurityAsn1ObjectIdentifier_H_

#include "J2ObjC_header.h"

@class IOSIntArray;

/*!
 @author Stepan M. Mishura
 @version $Revision$
 */

/*!
 @brief Instance of this class represents ObjectIdentifier (OID).
 According to X.690:
 OID is represented as a sequence of subidentifier.
 Each subidentifier is represented as non negative integer value.
 There are at least 2 subidentifiers in the sequence.
 Valid values for first subidentifier are 0, 1 and 2.
 If the first subidentifier has 0 or 1 value the second
 subidentifier must be less then 40.
 */
@interface OrgApacheHarmonySecurityAsn1ObjectIdentifier : NSObject

#pragma mark Public

/*!
 @brief Creates ObjectIdentifier(OID) from array of integers.
 @param oid array of integers
 @throws IllegalArgumentException if oid is invalid or null
 */
- (instancetype)initWithIntArray:(IOSIntArray *)oid;

/*!
 @brief Creates ObjectIdentifier(OID) from string representation.
 @param strOid oid string
 @throws IllegalArgumentException if oid string is invalid or null
 */
- (instancetype)initWithNSString:(NSString *)strOid;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

/*!
 @brief Returns whether the given string is a valid ObjectIdentifier
 (OID) representation.
 String representation is defined as for <code>toIntArray</code>.
 @param str string representation of OID
 @return true if oidString has valid syntax or false if not
 */
+ (jboolean)isOIDWithNSString:(NSString *)str;

/*!
 @brief Gets ObjectIdentifier (OID) from string representation.
 String representation is defined by the following syntax:
 OID = subidentifier 1*("." subidentifier)
 subidentifier = 1*(digit)
 @param str string representation of OID
 @return oid as array of integers
 @throws IllegalArgumentException if oid string is invalid or null
 */
+ (IOSIntArray *)toIntArrayWithNSString:(NSString *)str;

- (NSString *)description;

/*!
 @brief Returns string representation of OID.
 Note: it is supposed that passed array of integers
 contains valid OID value, so no checks are performed.
 @param oid oid as array of integers
 @return oid string representation
 */
+ (NSString *)toStringWithIntArray:(IOSIntArray *)oid;

/*!
 @brief Validates ObjectIdentifier (OID).
 @param oid oid as array of integers
 @throws IllegalArgumentException if oid is invalid or null
 */
+ (void)validateWithIntArray:(IOSIntArray *)oid;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheHarmonySecurityAsn1ObjectIdentifier)

FOUNDATION_EXPORT void OrgApacheHarmonySecurityAsn1ObjectIdentifier_initWithIntArray_(OrgApacheHarmonySecurityAsn1ObjectIdentifier *self, IOSIntArray *oid);

FOUNDATION_EXPORT OrgApacheHarmonySecurityAsn1ObjectIdentifier *new_OrgApacheHarmonySecurityAsn1ObjectIdentifier_initWithIntArray_(IOSIntArray *oid) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheHarmonySecurityAsn1ObjectIdentifier_initWithNSString_(OrgApacheHarmonySecurityAsn1ObjectIdentifier *self, NSString *strOid);

FOUNDATION_EXPORT OrgApacheHarmonySecurityAsn1ObjectIdentifier *new_OrgApacheHarmonySecurityAsn1ObjectIdentifier_initWithNSString_(NSString *strOid) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheHarmonySecurityAsn1ObjectIdentifier_validateWithIntArray_(IOSIntArray *oid);

FOUNDATION_EXPORT NSString *OrgApacheHarmonySecurityAsn1ObjectIdentifier_toStringWithIntArray_(IOSIntArray *oid);

FOUNDATION_EXPORT IOSIntArray *OrgApacheHarmonySecurityAsn1ObjectIdentifier_toIntArrayWithNSString_(NSString *str);

FOUNDATION_EXPORT jboolean OrgApacheHarmonySecurityAsn1ObjectIdentifier_isOIDWithNSString_(NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheHarmonySecurityAsn1ObjectIdentifier)

#endif // _OrgApacheHarmonySecurityAsn1ObjectIdentifier_H_
