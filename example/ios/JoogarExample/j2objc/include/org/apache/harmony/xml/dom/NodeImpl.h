//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/apache/harmony/xml/dom/NodeImpl.java
//

#ifndef _OrgApacheHarmonyXmlDomNodeImpl_H_
#define _OrgApacheHarmonyXmlDomNodeImpl_H_

#include "J2ObjC_header.h"
#include "org/w3c/dom/Node.h"

@class JavaLangStringBuilder;
@class OrgApacheHarmonyXmlDomDocumentImpl;
@protocol OrgW3cDomDocument;
@protocol OrgW3cDomNamedNodeMap;
@protocol OrgW3cDomNodeList;
@protocol OrgW3cDomTypeInfo;
@protocol OrgW3cDomUserDataHandler;

/*!
 @brief A straightforward implementation of the corresponding W3C DOM node.
 <p>Some fields have package visibility so other classes can access them while
 maintaining the DOM structure.
 <p>This class represents a Node that has neither a parent nor children.
 Subclasses may have either.
 <p>Some code was adapted from Apache Xerces.
 */
@interface OrgApacheHarmonyXmlDomNodeImpl : NSObject < OrgW3cDomNode > {
 @public
  /*!
   @brief The containing document.
   This is non-null except for DocumentTypeImpl
 nodes created by the DOMImplementation.
   */
  OrgApacheHarmonyXmlDomDocumentImpl *document_;
}

#pragma mark Public

- (id<OrgW3cDomNode>)appendChildWithOrgW3cDomNode:(id<OrgW3cDomNode>)newChild;

- (id<OrgW3cDomNode>)cloneNodeWithBoolean:(jboolean)deep;

- (jshort)compareDocumentPositionWithOrgW3cDomNode:(id<OrgW3cDomNode>)other;

- (id<OrgW3cDomNamedNodeMap>)getAttributes;

- (NSString *)getBaseURI;

- (id<OrgW3cDomNodeList>)getChildNodes;

- (id)getFeatureWithNSString:(NSString *)feature
                withNSString:(NSString *)version_;

- (id<OrgW3cDomNode>)getFirstChild;

- (id<OrgW3cDomNode>)getLastChild;

- (NSString *)getLocalName;

- (NSString *)getNamespaceURI;

- (id<OrgW3cDomNode>)getNextSibling;

- (NSString *)getNodeName;

- (jshort)getNodeType;

- (NSString *)getNodeValue;

- (id<OrgW3cDomDocument>)getOwnerDocument;

- (id<OrgW3cDomNode>)getParentNode;

- (NSString *)getPrefix;

- (id<OrgW3cDomNode>)getPreviousSibling;

- (NSString *)getTextContent;

- (id)getUserDataWithNSString:(NSString *)key;

- (jboolean)hasAttributes;

- (jboolean)hasChildNodes;

- (id<OrgW3cDomNode>)insertBeforeWithOrgW3cDomNode:(id<OrgW3cDomNode>)newChild
                                 withOrgW3cDomNode:(id<OrgW3cDomNode>)refChild;

- (jboolean)isDefaultNamespaceWithNSString:(NSString *)namespaceURI;

- (jboolean)isEqualNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)arg;

- (jboolean)isSameNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)other;

- (jboolean)isSupportedWithNSString:(NSString *)feature
                       withNSString:(NSString *)version_;

- (NSString *)lookupNamespaceURIWithNSString:(NSString *)prefix;

- (NSString *)lookupPrefixWithNSString:(NSString *)namespaceURI;

- (void)normalize;

- (id<OrgW3cDomNode>)removeChildWithOrgW3cDomNode:(id<OrgW3cDomNode>)oldChild;

- (id<OrgW3cDomNode>)replaceChildWithOrgW3cDomNode:(id<OrgW3cDomNode>)newChild
                                 withOrgW3cDomNode:(id<OrgW3cDomNode>)oldChild;

- (void)setNodeValueWithNSString:(NSString *)nodeValue;

- (void)setPrefixWithNSString:(NSString *)prefix;

- (void)setTextContentWithNSString:(NSString *)textContent;

- (id)setUserDataWithNSString:(NSString *)key
                       withId:(id)data
 withOrgW3cDomUserDataHandler:(id<OrgW3cDomUserDataHandler>)handler;

#pragma mark Package-Private

- (instancetype)initWithOrgApacheHarmonyXmlDomDocumentImpl:(OrgApacheHarmonyXmlDomDocumentImpl *)document;

- (void)getTextContentWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf;

/*!
 @brief Returns true if the given prefix is mapped to the given URI on this
 element.
 Since child elements can redefine prefixes, this check is
 necessary: <code><foo xmlns:a="http://good">
 <bar xmlns:a="http://evil">
 <a:baz />
 </bar>
 </foo></code>
 @param prefix the prefix to find. Nullable.
 @param uri the URI to match. Non-null.
 */
- (jboolean)isPrefixMappedToUriWithNSString:(NSString *)prefix
                               withNSString:(NSString *)uri;

/*!
 @brief Sets <code>node</code> to be not namespace-aware and assigns its name.
 @param node an element or attribute node.
 */
+ (void)setNameWithOrgApacheHarmonyXmlDomNodeImpl:(OrgApacheHarmonyXmlDomNodeImpl *)node
                                     withNSString:(NSString *)name;

/*!
 @brief Sets <code>node</code> to be namespace-aware and assigns its namespace URI
 and qualified name.
 @param node an element or attribute node.
 @param namespaceURI this node's namespace URI. May be null.
 @param qualifiedName a possibly-prefixed name like "img" or "html:img".
 */
+ (void)setNameNSWithOrgApacheHarmonyXmlDomNodeImpl:(OrgApacheHarmonyXmlDomNodeImpl *)node
                                       withNSString:(NSString *)namespaceURI
                                       withNSString:(NSString *)qualifiedName;

/*!
 @brief Validates the element or attribute namespace prefix on this node.
 @param namespaceAware whether this node is namespace aware
 @param namespaceURI this node's namespace URI
 */
+ (NSString *)validatePrefixWithNSString:(NSString *)prefix
                             withBoolean:(jboolean)namespaceAware
                            withNSString:(NSString *)namespaceURI;

@end

J2OBJC_STATIC_INIT(OrgApacheHarmonyXmlDomNodeImpl)

J2OBJC_FIELD_SETTER(OrgApacheHarmonyXmlDomNodeImpl, document_, OrgApacheHarmonyXmlDomDocumentImpl *)

FOUNDATION_EXPORT id<OrgW3cDomTypeInfo> OrgApacheHarmonyXmlDomNodeImpl_NULL_TYPE_INFO_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheHarmonyXmlDomNodeImpl, NULL_TYPE_INFO_, id<OrgW3cDomTypeInfo>)

FOUNDATION_EXPORT void OrgApacheHarmonyXmlDomNodeImpl_initWithOrgApacheHarmonyXmlDomDocumentImpl_(OrgApacheHarmonyXmlDomNodeImpl *self, OrgApacheHarmonyXmlDomDocumentImpl *document);

FOUNDATION_EXPORT NSString *OrgApacheHarmonyXmlDomNodeImpl_validatePrefixWithNSString_withBoolean_withNSString_(NSString *prefix, jboolean namespaceAware, NSString *namespaceURI);

FOUNDATION_EXPORT void OrgApacheHarmonyXmlDomNodeImpl_setNameNSWithOrgApacheHarmonyXmlDomNodeImpl_withNSString_withNSString_(OrgApacheHarmonyXmlDomNodeImpl *node, NSString *namespaceURI, NSString *qualifiedName);

FOUNDATION_EXPORT void OrgApacheHarmonyXmlDomNodeImpl_setNameWithOrgApacheHarmonyXmlDomNodeImpl_withNSString_(OrgApacheHarmonyXmlDomNodeImpl *node, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheHarmonyXmlDomNodeImpl)

@interface OrgApacheHarmonyXmlDomNodeImpl_UserData : NSObject {
 @public
  id value_;
  id<OrgW3cDomUserDataHandler> handler_;
}

#pragma mark Package-Private

- (instancetype)initWithId:(id)value
withOrgW3cDomUserDataHandler:(id<OrgW3cDomUserDataHandler>)handler;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheHarmonyXmlDomNodeImpl_UserData)

J2OBJC_FIELD_SETTER(OrgApacheHarmonyXmlDomNodeImpl_UserData, value_, id)
J2OBJC_FIELD_SETTER(OrgApacheHarmonyXmlDomNodeImpl_UserData, handler_, id<OrgW3cDomUserDataHandler>)

FOUNDATION_EXPORT void OrgApacheHarmonyXmlDomNodeImpl_UserData_initWithId_withOrgW3cDomUserDataHandler_(OrgApacheHarmonyXmlDomNodeImpl_UserData *self, id value, id<OrgW3cDomUserDataHandler> handler);

FOUNDATION_EXPORT OrgApacheHarmonyXmlDomNodeImpl_UserData *new_OrgApacheHarmonyXmlDomNodeImpl_UserData_initWithId_withOrgW3cDomUserDataHandler_(id value, id<OrgW3cDomUserDataHandler> handler) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheHarmonyXmlDomNodeImpl_UserData)

#endif // _OrgApacheHarmonyXmlDomNodeImpl_H_
