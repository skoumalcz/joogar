//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/kxml2/io/KXmlParser.java
//

#ifndef _OrgKxml2IoKXmlParser_H_
#define _OrgKxml2IoKXmlParser_H_

#include "J2ObjC_header.h"
#include "java/io/Closeable.h"
#include "java/lang/Enum.h"
#include "org/xmlpull/v1/XmlPullParser.h"

@class IOSCharArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class LibcoreInternalStringPool;

/*!
 @brief An XML pull parser with limited support for parsing internal DTDs.
 */
@interface OrgKxml2IoKXmlParser : NSObject < OrgXmlpullV1XmlPullParser, JavaIoCloseable > {
 @public
  LibcoreInternalStringPool *stringPool_;
}

#pragma mark Public

- (instancetype)init;

- (void)close;

- (void)defineEntityReplacementTextWithNSString:(NSString *)entity
                                   withNSString:(NSString *)value;

- (jint)getAttributeCount;

- (NSString *)getAttributeNameWithInt:(jint)index;

- (NSString *)getAttributeNamespaceWithInt:(jint)index;

- (NSString *)getAttributePrefixWithInt:(jint)index;

- (NSString *)getAttributeTypeWithInt:(jint)index;

- (NSString *)getAttributeValueWithInt:(jint)index;

- (NSString *)getAttributeValueWithNSString:(NSString *)namespace_
                               withNSString:(NSString *)name;

- (jint)getColumnNumber;

- (jint)getDepth;

- (jint)getEventType;

- (jboolean)getFeatureWithNSString:(NSString *)feature;

- (NSString *)getInputEncoding;

- (jint)getLineNumber;

- (NSString *)getName;

- (NSString *)getNamespace;

- (NSString *)getNamespaceWithNSString:(NSString *)prefix;

- (jint)getNamespaceCountWithInt:(jint)depth;

- (NSString *)getNamespacePrefixWithInt:(jint)pos;

- (NSString *)getNamespaceUriWithInt:(jint)pos;

- (NSString *)getPositionDescription;

- (NSString *)getPrefix;

- (id)getPropertyWithNSString:(NSString *)property;

/*!
 @brief Returns the document's public ID if it was declared.
 This is typically a
 string like <code>-//W3C//DTD HTML 4.01//EN</code>.
 */
- (NSString *)getPublicId;

/*!
 @brief Returns the root element's name if it was declared in the DTD.
 This
 equals the first tag's name for valid documents.
 */
- (NSString *)getRootElementName;

/*!
 @brief Returns the document's system ID if it was declared.
 This is typically a
 string like <code>http://www.w3.org/TR/html4/strict.dtd</code>.
 */
- (NSString *)getSystemId;

- (NSString *)getText;

- (IOSCharArray *)getTextCharactersWithIntArray:(IOSIntArray *)poslen;

- (jboolean)isAttributeDefaultWithInt:(jint)index;

- (jboolean)isEmptyElementTag;

- (jboolean)isWhitespace;

/*!
 @brief Retains namespace attributes like <code>xmlns="http://foo"</code> or <code>xmlns:foo="http:foo"</code>
 in pulled elements.
 Most applications will only be interested in the effective namespaces of
 their elements, so these attributes aren't useful. But for structure preserving wrappers like
 DOM, it is necessary to keep the namespace data around.
 */
- (void)keepNamespaceAttributes;

- (jint)next;

- (jint)nextTag;

- (NSString *)nextText;

- (jint)nextToken;

- (void)requireWithInt:(jint)type
          withNSString:(NSString *)namespace_
          withNSString:(NSString *)name;

- (void)setFeatureWithNSString:(NSString *)feature
                   withBoolean:(jboolean)value;

- (void)setInputWithJavaIoInputStream:(JavaIoInputStream *)is
                         withNSString:(NSString *)charset;

- (void)setInputWithJavaIoReader:(JavaIoReader *)reader;

- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value;

@end

J2OBJC_STATIC_INIT(OrgKxml2IoKXmlParser)

J2OBJC_FIELD_SETTER(OrgKxml2IoKXmlParser, stringPool_, LibcoreInternalStringPool *)

FOUNDATION_EXPORT void OrgKxml2IoKXmlParser_init(OrgKxml2IoKXmlParser *self);

FOUNDATION_EXPORT OrgKxml2IoKXmlParser *new_OrgKxml2IoKXmlParser_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgKxml2IoKXmlParser)

typedef NS_ENUM(NSUInteger, OrgKxml2IoKXmlParser_ValueContext) {
  OrgKxml2IoKXmlParser_ValueContext_ATTRIBUTE = 0,
  OrgKxml2IoKXmlParser_ValueContext_TEXT = 1,
  OrgKxml2IoKXmlParser_ValueContext_ENTITY_DECLARATION = 2,
};

/*!
 @brief Where a value is found impacts how that value is interpreted.
 For
 example, in attributes, "\n" must be replaced with a space character. In
 text, "]]>" is forbidden. In entity declarations, named references are
 not resolved.
 */
@interface OrgKxml2IoKXmlParser_ValueContextEnum : JavaLangEnum < NSCopying >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgKxml2IoKXmlParser_ValueContextEnum_values();

+ (OrgKxml2IoKXmlParser_ValueContextEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgKxml2IoKXmlParser_ValueContextEnum)

FOUNDATION_EXPORT OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_values_[];

#define OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE OrgKxml2IoKXmlParser_ValueContextEnum_values_[OrgKxml2IoKXmlParser_ValueContext_ATTRIBUTE]
J2OBJC_ENUM_CONSTANT_GETTER(OrgKxml2IoKXmlParser_ValueContextEnum, ATTRIBUTE)

#define OrgKxml2IoKXmlParser_ValueContextEnum_TEXT OrgKxml2IoKXmlParser_ValueContextEnum_values_[OrgKxml2IoKXmlParser_ValueContext_TEXT]
J2OBJC_ENUM_CONSTANT_GETTER(OrgKxml2IoKXmlParser_ValueContextEnum, TEXT)

#define OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION OrgKxml2IoKXmlParser_ValueContextEnum_values_[OrgKxml2IoKXmlParser_ValueContext_ENTITY_DECLARATION]
J2OBJC_ENUM_CONSTANT_GETTER(OrgKxml2IoKXmlParser_ValueContextEnum, ENTITY_DECLARATION)

J2OBJC_TYPE_LITERAL_HEADER(OrgKxml2IoKXmlParser_ValueContextEnum)

/*!
 @brief A chain of buffers containing XML content.
 Each content source contains
 the parser's primary read buffer or the characters of entities actively
 being parsed.
 <p>For example, note the buffers needed to parse this document:
 @code
     <!DOCTYPE foo [
       <!ENTITY baz "ghi">
       <!ENTITY bar "def &baz; jkl">
   ]>
   <foo>abc &bar; mno</foo>
 
@endcode
 <p>Things get interesting when the bar entity is encountered. At that
 point two buffers are active:
 <ol>
 <li>The value for the bar entity, containing <code>"def &baz; jkl"</code>
 <li>The parser's primary read buffer, containing <code>" mno</foo>"</code>
 </ol>
 <p>The parser will return the characters <code>"def "</code> from the bar
 entity's buffer, and then it will encounter the baz entity. To handle
 that, three buffers will be active:
 <ol>
 <li>The value for the baz entity, containing <code>"ghi"</code>
 <li>The remaining value for the bar entity, containing <code>" jkl"</code>
 <li>The parser's primary read buffer, containing <code>" mno</foo>"</code>
 </ol>
 <p>The parser will then return the characters <code>ghi jkl mno</code> in that
 sequence by reading each buffer in sequence.
 */
@interface OrgKxml2IoKXmlParser_ContentSource : NSObject

#pragma mark Package-Private

- (instancetype)initWithOrgKxml2IoKXmlParser_ContentSource:(OrgKxml2IoKXmlParser_ContentSource *)next
                                             withCharArray:(IOSCharArray *)buffer
                                                   withInt:(jint)position
                                                   withInt:(jint)limit;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgKxml2IoKXmlParser_ContentSource)

FOUNDATION_EXPORT void OrgKxml2IoKXmlParser_ContentSource_initWithOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(OrgKxml2IoKXmlParser_ContentSource *self, OrgKxml2IoKXmlParser_ContentSource *next, IOSCharArray *buffer, jint position, jint limit);

FOUNDATION_EXPORT OrgKxml2IoKXmlParser_ContentSource *new_OrgKxml2IoKXmlParser_ContentSource_initWithOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(OrgKxml2IoKXmlParser_ContentSource *next, IOSCharArray *buffer, jint position, jint limit) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgKxml2IoKXmlParser_ContentSource)

#endif // _OrgKxml2IoKXmlParser_H_
