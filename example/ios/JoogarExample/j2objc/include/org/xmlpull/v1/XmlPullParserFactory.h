//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/xmlpull/v1/XmlPullParserFactory.java
//

#ifndef _OrgXmlpullV1XmlPullParserFactory_H_
#define _OrgXmlpullV1XmlPullParserFactory_H_

#include "J2ObjC_header.h"

@class IOSClass;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol OrgXmlpullV1XmlPullParser;
@protocol OrgXmlpullV1XmlSerializer;

/*!
 @brief This class is used to create implementations of XML Pull Parser defined in XMPULL V1 API.
 The name of actual factory class will be determined based on several parameters.
 It works similar to JAXP but tailored to work in J2ME environments
 (no access to system properties or file system) so name of parser class factory to use
 and its class used for loading (no class loader - on J2ME no access to context class loaders)
 must be passed explicitly. If no name of parser factory was passed (or is null)
 it will try to find name by searching in CLASSPATH for
 META-INF/services/org.xmlpull.v1.XmlPullParserFactory resource that should contain
 a comma separated list of class names of factories or parsers to try (in order from
 left to the right). If none found, it will throw an exception.
 <br /><strong>NOTE:</strong>In J2SE or J2EE environments, you may want to use
 <code>newInstance(property, classLoaderCtx)</code>
 where first argument is
 <code>System.getProperty(XmlPullParserFactory.PROPERTY_NAME)</code>
 and second is <code>Thread.getContextClassLoader().getClass()</code> .
 @author <a href="http://www.extreme.indiana.edu/~aslom/">Aleksander Slominski</a>
 @author Stefan Haustein
 */
@interface OrgXmlpullV1XmlPullParserFactory : NSObject {
 @public
  JavaUtilArrayList *parserClasses_;
  NSString *classNamesLocation_;
  JavaUtilArrayList *serializerClasses_;
  JavaUtilHashMap *features_;
}

#pragma mark Public

/*!
 @brief Return the current value of the feature with given name.
 <p><b>NOTE:</b> factory features are not used for XML Serializer.
 @param name The name of feature to be retrieved.
 @return The value of named feature.
 Unknown features are <string>always</strong> returned as false
 */
- (jboolean)getFeatureWithNSString:(NSString *)name;

/*!
 @brief Indicates whether or not the factory is configured to produce
 parsers which are namespace aware
 (it simply set feature XmlPullParser.FEATURE_PROCESS_NAMESPACES to true or false).
 @return true if the factory is configured to produce parsers
 which are namespace aware; false otherwise.
 */
- (jboolean)isNamespaceAware;

/*!
 @brief Indicates whether or not the factory is configured to produce parsers
 which validate the XML content during parse.
 @return true if the factory is configured to produce parsers
 which validate the XML content during parse; false otherwise.
 */
- (jboolean)isValidating;

/*!
 @brief Create a new instance of a PullParserFactory that can be used
 to create XML pull parsers (see class description for more
 details).
 @return a new instance of a PullParserFactory, as returned by newInstance (null, null);
 */
+ (OrgXmlpullV1XmlPullParserFactory *)newInstance OBJC_METHOD_FAMILY_NONE;

+ (OrgXmlpullV1XmlPullParserFactory *)newInstanceWithNSString:(NSString *)classNames
                                                 withIOSClass:(IOSClass *)context OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a new instance of a XML Pull Parser
 using the currently configured factory features.
 @return A new instance of a XML Pull Parser.
 @throws XmlPullParserException if a parser cannot be created which satisfies the
 requested configuration.
 */
- (id<OrgXmlpullV1XmlPullParser>)newPullParser OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a new instance of a XML Serializer.
 <p><b>NOTE:</b> factory features are not used for XML Serializer.
 @return A new instance of a XML Serializer.
 @throws XmlPullParserException if a parser cannot be created which satisfies the
 requested configuration.
 */
- (id<OrgXmlpullV1XmlSerializer>)newSerializer OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Set the features to be set when XML Pull Parser is created by this factory.
 <p><b>NOTE:</b> factory features are not used for XML Serializer.
 @param name string with URI identifying feature
 @param state if true feature will be set; if false will be ignored
 */
- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)state;

/*!
 @brief Specifies that the parser produced by this factory will provide
 support for XML namespaces.
 By default the value of this is set to false.
 @param awareness true if the parser produced by this code
 will provide support for XML namespaces;  false otherwise.
 */
- (void)setNamespaceAwareWithBoolean:(jboolean)awareness;

/*!
 @brief Specifies that the parser produced by this factory will be validating
 (it simply set feature XmlPullParser.FEATURE_VALIDATION to true or false).
 By default the value of this is set to false.
 @param validating - if true the parsers created by this factory  must be validating.
 */
- (void)setValidatingWithBoolean:(jboolean)validating;

#pragma mark Protected

/*!
 @brief Protected constructor to be called by factory implementations.
 */
- (instancetype)init;

@end

J2OBJC_STATIC_INIT(OrgXmlpullV1XmlPullParserFactory)

J2OBJC_FIELD_SETTER(OrgXmlpullV1XmlPullParserFactory, parserClasses_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgXmlpullV1XmlPullParserFactory, classNamesLocation_, NSString *)
J2OBJC_FIELD_SETTER(OrgXmlpullV1XmlPullParserFactory, serializerClasses_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgXmlpullV1XmlPullParserFactory, features_, JavaUtilHashMap *)

FOUNDATION_EXPORT IOSClass *OrgXmlpullV1XmlPullParserFactory_referenceContextClass_;
J2OBJC_STATIC_FIELD_GETTER(OrgXmlpullV1XmlPullParserFactory, referenceContextClass_, IOSClass *)

FOUNDATION_EXPORT NSString *OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME_;
J2OBJC_STATIC_FIELD_GETTER(OrgXmlpullV1XmlPullParserFactory, PROPERTY_NAME_, NSString *)

FOUNDATION_EXPORT void OrgXmlpullV1XmlPullParserFactory_init(OrgXmlpullV1XmlPullParserFactory *self);

FOUNDATION_EXPORT OrgXmlpullV1XmlPullParserFactory *new_OrgXmlpullV1XmlPullParserFactory_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXmlpullV1XmlPullParserFactory *OrgXmlpullV1XmlPullParserFactory_newInstance();

FOUNDATION_EXPORT OrgXmlpullV1XmlPullParserFactory *OrgXmlpullV1XmlPullParserFactory_newInstanceWithNSString_withIOSClass_(NSString *classNames, IOSClass *context);

J2OBJC_TYPE_LITERAL_HEADER(OrgXmlpullV1XmlPullParserFactory)

#endif // _OrgXmlpullV1XmlPullParserFactory_H_
