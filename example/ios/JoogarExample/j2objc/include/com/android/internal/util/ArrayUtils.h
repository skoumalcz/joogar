//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/com/android/internal/util/ArrayUtils.java
//

#ifndef _ComAndroidInternalUtilArrayUtils_H_
#define _ComAndroidInternalUtilArrayUtils_H_

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSClass;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;

/*!
 @brief ArrayUtils contains some methods that you can call to find out
 the most efficient increments by which to grow arrays.
 */
@interface ComAndroidInternalUtilArrayUtils : NSObject

#pragma mark Public

/*!
 @brief Appends an element to a copy of the array and returns the copy.
 @param array The original array, or null to represent an empty array.
 @param element The element to add.
 @return A new array that contains all of the elements of the original array
 with the specified element added at the end.
 */
+ (IOSObjectArray *)appendElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element;

+ (IOSIntArray *)appendIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val;

+ (jboolean)containsWithIntArray:(IOSIntArray *)array
                         withInt:(jint)value;

/*!
 @brief Checks that value is present as at least one of the elements of the array.
 @param array the array to check in
 @param value the value to check for
 @return true if the value is present in the array
 */
+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)value;

/*!
 @brief Test if all <code>check</code> items are contained in <code>array</code>.
 */
+ (jboolean)containsAllWithNSObjectArray:(IOSObjectArray *)array
                       withNSObjectArray:(IOSObjectArray *)check;

/*!
 @brief Returns an empty array of the specified type.
 The intent is that
 it will return the same empty array every time to avoid reallocation,
 although this is not guaranteed.
 */
+ (IOSObjectArray *)emptyArrayWithIOSClass:(IOSClass *)kind;

/*!
 @brief Checks if the beginnings of two byte arrays are equal.
 @param array1 the first byte array
 @param array2 the second byte array
 @param length the number of bytes to check
 @return true if they're equal, false otherwise
 */
+ (jboolean)equalsWithByteArray:(IOSByteArray *)array1
                  withByteArray:(IOSByteArray *)array2
                        withInt:(jint)length;

+ (jint)idealBooleanArraySizeWithInt:(jint)need;

+ (jint)idealByteArraySizeWithInt:(jint)need;

+ (jint)idealCharArraySizeWithInt:(jint)need;

+ (jint)idealFloatArraySizeWithInt:(jint)need;

+ (jint)idealIntArraySizeWithInt:(jint)need;

+ (jint)idealLongArraySizeWithInt:(jint)need;

+ (jint)idealObjectArraySizeWithInt:(jint)need;

+ (jint)idealShortArraySizeWithInt:(jint)need;

/*!
 @brief Return first index of <code>value</code> in <code>array</code>, or <code>-1</code> if
 not found.
 */
+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)value;

/*!
 @brief Removes an element from a copy of the array and returns the copy.
 If the element is not present, then the original array is returned unmodified.
 @param array The original array, or null to represent an empty array.
 @param element The element to remove.
 @return A new array that contains all of the elements of the original array
 except the first copy of the specified element removed.  If the specified element
 was not present, then returns the original array.  Returns null if the result
 would be an empty array.
 */
+ (IOSObjectArray *)removeElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element;

+ (IOSIntArray *)removeIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val;

+ (jlong)totalWithLongArray:(IOSLongArray *)array;

@end

J2OBJC_STATIC_INIT(ComAndroidInternalUtilArrayUtils)

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealByteArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealBooleanArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealShortArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealCharArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealIntArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealFloatArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealObjectArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_idealLongArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jboolean ComAndroidInternalUtilArrayUtils_equalsWithByteArray_withByteArray_withInt_(IOSByteArray *array1, IOSByteArray *array2, jint length);

FOUNDATION_EXPORT IOSObjectArray *ComAndroidInternalUtilArrayUtils_emptyArrayWithIOSClass_(IOSClass *kind);

FOUNDATION_EXPORT jboolean ComAndroidInternalUtilArrayUtils_containsWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jint ComAndroidInternalUtilArrayUtils_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jboolean ComAndroidInternalUtilArrayUtils_containsAllWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array, IOSObjectArray *check);

FOUNDATION_EXPORT jboolean ComAndroidInternalUtilArrayUtils_containsWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT jlong ComAndroidInternalUtilArrayUtils_totalWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT IOSObjectArray *ComAndroidInternalUtilArrayUtils_appendElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSObjectArray *ComAndroidInternalUtilArrayUtils_removeElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSIntArray *ComAndroidInternalUtilArrayUtils_appendIntWithIntArray_withInt_(IOSIntArray *cur, jint val);

FOUNDATION_EXPORT IOSIntArray *ComAndroidInternalUtilArrayUtils_removeIntWithIntArray_withInt_(IOSIntArray *cur, jint val);

J2OBJC_TYPE_LITERAL_HEADER(ComAndroidInternalUtilArrayUtils)

#endif // _ComAndroidInternalUtilArrayUtils_H_
