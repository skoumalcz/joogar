//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/hash/Hashing.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComGoogleCommonHashHashing_INCLUDE_ALL")
#if ComGoogleCommonHashHashing_RESTRICT
#define ComGoogleCommonHashHashing_INCLUDE_ALL 0
#else
#define ComGoogleCommonHashHashing_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonHashHashing_RESTRICT

#if !defined (_ComGoogleCommonHashHashing_) && (ComGoogleCommonHashHashing_INCLUDE_ALL || ComGoogleCommonHashHashing_INCLUDE)
#define _ComGoogleCommonHashHashing_

@class ComGoogleCommonHashHashCode;
@protocol ComGoogleCommonHashHashFunction;
@protocol JavaLangIterable;

@interface ComGoogleCommonHashHashing : NSObject

#pragma mark Public

+ (id<ComGoogleCommonHashHashFunction>)adler32;

+ (ComGoogleCommonHashHashCode *)combineOrderedWithJavaLangIterable:(id<JavaLangIterable>)hashCodes;

+ (ComGoogleCommonHashHashCode *)combineUnorderedWithJavaLangIterable:(id<JavaLangIterable>)hashCodes;

+ (jint)consistentHashWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)hashCode
                                              withInt:(jint)buckets;

+ (jint)consistentHashWithLong:(jlong)input
                       withInt:(jint)buckets;

+ (id<ComGoogleCommonHashHashFunction>)crc32;

+ (id<ComGoogleCommonHashHashFunction>)crc32c;

+ (id<ComGoogleCommonHashHashFunction>)goodFastHashWithInt:(jint)minimumBits;

+ (id<ComGoogleCommonHashHashFunction>)md5;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_128;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_128WithInt:(jint)seed;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_32;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_32WithInt:(jint)seed;

+ (id<ComGoogleCommonHashHashFunction>)sha1;

+ (id<ComGoogleCommonHashHashFunction>)sha256;

+ (id<ComGoogleCommonHashHashFunction>)sha512;

+ (id<ComGoogleCommonHashHashFunction>)sipHash24;

+ (id<ComGoogleCommonHashHashFunction>)sipHash24WithLong:(jlong)k0
                                                withLong:(jlong)k1;

#pragma mark Package-Private

+ (jint)checkPositiveAndMakeMultipleOf32WithInt:(jint)bits;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonHashHashing)

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_goodFastHashWithInt_(jint minimumBits);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_32WithInt_(jint seed);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_32();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_128WithInt_(jint seed);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_128();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sipHash24();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sipHash24WithLong_withLong_(jlong k0, jlong k1);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_md5();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha1();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha256();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha512();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_crc32c();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_crc32();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_adler32();

FOUNDATION_EXPORT jint ComGoogleCommonHashHashing_consistentHashWithComGoogleCommonHashHashCode_withInt_(ComGoogleCommonHashHashCode *hashCode, jint buckets);

FOUNDATION_EXPORT jint ComGoogleCommonHashHashing_consistentHashWithLong_withInt_(jlong input, jint buckets);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashing_combineOrderedWithJavaLangIterable_(id<JavaLangIterable> hashCodes);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashing_combineUnorderedWithJavaLangIterable_(id<JavaLangIterable> hashCodes);

FOUNDATION_EXPORT jint ComGoogleCommonHashHashing_checkPositiveAndMakeMultipleOf32WithInt_(jint bits);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashing)

#endif

#if !defined (_ComGoogleCommonHashHashing_ChecksumTypeEnum_) && (ComGoogleCommonHashHashing_INCLUDE_ALL || ComGoogleCommonHashHashing_ChecksumTypeEnum_INCLUDE)
#define _ComGoogleCommonHashHashing_ChecksumTypeEnum_

#define JavaLangEnum_RESTRICT 1
#define JavaLangEnum_INCLUDE 1
#include "java/lang/Enum.h"

#define ComGoogleCommonBaseSupplier_RESTRICT 1
#define ComGoogleCommonBaseSupplier_INCLUDE 1
#include "com/google/common/base/Supplier.h"

@protocol JavaUtilZipChecksum;

typedef NS_ENUM(NSUInteger, ComGoogleCommonHashHashing_ChecksumType) {
  ComGoogleCommonHashHashing_ChecksumType_CRC_32 = 0,
  ComGoogleCommonHashHashing_ChecksumType_ADLER_32 = 1,
};

@interface ComGoogleCommonHashHashing_ChecksumTypeEnum : JavaLangEnum < NSCopying, ComGoogleCommonBaseSupplier >

#pragma mark Public

- (id<JavaUtilZipChecksum>)get;

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonHashHashing_ChecksumTypeEnum_values();

+ (ComGoogleCommonHashHashing_ChecksumTypeEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT ComGoogleCommonHashHashing_ChecksumTypeEnum *ComGoogleCommonHashHashing_ChecksumTypeEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonHashHashing_ChecksumTypeEnum)

FOUNDATION_EXPORT ComGoogleCommonHashHashing_ChecksumTypeEnum *ComGoogleCommonHashHashing_ChecksumTypeEnum_values_[];

#define ComGoogleCommonHashHashing_ChecksumTypeEnum_CRC_32 ComGoogleCommonHashHashing_ChecksumTypeEnum_values_[ComGoogleCommonHashHashing_ChecksumType_CRC_32]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleCommonHashHashing_ChecksumTypeEnum, CRC_32)

#define ComGoogleCommonHashHashing_ChecksumTypeEnum_ADLER_32 ComGoogleCommonHashHashing_ChecksumTypeEnum_values_[ComGoogleCommonHashHashing_ChecksumType_ADLER_32]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleCommonHashHashing_ChecksumTypeEnum, ADLER_32)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashing_ChecksumTypeEnum)

#endif

#if !defined (_ComGoogleCommonHashHashing_ConcatenatedHashFunction_) && (ComGoogleCommonHashHashing_INCLUDE_ALL || ComGoogleCommonHashHashing_ConcatenatedHashFunction_INCLUDE)
#define _ComGoogleCommonHashHashing_ConcatenatedHashFunction_

#define ComGoogleCommonHashAbstractCompositeHashFunction_RESTRICT 1
#define ComGoogleCommonHashAbstractCompositeHashFunction_INCLUDE 1
#include "com/google/common/hash/AbstractCompositeHashFunction.h"

@class ComGoogleCommonHashHashCode;
@class IOSObjectArray;

@interface ComGoogleCommonHashHashing_ConcatenatedHashFunction : ComGoogleCommonHashAbstractCompositeHashFunction

#pragma mark Public

- (jint)bits;

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonHashHashFunctionArray:(IOSObjectArray *)functions;

- (ComGoogleCommonHashHashCode *)makeHashWithComGoogleCommonHashHasherArray:(IOSObjectArray *)hashers;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashHashing_ConcatenatedHashFunction)

FOUNDATION_EXPORT void ComGoogleCommonHashHashing_ConcatenatedHashFunction_initWithComGoogleCommonHashHashFunctionArray_(ComGoogleCommonHashHashing_ConcatenatedHashFunction *self, IOSObjectArray *functions);

FOUNDATION_EXPORT ComGoogleCommonHashHashing_ConcatenatedHashFunction *new_ComGoogleCommonHashHashing_ConcatenatedHashFunction_initWithComGoogleCommonHashHashFunctionArray_(IOSObjectArray *functions) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashing_ConcatenatedHashFunction)

#endif

#pragma pop_macro("ComGoogleCommonHashHashing_INCLUDE_ALL")
