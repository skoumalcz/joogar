//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/collect/ConcurrentHashMultiset.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComGoogleCommonCollectConcurrentHashMultiset_INCLUDE_ALL")
#if ComGoogleCommonCollectConcurrentHashMultiset_RESTRICT
#define ComGoogleCommonCollectConcurrentHashMultiset_INCLUDE_ALL 0
#else
#define ComGoogleCommonCollectConcurrentHashMultiset_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonCollectConcurrentHashMultiset_RESTRICT

#if !defined (_ComGoogleCommonCollectConcurrentHashMultiset_) && (ComGoogleCommonCollectConcurrentHashMultiset_INCLUDE_ALL || ComGoogleCommonCollectConcurrentHashMultiset_INCLUDE)
#define _ComGoogleCommonCollectConcurrentHashMultiset_

#define ComGoogleCommonCollectAbstractMultiset_RESTRICT 1
#define ComGoogleCommonCollectAbstractMultiset_INCLUDE 1
#include "com/google/common/collect/AbstractMultiset.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCollectMapMaker;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

@interface ComGoogleCommonCollectConcurrentHashMultiset : ComGoogleCommonCollectAbstractMultiset < JavaIoSerializable >

#pragma mark Public

- (jint)addWithId:(id)element
          withInt:(jint)occurrences;

- (void)clear;

- (jint)countWithId:(id)element;

+ (ComGoogleCommonCollectConcurrentHashMultiset *)create;

+ (ComGoogleCommonCollectConcurrentHashMultiset *)createWithJavaLangIterable:(id<JavaLangIterable>)elements;

+ (ComGoogleCommonCollectConcurrentHashMultiset *)createWithComGoogleCommonCollectMapMaker:(ComGoogleCommonCollectMapMaker *)mapMaker;

- (id<JavaUtilSet>)createEntrySet;

- (jboolean)isEmpty;

- (jint)removeWithId:(id)element
             withInt:(jint)occurrences;

- (jboolean)removeExactlyWithId:(id)element
                        withInt:(jint)occurrences;

- (jint)setCountWithId:(id)element
               withInt:(jint)count;

- (jboolean)setCountWithId:(id)element
                   withInt:(jint)expectedOldCount
                   withInt:(jint)newCount;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)countMap;

- (id<JavaUtilSet>)createElementSet;

- (jint)distinctElements;

- (id<JavaUtilIterator>)entryIterator;


@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectConcurrentHashMultiset)

FOUNDATION_EXPORT ComGoogleCommonCollectConcurrentHashMultiset *ComGoogleCommonCollectConcurrentHashMultiset_create();

FOUNDATION_EXPORT ComGoogleCommonCollectConcurrentHashMultiset *ComGoogleCommonCollectConcurrentHashMultiset_createWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectConcurrentHashMultiset *ComGoogleCommonCollectConcurrentHashMultiset_createWithComGoogleCommonCollectMapMaker_(ComGoogleCommonCollectMapMaker *mapMaker);

FOUNDATION_EXPORT void ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCollectConcurrentHashMultiset *self, id<JavaUtilConcurrentConcurrentMap> countMap);

FOUNDATION_EXPORT ComGoogleCommonCollectConcurrentHashMultiset *new_ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(id<JavaUtilConcurrentConcurrentMap> countMap) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectConcurrentHashMultiset)

#endif

#pragma pop_macro("ComGoogleCommonCollectConcurrentHashMultiset_INCLUDE_ALL")
