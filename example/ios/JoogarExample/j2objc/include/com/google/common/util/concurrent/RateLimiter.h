//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/util/concurrent/RateLimiter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL")
#if ComGoogleCommonUtilConcurrentRateLimiter_RESTRICT
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL 0
#else
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentRateLimiter_RESTRICT

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_

@class ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;
@class JavaUtilConcurrentTimeUnitEnum;

@interface ComGoogleCommonUtilConcurrentRateLimiter : NSObject

#pragma mark Public

- (jdouble)acquire;

- (jdouble)acquireWithInt:(jint)permits;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
                                                      withLong:(jlong)warmupPeriod
                            withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jdouble)getRate;

- (void)setRateWithDouble:(jdouble)permitsPerSecond;

- (NSString *)description;

- (jboolean)tryAcquire;

- (jboolean)tryAcquireWithInt:(jint)permits;

- (jboolean)tryAcquireWithInt:(jint)permits
                     withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jboolean)tryAcquireWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch
                                                                                                        withDouble:(jdouble)permitsPerSecond;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch
                                                                                                        withDouble:(jdouble)permitsPerSecond
                                                                                                          withLong:(jlong)warmupPeriod
                                                                                withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jdouble)doGetRate;

- (void)doSetRateWithDouble:(jdouble)permitsPerSecond
                   withLong:(jlong)nowMicros;

- (jlong)queryEarliestAvailableWithLong:(jlong)nowMicros;

- (jlong)reserveWithInt:(jint)permits;

- (jlong)reserveAndGetWaitLengthWithInt:(jint)permits
                               withLong:(jlong)nowMicros;

- (jlong)reserveEarliestAvailableWithInt:(jint)permits
                                withLong:(jlong)nowMicros;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_(jdouble permitsPerSecond);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch, jdouble permitsPerSecond);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withLong_withJavaUtilConcurrentTimeUnitEnum_(jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnitEnum *unit);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_withLong_withJavaUtilConcurrentTimeUnitEnum_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch, jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnitEnum *unit);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentRateLimiter_initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_(ComGoogleCommonUtilConcurrentRateLimiter *self, ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentRateLimiter)

#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_

@interface ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)createFromSystemTimer;

- (jlong)readMicros;

- (void)sleepMicrosUninterruptiblyWithLong:(jlong)micros;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_createFromSystemTimer();

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_init(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch)

#endif

#pragma pop_macro("ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL")
