//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/JoogarDatabaseBuilder.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JoogarDatabase.h"
#include "JoogarDatabaseBuilder.h"
#include "JoogarObjectAbstractFactory.h"
#include "SchemaGenerator.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/security/InvalidParameterException.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface JavaJoogarDatabaseBuilder () {
 @public
  jint version__;
  JavaIoFile *dbPath_;
  NSString *dbName_;
  id<JavaUtilList> domainClasses_;
}

- (JavaJoogarDatabase *)createDatabaseWithJavaJoogarObjectAbstractFactory:(id<JavaJoogarObjectAbstractFactory>)gObjectFactory;

@end

J2OBJC_FIELD_SETTER(JavaJoogarDatabaseBuilder, dbPath_, JavaIoFile *)
J2OBJC_FIELD_SETTER(JavaJoogarDatabaseBuilder, dbName_, NSString *)
J2OBJC_FIELD_SETTER(JavaJoogarDatabaseBuilder, domainClasses_, id<JavaUtilList>)

__attribute__((unused)) static JavaJoogarDatabase *JavaJoogarDatabaseBuilder_createDatabaseWithJavaJoogarObjectAbstractFactory_(JavaJoogarDatabaseBuilder *self, id<JavaJoogarObjectAbstractFactory> gObjectFactory);

@implementation JavaJoogarDatabaseBuilder

- (JavaJoogarDatabaseBuilder *)setVersionWithInt:(jint)version_ {
  if (version_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Lowest allowed version is 1.");
  }
  self->version__ = version_;
  return self;
}

- (JavaJoogarDatabaseBuilder *)setFileWithJavaIoFile:(JavaIoFile *)path {
  self->dbPath_ = path;
  return self;
}

- (JavaJoogarDatabaseBuilder *)setNameWithNSString:(NSString *)name {
  self->dbName_ = name;
  return self;
}

- (NSString *)getName {
  return dbName_;
}

- (JavaJoogarDatabaseBuilder *)setDomainClassesWithIOSClassArray:(IOSObjectArray *)domainClasses {
  self->domainClasses_ = JavaUtilArrays_asListWithNSObjectArray_(domainClasses);
  return self;
}

- (JavaJoogarDatabaseBuilder *)setDomainClassesWithJavaUtilList:(id<JavaUtilList>)domainClasses {
  self->domainClasses_ = domainClasses;
  return self;
}

- (id<JavaUtilList>)getDomainClasses {
  return domainClasses_;
}

- (JavaJoogarDatabase *)buildWithJavaJoogarObjectAbstractFactory:(id<JavaJoogarObjectAbstractFactory>)gObjectFactory {
  JavaJoogarDatabase *db = JavaJoogarDatabaseBuilder_createDatabaseWithJavaJoogarObjectAbstractFactory_(self, gObjectFactory);
  jint currentVersion = [((JavaJoogarDatabase *) nil_chk(db)) getVersion];
  jint requiredVersion = version__;
  JavaSchemaGenerator *schemaGenerator = new_JavaSchemaGenerator_initWithJavaJoogarDatabase_withNSString_(db, dbName_);
  if (currentVersion > requiredVersion) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Version downgrade is currently not supported.");
  }
  else if (currentVersion < requiredVersion) {
    [schemaGenerator doUpgradeWithInt:currentVersion withInt:requiredVersion withJavaUtilList:domainClasses_];
  }
  [db setVersionWithInt:requiredVersion];
  return db;
}

- (JavaJoogarDatabase *)createDatabaseWithJavaJoogarObjectAbstractFactory:(id<JavaJoogarObjectAbstractFactory>)gObjectFactory {
  return JavaJoogarDatabaseBuilder_createDatabaseWithJavaJoogarObjectAbstractFactory_(self, gObjectFactory);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaJoogarDatabaseBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setVersionWithInt:", "setVersion", "Lnet.skoumal.joogar.shared.JoogarDatabaseBuilder;", 0x1, NULL, NULL },
    { "setFileWithJavaIoFile:", "setFile", "Lnet.skoumal.joogar.shared.JoogarDatabaseBuilder;", 0x1, NULL, NULL },
    { "setNameWithNSString:", "setName", "Lnet.skoumal.joogar.shared.JoogarDatabaseBuilder;", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setDomainClassesWithIOSClassArray:", "setDomainClasses", "Lnet.skoumal.joogar.shared.JoogarDatabaseBuilder;", 0x81, NULL, NULL },
    { "setDomainClassesWithJavaUtilList:", "setDomainClasses", "Lnet.skoumal.joogar.shared.JoogarDatabaseBuilder;", 0x1, NULL, NULL },
    { "getDomainClasses", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "buildWithJavaJoogarObjectAbstractFactory:", "build", "Lnet.skoumal.joogar.shared.JoogarDatabase;", 0x1, NULL, NULL },
    { "createDatabaseWithJavaJoogarObjectAbstractFactory:", "createDatabase", "Lnet.skoumal.joogar.shared.JoogarDatabase;", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "version__", "version", 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "dbPath_", NULL, 0x2, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "dbName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "domainClasses_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Class;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _JavaJoogarDatabaseBuilder = { 2, "JoogarDatabaseBuilder", "net.skoumal.joogar.shared", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaJoogarDatabaseBuilder;
}

@end

JavaJoogarDatabase *JavaJoogarDatabaseBuilder_createDatabaseWithJavaJoogarObjectAbstractFactory_(JavaJoogarDatabaseBuilder *self, id<JavaJoogarObjectAbstractFactory> gObjectFactory) {
  JavaJoogarDatabase *db;
  if (self->dbPath_ != nil) {
    db = [((id<JavaJoogarObjectAbstractFactory>) nil_chk(gObjectFactory)) getDatabaseWithJavaIoFile:self->dbPath_];
  }
  else if (self->dbName_ != nil) {
    db = [((id<JavaJoogarObjectAbstractFactory>) nil_chk(gObjectFactory)) getDatabaseWithNSString:self->dbName_];
  }
  else {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"Please define database path or name.");
  }
  return db;
}

void JavaJoogarDatabaseBuilder_init(JavaJoogarDatabaseBuilder *self) {
  (void) NSObject_init(self);
  self->version__ = 1;
  self->dbName_ = @"joogar";
}

JavaJoogarDatabaseBuilder *new_JavaJoogarDatabaseBuilder_init() {
  JavaJoogarDatabaseBuilder *self = [JavaJoogarDatabaseBuilder alloc];
  JavaJoogarDatabaseBuilder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogarDatabaseBuilder)
