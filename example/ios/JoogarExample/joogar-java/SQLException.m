//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/SQLException.java
//

#include "J2ObjC_source.h"
#include "SQLException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"

@implementation JavaSQLException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaSQLException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)e {
  JavaSQLException_initWithJavaLangThrowable_(self, e);
  return self;
}

- (instancetype)initWithNSString:(NSString *)error {
  JavaSQLException_initWithNSString_(self, error);
  return self;
}

- (instancetype)initWithNSString:(NSString *)error
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  JavaSQLException_initWithNSString_withJavaLangThrowable_(self, error, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SQLException", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangThrowable:", "SQLException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "SQLException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withJavaLangThrowable:", "SQLException", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _JavaSQLException = { 2, "SQLException", "net.skoumal.joogar.shared", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaSQLException;
}

@end

void JavaSQLException_init(JavaSQLException *self) {
  (void) JavaLangRuntimeException_init(self);
}

JavaSQLException *new_JavaSQLException_init() {
  JavaSQLException *self = [JavaSQLException alloc];
  JavaSQLException_init(self);
  return self;
}

void JavaSQLException_initWithJavaLangThrowable_(JavaSQLException *self, JavaLangThrowable *e) {
  (void) JavaLangRuntimeException_initWithJavaLangThrowable_(self, e);
}

JavaSQLException *new_JavaSQLException_initWithJavaLangThrowable_(JavaLangThrowable *e) {
  JavaSQLException *self = [JavaSQLException alloc];
  JavaSQLException_initWithJavaLangThrowable_(self, e);
  return self;
}

void JavaSQLException_initWithNSString_(JavaSQLException *self, NSString *error) {
  (void) JavaLangRuntimeException_initWithNSString_(self, error);
}

JavaSQLException *new_JavaSQLException_initWithNSString_(NSString *error) {
  JavaSQLException *self = [JavaSQLException alloc];
  JavaSQLException_initWithNSString_(self, error);
  return self;
}

void JavaSQLException_initWithNSString_withJavaLangThrowable_(JavaSQLException *self, NSString *error, JavaLangThrowable *cause) {
  (void) JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, error, cause);
}

JavaSQLException *new_JavaSQLException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) {
  JavaSQLException *self = [JavaSQLException alloc];
  JavaSQLException_initWithNSString_withJavaLangThrowable_(self, error, cause);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaSQLException)
