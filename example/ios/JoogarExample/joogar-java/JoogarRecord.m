//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/JoogarRecord.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Joogar.h"
#include "JoogarCursor.h"
#include "JoogarCursorImpl.h"
#include "JoogarCursorList.h"
#include "JoogarDatabase.h"
#include "JoogarDatabaseResult.h"
#include "JoogarLogger.h"
#include "JoogarRecord.h"
#include "NamingHelper.h"
#include "QueryBuilder.h"
#include "ReflectionUtils.h"
#include "SQLException.h"
#include "Table.h"
#include "android/text/TextUtils.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Field.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface JavaJoogarRecord ()

+ (void)buildJoinForPrefetchesWithIOSClass:(IOSClass *)type
        withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)prefetches
                              withNSString:(NSString *)table
                 withJavaLangStringBuilder:(JavaLangStringBuilder *)joinBuilder
                          withJavaUtilList:(id<JavaUtilList>)columns;

@end

__attribute__((unused)) static void JavaJoogarRecord_buildJoinForPrefetchesWithIOSClass_withJavaJoogarRecord_PrefetchArray_withNSString_withJavaLangStringBuilder_withJavaUtilList_(IOSClass *type, IOSObjectArray *prefetches, NSString *table, JavaLangStringBuilder *joinBuilder, id<JavaUtilList> columns);

@interface JavaJoogarRecord_OneToOnePrefetch () {
 @public
  NSString *field_;
  NSString *fieldFrom_;
  NSString *fieldTo_;
  jboolean optional_;
  IOSObjectArray *childPrefetch_;
}

@end

J2OBJC_FIELD_SETTER(JavaJoogarRecord_OneToOnePrefetch, field_, NSString *)
J2OBJC_FIELD_SETTER(JavaJoogarRecord_OneToOnePrefetch, fieldFrom_, NSString *)
J2OBJC_FIELD_SETTER(JavaJoogarRecord_OneToOnePrefetch, fieldTo_, NSString *)
J2OBJC_FIELD_SETTER(JavaJoogarRecord_OneToOnePrefetch, childPrefetch_, IOSObjectArray *)

@implementation JavaJoogarRecord

+ (jint)deleteAllWithIOSClass:(IOSClass *)type {
  return JavaJoogarRecord_deleteAllWithIOSClass_(type);
}

+ (jint)deleteAllWithIOSClass:(IOSClass *)type
                 withNSString:(NSString *)whereClause
            withNSStringArray:(IOSObjectArray *)whereArgs {
  return JavaJoogarRecord_deleteAllWithIOSClass_withNSString_withNSStringArray_(type, whereClause, whereArgs);
}

+ (void)saveInTxWithNSObjectArray:(IOSObjectArray *)objects {
  JavaJoogarRecord_saveInTxWithNSObjectArray_(objects);
}

+ (void)saveInTxWithJavaUtilCollection:(id<JavaUtilCollection>)objects {
  JavaJoogarRecord_saveInTxWithJavaUtilCollection_(objects);
}

+ (void)deleteInTxWithNSObjectArray:(IOSObjectArray *)objects {
  JavaJoogarRecord_deleteInTxWithNSObjectArray_(objects);
}

+ (void)deleteInTxWithJavaUtilCollection:(id<JavaUtilCollection>)objects {
  JavaJoogarRecord_deleteInTxWithJavaUtilCollection_(objects);
}

+ (id)findByIdWithIOSClass:(IOSClass *)type
          withJavaLangLong:(JavaLangLong *)id_ {
  return JavaJoogarRecord_findByIdWithIOSClass_withJavaLangLong_(type, id_);
}

+ (id)findByIdWithIOSClass:(IOSClass *)type
       withJavaLangInteger:(JavaLangInteger *)id_ {
  return JavaJoogarRecord_findByIdWithIOSClass_withJavaLangInteger_(type, id_);
}

+ (id<JavaJoogarCursor>)findByIdWithIOSClass:(IOSClass *)type
                           withNSStringArray:(IOSObjectArray *)ids {
  return JavaJoogarRecord_findByIdWithIOSClass_withNSStringArray_(type, ids);
}

+ (id<JavaJoogarCursor>)findAllWithIOSClass:(IOSClass *)type {
  return JavaJoogarRecord_findAllWithIOSClass_(type);
}

+ (id<JavaJoogarCursor>)findWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs {
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_(type, whereClause, whereArgs);
}

+ (id<JavaJoogarCursor>)findWithQueryWithIOSClass:(IOSClass *)type
                                     withNSString:(NSString *)query
                                withNSStringArray:(IOSObjectArray *)arguments {
  return JavaJoogarRecord_findWithQueryWithIOSClass_withNSString_withNSStringArray_(type, query, arguments);
}

+ (void)executeQueryWithNSString:(NSString *)query
               withNSStringArray:(IOSObjectArray *)arguments {
  JavaJoogarRecord_executeQueryWithNSString_withNSStringArray_(query, arguments);
}

+ (void)executeQueryWithNSString:(NSString *)dbName
                    withNSString:(NSString *)query
               withNSStringArray:(IOSObjectArray *)arguments {
  JavaJoogarRecord_executeQueryWithNSString_withNSString_withNSStringArray_(dbName, query, arguments);
}

+ (id<JavaJoogarCursor>)findWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                            withNSString:(NSString *)groupBy
                            withNSString:(NSString *)orderBy
                            withNSString:(NSString *)limit {
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_(type, whereClause, whereArgs, groupBy, orderBy, limit);
}

+ (id<JavaJoogarCursor>)findWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                            withNSString:(NSString *)groupBy
                            withNSString:(NSString *)orderBy
                            withNSString:(NSString *)limit
      withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)prefetches {
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(type, whereClause, whereArgs, groupBy, orderBy, limit, prefetches);
}

+ (void)buildJoinForPrefetchesWithIOSClass:(IOSClass *)type
        withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)prefetches
                              withNSString:(NSString *)table
                 withJavaLangStringBuilder:(JavaLangStringBuilder *)joinBuilder
                          withJavaUtilList:(id<JavaUtilList>)columns {
  JavaJoogarRecord_buildJoinForPrefetchesWithIOSClass_withJavaJoogarRecord_PrefetchArray_withNSString_withJavaLangStringBuilder_withJavaUtilList_(type, prefetches, table, joinBuilder, columns);
}

+ (jlong)countWithIOSClass:(IOSClass *)type {
  return JavaJoogarRecord_countWithIOSClass_(type);
}

+ (jlong)countWithIOSClass:(IOSClass *)type
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return JavaJoogarRecord_countWithIOSClass_withNSString_withNSStringArray_(type, whereClause, whereArgs);
}

+ (jlong)saveWithId:(id)object {
  return JavaJoogarRecord_saveWithId_(object);
}

+ (jlong)saveWithJavaJoogarDatabase:(JavaJoogarDatabase *)db
                             withId:(id)object {
  return JavaJoogarRecord_saveWithJavaJoogarDatabase_withId_(db, object);
}

- (jboolean)delete__ {
  JavaLangLong *id_ = [self getId];
  IOSClass *type = [self getClass];
  if (id_ != nil && [id_ longLongValue] > 0LL) {
    return JavaJoogarRecord_deleteByIdWithIOSClass_withJavaLangLong_(type, id_);
  }
  else {
    [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) wWithNSString:JreStrcat("$$$", @"Cannot delete object: ", [type getSimpleName], @" - object has not been saved")];
    return false;
  }
}

+ (jboolean)deleteByIdWithIOSClass:(IOSClass *)type
                  withJavaLangLong:(JavaLangLong *)id_ {
  return JavaJoogarRecord_deleteByIdWithIOSClass_withJavaLangLong_(type, id_);
}

+ (jboolean)delete__WithId:(id)object {
  return JavaJoogarRecord_delete__WithId_(object);
}

+ (void)openTransaction {
  JavaJoogarRecord_openTransaction();
}

+ (void)openTransactionWithIOSClass:(IOSClass *)gType {
  JavaJoogarRecord_openTransactionWithIOSClass_(gType);
}

+ (void)commitTransaction {
  JavaJoogarRecord_commitTransaction();
}

+ (void)commitTransactionWithIOSClass:(IOSClass *)gType {
  JavaJoogarRecord_commitTransactionWithIOSClass_(gType);
}

+ (void)rollbackTransaction {
  JavaJoogarRecord_rollbackTransaction();
}

+ (void)rollbackTransactionWithIOSClass:(IOSClass *)gType {
  JavaJoogarRecord_rollbackTransactionWithIOSClass_(gType);
}

- (jlong)save {
  return JavaJoogarRecord_saveWithJavaJoogarDatabase_withId_([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:[self getClass]], self);
}

+ (void)saveWithNSObjectArray:(IOSObjectArray *)objects {
  JavaJoogarRecord_saveWithNSObjectArray_(objects);
}

+ (void)saveWithJavaUtilCollection:(id<JavaUtilCollection>)objects {
  JavaJoogarRecord_saveWithJavaUtilCollection_(objects);
}

- (JavaLangLong *)getId {
  return id__;
}

- (void)setIdWithJavaLangLong:(JavaLangLong *)id_ {
  self->id__ = id_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaJoogarRecord_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "deleteAllWithIOSClass:", "deleteAll", "I", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)I" },
    { "deleteAllWithIOSClass:withNSString:withNSStringArray:", "deleteAll", "I", 0x89, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;[Ljava/lang/String;)I" },
    { "saveInTxWithNSObjectArray:", "saveInTx", "V", 0x89, NULL, "<T:Ljava/lang/Object;>([TT;)V" },
    { "saveInTxWithJavaUtilCollection:", "saveInTx", "V", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)V" },
    { "deleteInTxWithNSObjectArray:", "deleteInTx", "V", 0x89, NULL, "<T:Ljava/lang/Object;>([TT;)V" },
    { "deleteInTxWithJavaUtilCollection:", "deleteInTx", "V", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)V" },
    { "findByIdWithIOSClass:withJavaLangLong:", "findById", "TT;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/Long;)TT;" },
    { "findByIdWithIOSClass:withJavaLangInteger:", "findById", "TT;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/Integer;)TT;" },
    { "findByIdWithIOSClass:withNSStringArray:", "findById", "Lnet.skoumal.joogar.shared.cursor.JoogarCursor;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;[Ljava/lang/String;)Lnet/skoumal/joogar/shared/cursor/JoogarCursor<TT;>;" },
    { "findAllWithIOSClass:", "findAll", "Lnet.skoumal.joogar.shared.cursor.JoogarCursor;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lnet/skoumal/joogar/shared/cursor/JoogarCursor<TT;>;" },
    { "findWithIOSClass:withNSString:withNSStringArray:", "find", "Lnet.skoumal.joogar.shared.cursor.JoogarCursor;", 0x89, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;[Ljava/lang/String;)Lnet/skoumal/joogar/shared/cursor/JoogarCursor<TT;>;" },
    { "findWithQueryWithIOSClass:withNSString:withNSStringArray:", "findWithQuery", "Lnet.skoumal.joogar.shared.cursor.JoogarCursor;", 0x89, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;[Ljava/lang/String;)Lnet/skoumal/joogar/shared/cursor/JoogarCursor<TT;>;" },
    { "executeQueryWithNSString:withNSStringArray:", "executeQuery", "V", 0x89, NULL, NULL },
    { "executeQueryWithNSString:withNSString:withNSStringArray:", "executeQuery", "V", 0x89, NULL, NULL },
    { "findWithIOSClass:withNSString:withNSStringArray:withNSString:withNSString:withNSString:", "find", "Lnet.skoumal.joogar.shared.cursor.JoogarCursor;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lnet/skoumal/joogar/shared/cursor/JoogarCursor<TT;>;" },
    { "findWithIOSClass:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withJavaJoogarRecord_PrefetchArray:", "find", "Lnet.skoumal.joogar.shared.cursor.JoogarCursor;", 0x89, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lnet/skoumal/joogar/shared/JoogarRecord$Prefetch;)Lnet/skoumal/joogar/shared/cursor/JoogarCursor<TT;>;" },
    { "buildJoinForPrefetchesWithIOSClass:withJavaJoogarRecord_PrefetchArray:withNSString:withJavaLangStringBuilder:withJavaUtilList:", "buildJoinForPrefetches", "V", 0xa, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;[Lnet/skoumal/joogar/shared/JoogarRecord$Prefetch;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List<Ljava/lang/String;>;)V" },
    { "countWithIOSClass:", "count", "J", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<*>;)J" },
    { "countWithIOSClass:withNSString:withNSStringArray:", "count", "J", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/String;)J" },
    { "saveWithId:", "save", "J", 0x9, NULL, NULL },
    { "saveWithJavaJoogarDatabase:withId:", "save", "J", 0x8, NULL, NULL },
    { "delete__", "delete", "Z", 0x1, NULL, NULL },
    { "deleteByIdWithIOSClass:withJavaLangLong:", "deleteById", "Z", 0x9, NULL, NULL },
    { "delete__WithId:", "delete", "Z", 0x9, NULL, NULL },
    { "openTransaction", NULL, "V", 0x9, NULL, NULL },
    { "openTransactionWithIOSClass:", "openTransaction", "V", 0x9, NULL, NULL },
    { "commitTransaction", NULL, "V", 0x9, NULL, NULL },
    { "commitTransactionWithIOSClass:", "commitTransaction", "V", 0x9, NULL, NULL },
    { "rollbackTransaction", NULL, "V", 0x9, NULL, NULL },
    { "rollbackTransactionWithIOSClass:", "rollbackTransaction", "V", 0x9, NULL, NULL },
    { "save", NULL, "J", 0x1, NULL, NULL },
    { "saveWithNSObjectArray:", "save", "V", 0x89, NULL, "<T:Ljava/lang/Object;>([TT;)V" },
    { "saveWithJavaUtilCollection:", "save", "V", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)V" },
    { "getId", NULL, "Ljava.lang.Long;", 0x1, NULL, NULL },
    { "setIdWithJavaLangLong:", "setId", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "id", 0x4, "Ljava.lang.Long;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lnet.skoumal.joogar.shared.JoogarRecord$Prefetch;", "Lnet.skoumal.joogar.shared.JoogarRecord$OneToOnePrefetch;"};
  static const J2ObjcClassInfo _JavaJoogarRecord = { 2, "JoogarRecord", "net.skoumal.joogar.shared", NULL, 0x1, 36, methods, 1, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_JavaJoogarRecord;
}

@end

jint JavaJoogarRecord_deleteAllWithIOSClass_(IOSClass *type) {
  JavaJoogarRecord_initialize();
  return [((JavaJoogarDatabase *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:type])) delete__WithNSString:JavaNamingHelper_toSQLNameWithIOSClass_(type) withNSString:nil withNSStringArray:nil];
}

jint JavaJoogarRecord_deleteAllWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs) {
  JavaJoogarRecord_initialize();
  return [((JavaJoogarDatabase *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:type])) delete__WithNSString:JavaNamingHelper_toSQLNameWithIOSClass_(type) withNSString:whereClause withNSStringArray:whereArgs];
}

void JavaJoogarRecord_saveInTxWithNSObjectArray_(IOSObjectArray *objects) {
  JavaJoogarRecord_initialize();
  JavaJoogarRecord_saveInTxWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(objects));
}

void JavaJoogarRecord_saveInTxWithJavaUtilCollection_(id<JavaUtilCollection> objects) {
  JavaJoogarRecord_initialize();
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented");
}

void JavaJoogarRecord_deleteInTxWithNSObjectArray_(IOSObjectArray *objects) {
  JavaJoogarRecord_initialize();
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented");
}

void JavaJoogarRecord_deleteInTxWithJavaUtilCollection_(id<JavaUtilCollection> objects) {
  JavaJoogarRecord_initialize();
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented");
}

id JavaJoogarRecord_findByIdWithIOSClass_withJavaLangLong_(IOSClass *type, JavaLangLong *id_) {
  JavaJoogarRecord_initialize();
  id<JavaJoogarCursor> cursor = JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_(type, @"id=?", [IOSObjectArray newArrayWithObjects:(id[]){ NSString_valueOf_(id_) } count:1 type:NSString_class_()], nil, nil, @"1");
  id result = [((id<JavaJoogarCursor>) nil_chk(cursor)) next];
  [cursor close];
  return result;
}

id JavaJoogarRecord_findByIdWithIOSClass_withJavaLangInteger_(IOSClass *type, JavaLangInteger *id_) {
  JavaJoogarRecord_initialize();
  return JavaJoogarRecord_findByIdWithIOSClass_withJavaLangLong_(type, JavaLangLong_valueOfWithLong_([((JavaLangInteger *) nil_chk(id_)) intValue]));
}

id<JavaJoogarCursor> JavaJoogarRecord_findByIdWithIOSClass_withNSStringArray_(IOSClass *type, IOSObjectArray *ids) {
  JavaJoogarRecord_initialize();
  NSString *whereClause = JreStrcat("$$C", @"id IN (", JavaQueryBuilder_generatePlaceholdersWithInt_(((IOSObjectArray *) nil_chk(ids))->size_), ')');
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_(type, whereClause, ids);
}

id<JavaJoogarCursor> JavaJoogarRecord_findAllWithIOSClass_(IOSClass *type) {
  JavaJoogarRecord_initialize();
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(type, nil, nil, nil, nil, nil, nil);
}

id<JavaJoogarCursor> JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs) {
  JavaJoogarRecord_initialize();
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(type, whereClause, whereArgs, nil, nil, nil, nil);
}

id<JavaJoogarCursor> JavaJoogarRecord_findWithQueryWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *query, IOSObjectArray *arguments) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *database = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:type];
  id<JavaJoogarDatabaseResult> result = [((JavaJoogarDatabase *) nil_chk(database)) rawQueryWithNSString:query withNSStringArray:arguments];
  id<JavaJoogarCursor> cursor = new_JavaJoogarCursorImpl_initWithIOSClass_withJavaJoogarDatabaseResult_(type, result);
  if ([((id<JavaJoogarDatabaseResult>) nil_chk(result)) allowsRandomAccess]) {
    return cursor;
  }
  else {
    id<JavaUtilList> list = [cursor toList];
    [cursor close];
    return new_JavaJoogarCursorList_initWithIOSClass_withJavaUtilList_(type, list);
  }
}

void JavaJoogarRecord_executeQueryWithNSString_withNSStringArray_(NSString *query, IOSObjectArray *arguments) {
  JavaJoogarRecord_initialize();
  [((JavaJoogarDatabase *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDB])) execSQLWithNSString:query withNSStringArray:arguments];
}

void JavaJoogarRecord_executeQueryWithNSString_withNSString_withNSStringArray_(NSString *dbName, NSString *query, IOSObjectArray *arguments) {
  JavaJoogarRecord_initialize();
  [((JavaJoogarDatabase *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithNSString:dbName])) execSQLWithNSString:query withNSStringArray:arguments];
}

id<JavaJoogarCursor> JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs, NSString *groupBy, NSString *orderBy, NSString *limit) {
  JavaJoogarRecord_initialize();
  return JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(type, whereClause, whereArgs, groupBy, orderBy, limit, nil);
}

id<JavaJoogarCursor> JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs, NSString *groupBy, NSString *orderBy, NSString *limit, IOSObjectArray *prefetches) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *database = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:type];
  NSString *table = JavaNamingHelper_toSQLNameWithIOSClass_(type);
  id<JavaUtilList> columns = new_JavaUtilArrayList_init();
  NSString *join;
  if (prefetches != nil) {
    JavaLangStringBuilder *joinBuilder = new_JavaLangStringBuilder_init();
    JavaJoogarRecord_buildJoinForPrefetchesWithIOSClass_withJavaJoogarRecord_PrefetchArray_withNSString_withJavaLangStringBuilder_withJavaUtilList_(type, prefetches, table, joinBuilder, columns);
    join = [joinBuilder description];
  }
  else {
    join = nil;
  }
  id<JavaJoogarDatabaseResult> result = [((JavaJoogarDatabase *) nil_chk(database)) queryWithNSString:table withNSString:join withNSStringArray:[columns toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[columns size] type:NSString_class_()]] withNSString:whereClause withNSStringArray:whereArgs withNSString:groupBy withNSString:nil withNSString:orderBy withNSString:limit];
  id<JavaJoogarCursor> cursor;
  if (prefetches != nil) {
    cursor = new_JavaJoogarCursorImpl_initWithIOSClass_withJavaJoogarDatabaseResult_withJavaJoogarRecord_PrefetchArray_(type, result, prefetches);
  }
  else {
    cursor = new_JavaJoogarCursorImpl_initWithIOSClass_withJavaJoogarDatabaseResult_(type, result);
  }
  if ([((id<JavaJoogarDatabaseResult>) nil_chk(result)) allowsRandomAccess]) {
    return cursor;
  }
  else {
    id<JavaUtilList> list = [((id<JavaJoogarCursor>) nil_chk(cursor)) toList];
    [cursor close];
    return new_JavaJoogarCursorList_initWithIOSClass_withJavaUtilList_(type, list);
  }
}

void JavaJoogarRecord_buildJoinForPrefetchesWithIOSClass_withJavaJoogarRecord_PrefetchArray_withNSString_withJavaLangStringBuilder_withJavaUtilList_(IOSClass *type, IOSObjectArray *prefetches, NSString *table, JavaLangStringBuilder *joinBuilder, id<JavaUtilList> columns) {
  JavaJoogarRecord_initialize();
  id<JavaUtilList> fields = [((JavaReflectionUtils *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getReflectionUtils])) getTableFieldsWithIOSClass:type];
  for (JavaLangReflectField * __strong f in nil_chk(fields)) {
    [((id<JavaUtilList>) nil_chk(columns)) addWithId:JreStrcat("$C$", table, '.', JavaNamingHelper_toSQLNameWithJavaLangReflectField_(f))];
  }
  {
    IOSObjectArray *a__ = prefetches;
    JavaJoogarRecord_Prefetch * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaJoogarRecord_Prefetch * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaJoogarRecord_Prefetch *p = *b__++;
      if ([p isKindOfClass:[JavaJoogarRecord_OneToOnePrefetch class]]) {
        JavaJoogarRecord_OneToOnePrefetch *otop = (JavaJoogarRecord_OneToOnePrefetch *) check_class_cast(p, [JavaJoogarRecord_OneToOnePrefetch class]);
        JavaLangReflectField *field = [((JavaReflectionUtils *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getReflectionUtils])) getDeepFieldWithNSString:[((JavaJoogarRecord_OneToOnePrefetch *) nil_chk(otop)) getField] withIOSClass:type];
        if (field == nil) {
          @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$", @"Prefetch field '", [otop getField], @"' not found for entity ", [((IOSClass *) nil_chk(type)) getName]));
        }
        NSString *tableFrom = table;
        NSString *tableTo = JavaNamingHelper_toSQLNameWithJavaLangReflectField_(field);
        (void) [((JavaLangStringBuilder *) nil_chk(joinBuilder)) appendWithNSString:@" JOIN "];
        (void) [joinBuilder appendWithNSString:tableTo];
        (void) [joinBuilder appendWithNSString:@" ON "];
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([joinBuilder appendWithNSString:tableFrom])) appendWithNSString:@"."])) appendWithNSString:JavaNamingHelper_toSQLNameDefaultWithNSString_([otop getFieldFrom])];
        (void) [joinBuilder appendWithNSString:@" = "];
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([joinBuilder appendWithNSString:tableTo])) appendWithNSString:@"."])) appendWithNSString:JavaNamingHelper_toSQLNameDefaultWithNSString_([otop getFieldTo])];
        JavaJoogarRecord_buildJoinForPrefetchesWithIOSClass_withJavaJoogarRecord_PrefetchArray_withNSString_withJavaLangStringBuilder_withJavaUtilList_([((JavaLangReflectField *) nil_chk(field)) getType], [otop getChildPrefetch], tableTo, joinBuilder, columns);
      }
    }
  }
}

jlong JavaJoogarRecord_countWithIOSClass_(IOSClass *type) {
  JavaJoogarRecord_initialize();
  return JavaJoogarRecord_countWithIOSClass_withNSString_withNSStringArray_(type, nil, nil);
}

jlong JavaJoogarRecord_countWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *database = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:type];
  NSString *filter = (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause)) ? JreStrcat("$$", @" where ", whereClause) : @"";
  id<JavaJoogarDatabaseResult> result = [((JavaJoogarDatabase *) nil_chk(database)) rawQueryWithNSString:JreStrcat("$$$", @"SELECT count(*) FROM ", JavaNamingHelper_toSQLNameWithIOSClass_(type), filter) withNSStringArray:whereArgs];
  [((id<JavaJoogarDatabaseResult>) nil_chk(result)) next];
  jint count = [result getIntWithInt:0];
  [result close];
  return count;
}

jlong JavaJoogarRecord_saveWithId_(id object) {
  JavaJoogarRecord_initialize();
  return JavaJoogarRecord_saveWithJavaJoogarDatabase_withId_([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:[nil_chk(object) getClass]], object);
}

jlong JavaJoogarRecord_saveWithJavaJoogarDatabase_withId_(JavaJoogarDatabase *db, id object) {
  JavaJoogarRecord_initialize();
  id<JavaUtilList> columns = [((JavaReflectionUtils *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getReflectionUtils])) getTableFieldsWithIOSClass:[nil_chk(object) getClass]];
  IOSObjectArray *values = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(columns)) size] type:NSObject_class_()];
  JavaLangReflectField *idField = nil;
  for (jint i = 0; i < [columns size]; i++) {
    JavaLangReflectField *column = [columns getWithInt:i];
    (void) IOSObjectArray_Set(values, i, [((JavaReflectionUtils *) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getReflectionUtils])) getFieldValueWithJavaLangReflectField:column withId:object]);
    if ([((NSString *) nil_chk([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(column)) getName])) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, UK_)])) isEqual:@"id"]) {
      idField = column;
      if (IOSObjectArray_Get(values, i) != nil && [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(IOSObjectArray_Get(values, i), [NSNumber class])))) longLongValue] < 1) {
        (void) IOSObjectArray_Set(values, i, nil);
      }
    }
  }
  JavaJoogarDatabase *database = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:[object getClass]];
  jlong id_ = [((JavaJoogarDatabase *) nil_chk(database)) insertOrUpdateWithNSString:JavaNamingHelper_toSQLNameWithIOSClass_([object getClass]) withJavaUtilList:columns withNSObjectArray:values];
  if (id_ > 0) {
    if ([[object getClass] isAnnotationPresentWithIOSClass:JavaTable_class_()]) {
      if (idField != nil) {
        [idField setAccessibleWithBoolean:true];
        @try {
          [idField setWithId:object withId:new_JavaLangLong_initWithLong_(id_)];
        }
        @catch (JavaLangIllegalAccessException *e) {
          @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
        }
      }
      else {
        @throw new_JavaSQLException_initWithNSString_(JreStrcat("$$", @"There is no primary key for ", [[object getClass] getName]));
      }
    }
    else if ([JavaJoogarRecord_class_() isAssignableFrom:[object getClass]]) {
      [((JavaJoogarRecord *) check_class_cast(object, [JavaJoogarRecord class])) setIdWithJavaLangLong:JavaLangLong_valueOfWithLong_(id_)];
    }
  }
  if (JavaJoogar_isDebug()) {
    [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) iWithNSString:JreStrcat("$$J", [[object getClass] getSimpleName], @" saved : ", id_)];
  }
  return id_;
}

jboolean JavaJoogarRecord_deleteByIdWithIOSClass_withJavaLangLong_(IOSClass *type, JavaLangLong *id_) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:type];
  jint deletedCount = [((JavaJoogarDatabase *) nil_chk(db)) delete__WithNSString:JavaNamingHelper_toSQLNameWithIOSClass_(type) withNSString:@"id=?" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((JavaLangLong *) nil_chk(id_)) description] } count:1 type:NSString_class_()]];
  if (JavaJoogar_isDebug()) {
    [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) iWithNSString:JreStrcat("$$$", [((IOSClass *) nil_chk(type)) getSimpleName], @" deleted : ", [id_ description])];
  }
  return deletedCount == 1;
}

jboolean JavaJoogarRecord_delete__WithId_(id object) {
  JavaJoogarRecord_initialize();
  IOSClass *type = [nil_chk(object) getClass];
  if ([type isAnnotationPresentWithIOSClass:JavaTable_class_()]) {
    @try {
      JavaLangReflectField *field = [type getDeclaredField:@"id"];
      [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBoolean:true];
      JavaLangLong *id_ = (JavaLangLong *) check_class_cast([field getWithId:object], [JavaLangLong class]);
      if (id_ != nil && [id_ longLongValue] > 0LL) {
        return JavaJoogarRecord_deleteByIdWithIOSClass_withJavaLangLong_(type, id_);
      }
      else {
        [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) wWithNSString:JreStrcat("$$$", @"Cannot delete object: ", [[object getClass] getSimpleName], @" - object has not been saved")];
        return false;
      }
    }
    @catch (JavaLangNoSuchFieldException *e) {
      [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) wWithNSString:JreStrcat("$$$", @"Cannot delete object: ", [[object getClass] getSimpleName], @" - annotated object has no id")];
      return false;
    }
    @catch (JavaLangIllegalAccessException *e) {
      [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) wWithNSString:JreStrcat("$$$", @"Cannot delete object: ", [[object getClass] getSimpleName], @" - can't access id")];
      return false;
    }
  }
  else if ([JavaJoogarRecord_class_() isAssignableFrom:type]) {
    return [((JavaJoogarRecord *) check_class_cast(object, [JavaJoogarRecord class])) delete__];
  }
  else {
    [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) wWithNSString:JreStrcat("$$$", @"Cannot delete object: ", [[object getClass] getSimpleName], @" - not persisted")];
    return false;
  }
}

void JavaJoogarRecord_openTransaction() {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDB];
  [((JavaJoogarDatabase *) nil_chk(db)) openTransaction];
}

void JavaJoogarRecord_openTransactionWithIOSClass_(IOSClass *gType) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:gType];
  [((JavaJoogarDatabase *) nil_chk(db)) openTransaction];
}

void JavaJoogarRecord_commitTransaction() {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDB];
  [((JavaJoogarDatabase *) nil_chk(db)) commitTransaction];
}

void JavaJoogarRecord_commitTransactionWithIOSClass_(IOSClass *gType) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:gType];
  [((JavaJoogarDatabase *) nil_chk(db)) commitTransaction];
}

void JavaJoogarRecord_rollbackTransaction() {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDB];
  [((JavaJoogarDatabase *) nil_chk(db)) rollbackTransaction];
}

void JavaJoogarRecord_rollbackTransactionWithIOSClass_(IOSClass *gType) {
  JavaJoogarRecord_initialize();
  JavaJoogarDatabase *db = [((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getDBWithIOSClass:gType];
  [((JavaJoogarDatabase *) nil_chk(db)) rollbackTransaction];
}

void JavaJoogarRecord_saveWithNSObjectArray_(IOSObjectArray *objects) {
  JavaJoogarRecord_initialize();
  JavaJoogarRecord_saveWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(objects));
}

void JavaJoogarRecord_saveWithJavaUtilCollection_(id<JavaUtilCollection> objects) {
  JavaJoogarRecord_initialize();
  for (id __strong object in nil_chk(objects)) {
    JavaJoogarRecord_saveWithId_(object);
  }
}

void JavaJoogarRecord_init(JavaJoogarRecord *self) {
  (void) NSObject_init(self);
  self->id__ = nil;
}

JavaJoogarRecord *new_JavaJoogarRecord_init() {
  JavaJoogarRecord *self = [JavaJoogarRecord alloc];
  JavaJoogarRecord_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogarRecord)

@implementation JavaJoogarRecord_Prefetch

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaJoogarRecord_Prefetch_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _JavaJoogarRecord_Prefetch = { 2, "Prefetch", "net.skoumal.joogar.shared", "JoogarRecord", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaJoogarRecord_Prefetch;
}

@end

void JavaJoogarRecord_Prefetch_init(JavaJoogarRecord_Prefetch *self) {
  (void) NSObject_init(self);
}

JavaJoogarRecord_Prefetch *new_JavaJoogarRecord_Prefetch_init() {
  JavaJoogarRecord_Prefetch *self = [JavaJoogarRecord_Prefetch alloc];
  JavaJoogarRecord_Prefetch_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogarRecord_Prefetch)

@implementation JavaJoogarRecord_OneToOnePrefetch

- (instancetype)initWithNSString:(NSString *)gField
                    withNSString:(NSString *)gFieldFrom
                    withNSString:(NSString *)gFieldTo
withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)gChildPrefetches {
  JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(self, gField, gFieldFrom, gFieldTo, gChildPrefetches);
  return self;
}

- (instancetype)initWithNSString:(NSString *)gField
                    withNSString:(NSString *)gConditionFrom
                    withNSString:(NSString *)gConditionTo
                     withBoolean:(jboolean)gOptional
withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)gChildPrefetches {
  JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(self, gField, gConditionFrom, gConditionTo, gOptional, gChildPrefetches);
  return self;
}

- (NSString *)getField {
  return field_;
}

- (NSString *)getFieldFrom {
  return fieldFrom_;
}

- (NSString *)getFieldTo {
  return fieldTo_;
}

- (jboolean)isOptional {
  return optional_;
}

- (IOSObjectArray *)getChildPrefetch {
  return childPrefetch_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:withJavaJoogarRecord_PrefetchArray:", "OneToOnePrefetch", NULL, 0x81, NULL, NULL },
    { "initWithNSString:withNSString:withNSString:withBoolean:withJavaJoogarRecord_PrefetchArray:", "OneToOnePrefetch", NULL, 0x81, NULL, NULL },
    { "getField", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFieldFrom", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFieldTo", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isOptional", NULL, "Z", 0x1, NULL, NULL },
    { "getChildPrefetch", NULL, "[Lnet.skoumal.joogar.shared.JoogarRecord$Prefetch;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldFrom_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldTo_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "optional_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "childPrefetch_", NULL, 0x2, "[Lnet.skoumal.joogar.shared.JoogarRecord$Prefetch;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _JavaJoogarRecord_OneToOnePrefetch = { 2, "OneToOnePrefetch", "net.skoumal.joogar.shared", "JoogarRecord", 0x9, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaJoogarRecord_OneToOnePrefetch;
}

@end

void JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(JavaJoogarRecord_OneToOnePrefetch *self, NSString *gField, NSString *gFieldFrom, NSString *gFieldTo, IOSObjectArray *gChildPrefetches) {
  (void) JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(self, gField, gFieldFrom, gFieldTo, false, gChildPrefetches);
}

JavaJoogarRecord_OneToOnePrefetch *new_JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(NSString *gField, NSString *gFieldFrom, NSString *gFieldTo, IOSObjectArray *gChildPrefetches) {
  JavaJoogarRecord_OneToOnePrefetch *self = [JavaJoogarRecord_OneToOnePrefetch alloc];
  JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(self, gField, gFieldFrom, gFieldTo, gChildPrefetches);
  return self;
}

void JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(JavaJoogarRecord_OneToOnePrefetch *self, NSString *gField, NSString *gConditionFrom, NSString *gConditionTo, jboolean gOptional, IOSObjectArray *gChildPrefetches) {
  (void) JavaJoogarRecord_Prefetch_init(self);
  self->field_ = gField;
  self->fieldFrom_ = gConditionFrom;
  self->fieldTo_ = gConditionTo;
  self->optional_ = gOptional;
  self->childPrefetch_ = gChildPrefetches;
}

JavaJoogarRecord_OneToOnePrefetch *new_JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(NSString *gField, NSString *gConditionFrom, NSString *gConditionTo, jboolean gOptional, IOSObjectArray *gChildPrefetches) {
  JavaJoogarRecord_OneToOnePrefetch *self = [JavaJoogarRecord_OneToOnePrefetch alloc];
  JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(self, gField, gConditionFrom, gConditionTo, gOptional, gChildPrefetches);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogarRecord_OneToOnePrefetch)
