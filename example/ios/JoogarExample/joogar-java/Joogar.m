//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/Joogar.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Joogar.h"
#include "JoogarDatabase.h"
#include "JoogarDatabaseBuilder.h"
#include "JoogarLogger.h"
#include "JoogarObjectAbstractFactory.h"
#include "ReflectionUtils.h"
#include "SystemUtils.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Hashtable.h"
#include "java/util/List.h"

#import "IOSJoogarObjectFactory.h"

@interface JavaJoogar () {
 @public
  jboolean isIos_;
  jboolean isAndroid_;
  id<JavaJoogarObjectAbstractFactory> objectFactory_;
  id<JavaJoogarLogger> logger_;
  id<JavaSystemUtils> systemUtils_;
  JavaReflectionUtils *reflectionUtils_;
  JavaJoogarDatabase *firstDatabase_;
  JavaUtilHashtable *nameToDatabase_;
  JavaUtilHashtable *entityToDatabase_;
}

- (instancetype)init;

- (void)initCommon OBJC_METHOD_FAMILY_NONE;

- (id<JavaJoogarObjectAbstractFactory>)createIosObjectFactory;

- (id<JavaJoogarObjectAbstractFactory>)createAndroidObjectFactoryWithId:(id)gContext;

@end

J2OBJC_FIELD_SETTER(JavaJoogar, objectFactory_, id<JavaJoogarObjectAbstractFactory>)
J2OBJC_FIELD_SETTER(JavaJoogar, logger_, id<JavaJoogarLogger>)
J2OBJC_FIELD_SETTER(JavaJoogar, systemUtils_, id<JavaSystemUtils>)
J2OBJC_FIELD_SETTER(JavaJoogar, reflectionUtils_, JavaReflectionUtils *)
J2OBJC_FIELD_SETTER(JavaJoogar, firstDatabase_, JavaJoogarDatabase *)
J2OBJC_FIELD_SETTER(JavaJoogar, nameToDatabase_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(JavaJoogar, entityToDatabase_, JavaUtilHashtable *)

static JavaJoogar *JavaJoogar_instance_;
J2OBJC_STATIC_FIELD_GETTER(JavaJoogar, instance_, JavaJoogar *)
J2OBJC_STATIC_FIELD_SETTER(JavaJoogar, instance_, JavaJoogar *)

static jboolean JavaJoogar_isDebug_;
J2OBJC_STATIC_FIELD_GETTER(JavaJoogar, isDebug_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(JavaJoogar, isDebug_, jboolean)
__attribute__((unused)) static void JavaJoogar_init(JavaJoogar *self);

__attribute__((unused)) static JavaJoogar *new_JavaJoogar_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void JavaJoogar_initCommon(JavaJoogar *self);

__attribute__((unused)) static id<JavaJoogarObjectAbstractFactory> JavaJoogar_createIosObjectFactory(JavaJoogar *self);

__attribute__((unused)) static id<JavaJoogarObjectAbstractFactory> JavaJoogar_createAndroidObjectFactoryWithId_(JavaJoogar *self, id gContext);

@implementation JavaJoogar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaJoogar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaJoogar *)getInstance {
  return JavaJoogar_getInstance();
}

+ (JavaJoogar *)initForAndroidWithId:(id)gContext {
  return JavaJoogar_initForAndroidWithId_(gContext);
}

+ (JavaJoogar *)initForIos {
  return JavaJoogar_initForIos();
}

- (void)initCommon {
  JavaJoogar_initCommon(self);
}

- (JavaJoogar *)addDBWithJavaJoogarDatabaseBuilder:(JavaJoogarDatabaseBuilder *)gBuilder {
  if ([((JavaUtilHashtable *) nil_chk(nameToDatabase_)) getWithId:[((JavaJoogarDatabaseBuilder *) nil_chk(gBuilder)) getName]] != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Database with name ", [gBuilder getName], @" already exists."));
  }
  JavaJoogarDatabase *database = [gBuilder buildWithJavaJoogarObjectAbstractFactory:objectFactory_];
  (void) [nameToDatabase_ putWithId:[gBuilder getName] withId:database];
  if (firstDatabase_ == nil) {
    firstDatabase_ = database;
  }
  id<JavaUtilList> domainClasses = [gBuilder getDomainClasses];
  for (IOSClass * __strong c in nil_chk(domainClasses)) {
    JavaJoogarDatabase *oldValue = [((JavaUtilHashtable *) nil_chk(entityToDatabase_)) putWithId:[((IOSClass *) nil_chk(c)) getName] withId:database];
    if (oldValue != nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"You are trying to assign entity '", [c getName], @"' to more than one database. Use different sublasses if you need the same entity stored in more databases."));
    }
  }
  return self;
}

- (JavaJoogarDatabase *)getDBWithIOSClass:(IOSClass *)gType {
  NSString *entityName = [((IOSClass *) nil_chk(gType)) getName];
  JavaJoogarDatabase *database = [((JavaUtilHashtable *) nil_chk(entityToDatabase_)) getWithId:entityName];
  if (database == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Database for type ", [gType getName], @" not found. Did you mention it in JoogarDatabaseBuilder.setDomainClasses()?"));
  }
  return database;
}

- (JavaJoogarDatabase *)getDBWithNSString:(NSString *)dbName {
  return [((JavaUtilHashtable *) nil_chk(nameToDatabase_)) getWithId:dbName];
}

- (JavaJoogarDatabase *)getDB {
  return firstDatabase_;
}

- (id<JavaJoogarLogger>)getLogger {
  return logger_;
}

- (id<JavaSystemUtils>)getSystemUtils {
  return systemUtils_;
}

- (JavaReflectionUtils *)getReflectionUtils {
  return reflectionUtils_;
}

- (id<JavaJoogarObjectAbstractFactory>)createIosObjectFactory {
  return JavaJoogar_createIosObjectFactory(self);
}

- (id<JavaJoogarObjectAbstractFactory>)createAndroidObjectFactoryWithId:(id)gContext {
  return JavaJoogar_createAndroidObjectFactoryWithId_(self, gContext);
}

+ (jboolean)isDebug {
  return JavaJoogar_isDebug();
}

+ (void)setDebugWithBoolean:(jboolean)gDebug {
  JavaJoogar_setDebugWithBoolean_(gDebug);
}

- (id<JavaUtilList>)getDBList {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashtable *) nil_chk(nameToDatabase_)) values]);
}

- (void)close {
  id<JavaUtilList> databaseList = [self getDBList];
  for (JavaJoogarDatabase * __strong jd in nil_chk(databaseList)) {
    [((JavaJoogarDatabase *) nil_chk(jd)) close];
  }
  JavaJoogar_instance_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Joogar", NULL, 0x2, NULL, NULL },
    { "getInstance", NULL, "Lnet.skoumal.joogar.shared.Joogar;", 0x9, NULL, NULL },
    { "initForAndroidWithId:", "initForAndroid", "Lnet.skoumal.joogar.shared.Joogar;", 0x9, NULL, NULL },
    { "initForIos", NULL, "Lnet.skoumal.joogar.shared.Joogar;", 0x9, NULL, NULL },
    { "initCommon", NULL, "V", 0x2, NULL, NULL },
    { "addDBWithJavaJoogarDatabaseBuilder:", "addDB", "Lnet.skoumal.joogar.shared.Joogar;", 0x1, NULL, NULL },
    { "getDBWithIOSClass:", "getDB", "Lnet.skoumal.joogar.shared.JoogarDatabase;", 0x1, NULL, NULL },
    { "getDBWithNSString:", "getDB", "Lnet.skoumal.joogar.shared.JoogarDatabase;", 0x1, NULL, NULL },
    { "getDB", NULL, "Lnet.skoumal.joogar.shared.JoogarDatabase;", 0x1, NULL, NULL },
    { "getLogger", NULL, "Lnet.skoumal.joogar.shared.JoogarLogger;", 0x1, NULL, NULL },
    { "getSystemUtils", NULL, "Lnet.skoumal.joogar.shared.SystemUtils;", 0x1, NULL, NULL },
    { "getReflectionUtils", NULL, "Lnet.skoumal.joogar.shared.util.ReflectionUtils;", 0x1, NULL, NULL },
    { "createIosObjectFactory", NULL, "Lnet.skoumal.joogar.shared.JoogarObjectAbstractFactory;", 0x102, NULL, NULL },
    { "createAndroidObjectFactoryWithId:", "createAndroidObjectFactory", "Lnet.skoumal.joogar.shared.JoogarObjectAbstractFactory;", 0x2, NULL, NULL },
    { "isDebug", NULL, "Z", 0x9, NULL, NULL },
    { "setDebugWithBoolean:", "setDebug", "V", 0x9, NULL, NULL },
    { "getDBList", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "instance_", NULL, 0xa, "Lnet.skoumal.joogar.shared.Joogar;", &JavaJoogar_instance_, NULL, .constantValue.asLong = 0 },
    { "isIos_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isAndroid_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "objectFactory_", NULL, 0x2, "Lnet.skoumal.joogar.shared.JoogarObjectAbstractFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "logger_", NULL, 0x2, "Lnet.skoumal.joogar.shared.JoogarLogger;", NULL, NULL, .constantValue.asLong = 0 },
    { "isDebug_", NULL, 0xa, "Z", &JavaJoogar_isDebug_, NULL, .constantValue.asLong = 0 },
    { "systemUtils_", NULL, 0x2, "Lnet.skoumal.joogar.shared.SystemUtils;", NULL, NULL, .constantValue.asLong = 0 },
    { "reflectionUtils_", NULL, 0x2, "Lnet.skoumal.joogar.shared.util.ReflectionUtils;", NULL, NULL, .constantValue.asLong = 0 },
    { "firstDatabase_", NULL, 0x2, "Lnet.skoumal.joogar.shared.JoogarDatabase;", NULL, NULL, .constantValue.asLong = 0 },
    { "nameToDatabase_", NULL, 0x2, "Ljava.util.Hashtable;", NULL, "Ljava/util/Hashtable<Ljava/lang/String;Lnet/skoumal/joogar/shared/JoogarDatabase;>;", .constantValue.asLong = 0 },
    { "entityToDatabase_", NULL, 0x2, "Ljava.util.Hashtable;", NULL, "Ljava/util/Hashtable<Ljava/lang/String;Lnet/skoumal/joogar/shared/JoogarDatabase;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _JavaJoogar = { 2, "Joogar", "net.skoumal.joogar.shared", NULL, 0x1, 18, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaJoogar;
}

@end

void JavaJoogar_init(JavaJoogar *self) {
  (void) NSObject_init(self);
  self->firstDatabase_ = nil;
  self->nameToDatabase_ = new_JavaUtilHashtable_init();
  self->entityToDatabase_ = new_JavaUtilHashtable_init();
}

JavaJoogar *new_JavaJoogar_init() {
  JavaJoogar *self = [JavaJoogar alloc];
  JavaJoogar_init(self);
  return self;
}

JavaJoogar *JavaJoogar_getInstance() {
  JavaJoogar_initialize();
  return JavaJoogar_instance_;
}

JavaJoogar *JavaJoogar_initForAndroidWithId_(id gContext) {
  JavaJoogar_initialize();
  if (JavaJoogar_instance_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Joogar already initialized.");
  }
  JavaJoogar_instance_ = new_JavaJoogar_init();
  JavaJoogar_instance_->isAndroid_ = true;
  JavaJoogar_instance_->objectFactory_ = JavaJoogar_createAndroidObjectFactoryWithId_(JavaJoogar_instance_, gContext);
  JavaJoogar_initCommon(JavaJoogar_instance_);
  return JavaJoogar_instance_;
}

JavaJoogar *JavaJoogar_initForIos() {
  JavaJoogar_initialize();
  JavaJoogar_instance_ = new_JavaJoogar_init();
  JavaJoogar_instance_->isIos_ = true;
  JavaJoogar_instance_->objectFactory_ = JavaJoogar_createIosObjectFactory(JavaJoogar_instance_);
  JavaJoogar_initCommon(JavaJoogar_instance_);
  return JavaJoogar_instance_;
}

void JavaJoogar_initCommon(JavaJoogar *self) {
  self->logger_ = [((id<JavaJoogarObjectAbstractFactory>) nil_chk(self->objectFactory_)) getLogger];
  self->systemUtils_ = [self->objectFactory_ getSystemUtils];
  self->reflectionUtils_ = [self->objectFactory_ getReflectionUtils];
}

id<JavaJoogarObjectAbstractFactory> JavaJoogar_createIosObjectFactory(JavaJoogar *self) {
  return [[IOSJoogarObjectFactory alloc] init];
}

id<JavaJoogarObjectAbstractFactory> JavaJoogar_createAndroidObjectFactoryWithId_(JavaJoogar *self, id gContext) {
  @try {
    IOSClass *androidObjectFactoryClass = IOSClass_forName_(@"net.skoumal.joogar.android.AndroidObjectFactory");
    IOSClass *androidContextClass = IOSClass_forName_(@"android.content.Context");
    JavaLangReflectConstructor *constructor = [((IOSClass *) nil_chk(androidObjectFactoryClass)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ androidContextClass } count:1 type:IOSClass_class_()]];
    return (id<JavaJoogarObjectAbstractFactory>) check_protocol_cast([((JavaLangReflectConstructor *) nil_chk(constructor)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ gContext } count:1 type:NSObject_class_()]], JavaJoogarObjectAbstractFactory_class_());
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

jboolean JavaJoogar_isDebug() {
  JavaJoogar_initialize();
  return JavaJoogar_isDebug_;
}

void JavaJoogar_setDebugWithBoolean_(jboolean gDebug) {
  JavaJoogar_initialize();
  JavaJoogar_isDebug_ = gDebug;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogar)
