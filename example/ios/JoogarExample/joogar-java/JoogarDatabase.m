//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/JoogarDatabase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Joogar.h"
#include "JoogarDatabase.h"
#include "JoogarDatabaseResult.h"
#include "JoogarLogger.h"
#include "NamingHelper.h"
#include "QueryBuilder.h"
#include "SQLException.h"
#include "android/text/TextUtils.h"
#include "java/io/File.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Field.h"
#include "java/util/List.h"

@interface JavaJoogarDatabase () {
 @public
  JavaIoFile *path_;
}

@end

J2OBJC_FIELD_SETTER(JavaJoogarDatabase, path_, JavaIoFile *)

@implementation JavaJoogarDatabase

- (instancetype)initWithJavaIoFile:(JavaIoFile *)gPath {
  JavaJoogarDatabase_initWithJavaIoFile_(self, gPath);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaJoogarDatabase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  return [self execSQLWithNSString:JreStrcat("$$$", @"DELETE FROM ", table, (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause) ? JreStrcat("$$", @" WHERE ", whereClause) : @"")) withNSStringArray:whereArgs];
}

- (id<JavaJoogarDatabaseResult>)rawQueryWithNSString:(NSString *)query
                                   withNSStringArray:(IOSObjectArray *)arguments {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)execSQLWithNSString:(NSString *)query
          withNSStringArray:(IOSObjectArray *)arguments {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaJoogarDatabaseResult>)queryWithNSString:(NSString *)table
                                     withNSString:(NSString *)join
                                withNSStringArray:(IOSObjectArray *)columns
                                     withNSString:(NSString *)whereClause
                                withNSStringArray:(IOSObjectArray *)whereArgs
                                     withNSString:(NSString *)groupBy
                                     withNSString:(NSString *)having
                                     withNSString:(NSString *)orderBy
                                     withNSString:(NSString *)limit {
  NSString *sql = JavaQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(false, table, join, columns, whereClause, groupBy, having, orderBy, limit);
  return [self rawQueryWithNSString:sql withNSStringArray:whereArgs];
}

- (jlong)insertOrUpdateWithNSString:(NSString *)table
                   withJavaUtilList:(id<JavaUtilList>)columns
                  withNSObjectArray:(IOSObjectArray *)values {
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_init();
  (void) [sql appendWithNSString:JreStrcat("$$C", @"INSERT OR REPLACE INTO ", table, '(')];
  jint i = 0;
  for (JavaLangReflectField * __strong col in nil_chk(columns)) {
    NSString *colName = JavaNamingHelper_toSQLNameWithJavaLangReflectField_(col);
    (void) [sql appendWithNSString:(i > 0) ? @"," : @""];
    (void) [sql appendWithNSString:colName];
    i++;
  }
  (void) [sql appendWithChar:')'];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@" VALUES ("])) appendWithNSString:JavaQueryBuilder_generatePlaceholdersWithInt_([columns size])])) appendWithChar:')'];
  NSString *sqlStr = [sql description];
  if (JavaJoogar_isDebug()) {
    [((id<JavaJoogarLogger>) nil_chk([((JavaJoogar *) nil_chk(JavaJoogar_getInstance())) getLogger])) iWithNSString:sqlStr];
  }
  return [self insertOrUpdateInternalWithNSString:sqlStr withNSObjectArray:values];
}

- (jlong)insertOrUpdateInternalWithNSString:(NSString *)gSqlStr
                          withNSObjectArray:(IOSObjectArray *)gValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getVersion {
  id<JavaJoogarDatabaseResult> result = [self rawQueryWithNSString:@"PRAGMA user_version;" withNSStringArray:nil];
  [((id<JavaJoogarDatabaseResult>) nil_chk(result)) next];
  return [result getIntWithInt:0];
}

- (void)setVersionWithInt:(jint)gVersion {
  [self execSQLWithNSString:JreStrcat("$I", @"PRAGMA user_version = ", gVersion) withNSStringArray:nil];
}

- (void)openTransaction {
  [self execSQLWithNSString:@"BEGIN TRANSACTION" withNSStringArray:nil];
}

- (void)commitTransaction {
  [self execSQLWithNSString:@"COMMIT TRANSACTION" withNSStringArray:nil];
}

- (void)rollbackTransaction {
  [self execSQLWithNSString:@"ROLLBACK TRANSACTION" withNSStringArray:nil];
}

- (JavaIoFile *)getPath {
  return path_;
}

- (void)close {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:", "JoogarDatabase", NULL, 0x1, NULL, NULL },
    { "init", "JoogarDatabase", NULL, 0x1, NULL, NULL },
    { "delete__WithNSString:withNSString:withNSStringArray:", "delete", "I", 0x1, "Lnet.skoumal.joogar.shared.SQLException;", NULL },
    { "rawQueryWithNSString:withNSStringArray:", "rawQuery", "Lnet.skoumal.joogar.shared.JoogarDatabaseResult;", 0x401, "Lnet.skoumal.joogar.shared.SQLException;", NULL },
    { "execSQLWithNSString:withNSStringArray:", "execSQL", "I", 0x401, "Lnet.skoumal.joogar.shared.SQLException;", NULL },
    { "queryWithNSString:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:", "query", "Lnet.skoumal.joogar.shared.JoogarDatabaseResult;", 0x1, "Lnet.skoumal.joogar.shared.SQLException;", NULL },
    { "insertOrUpdateWithNSString:withJavaUtilList:withNSObjectArray:", "insertOrUpdate", "J", 0x1, "Lnet.skoumal.joogar.shared.SQLException;", NULL },
    { "insertOrUpdateInternalWithNSString:withNSObjectArray:", "insertOrUpdateInternal", "J", 0x404, NULL, NULL },
    { "getVersion", NULL, "I", 0x1, NULL, NULL },
    { "setVersionWithInt:", "setVersion", "V", 0x1, NULL, NULL },
    { "openTransaction", NULL, "V", 0x1, NULL, NULL },
    { "commitTransaction", NULL, "V", 0x1, NULL, NULL },
    { "rollbackTransaction", NULL, "V", 0x1, NULL, NULL },
    { "getPath", NULL, "Ljava.io.File;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "path_", NULL, 0x2, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _JavaJoogarDatabase = { 2, "JoogarDatabase", "net.skoumal.joogar.shared", NULL, 0x401, 15, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaJoogarDatabase;
}

@end

void JavaJoogarDatabase_initWithJavaIoFile_(JavaJoogarDatabase *self, JavaIoFile *gPath) {
  (void) NSObject_init(self);
  self->path_ = gPath;
}

void JavaJoogarDatabase_init(JavaJoogarDatabase *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogarDatabase)
