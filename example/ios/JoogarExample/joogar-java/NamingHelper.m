//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/util/NamingHelper.java
//

#include "Column.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NamingHelper.h"
#include "Table.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Field.h"

@implementation JavaNamingHelper

+ (NSString *)toSQLNameDefaultWithNSString:(NSString *)camelCased {
  return JavaNamingHelper_toSQLNameDefaultWithNSString_(camelCased);
}

+ (NSString *)toSQLNameWithJavaLangReflectField:(JavaLangReflectField *)field {
  return JavaNamingHelper_toSQLNameWithJavaLangReflectField_(field);
}

+ (NSString *)toSQLNameWithIOSClass:(IOSClass *)table {
  return JavaNamingHelper_toSQLNameWithIOSClass_(table);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaNamingHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toSQLNameDefaultWithNSString:", "toSQLNameDefault", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toSQLNameWithJavaLangReflectField:", "toSQLName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toSQLNameWithIOSClass:", "toSQLName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _JavaNamingHelper = { 2, "NamingHelper", "net.skoumal.joogar.shared.util", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaNamingHelper;
}

@end

NSString *JavaNamingHelper_toSQLNameDefaultWithNSString_(NSString *camelCased) {
  JavaNamingHelper_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  IOSCharArray *buf = [((NSString *) nil_chk(camelCased)) toCharArray];
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(buf))->size_; i++) {
    jchar prevChar = (i > 0) ? IOSCharArray_Get(buf, i - 1) : 0;
    jchar c = IOSCharArray_Get(buf, i);
    jchar nextChar = (i < buf->size_ - 1) ? IOSCharArray_Get(buf, i + 1) : 0;
    jboolean isFirstChar = i == 0;
    if (c == '_') {
      (void) [sb appendWithNSString:@"_"];
    }
    else if (isFirstChar || JavaLangCharacter_isLowerCaseWithChar_(c) || JavaLangCharacter_isDigitWithChar_(c)) {
      (void) [sb appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
    }
    else if (JavaLangCharacter_isUpperCaseWithChar_(c)) {
      if (JavaLangCharacter_isLetterOrDigitWithChar_(prevChar)) {
        if (JavaLangCharacter_isLowerCaseWithChar_(prevChar)) {
          (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'_'])) appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
        }
        else if (nextChar > 0 && JavaLangCharacter_isLowerCaseWithChar_(nextChar)) {
          (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'_'])) appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
        }
        else {
          (void) [sb appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
        }
      }
      else {
        (void) [sb appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
      }
    }
  }
  return [sb description];
}

NSString *JavaNamingHelper_toSQLNameWithJavaLangReflectField_(JavaLangReflectField *field) {
  JavaNamingHelper_initialize();
  if ([((JavaLangReflectField *) nil_chk(field)) isAnnotationPresentWithIOSClass:JavaColumn_class_()]) {
    id<JavaColumn> annotation = [field getAnnotationWithIOSClass:JavaColumn_class_()];
    return [((id<JavaColumn>) nil_chk(annotation)) name];
  }
  return JavaNamingHelper_toSQLNameDefaultWithNSString_([field getName]);
}

NSString *JavaNamingHelper_toSQLNameWithIOSClass_(IOSClass *table) {
  JavaNamingHelper_initialize();
  if ([((IOSClass *) nil_chk(table)) isAnnotationPresentWithIOSClass:JavaTable_class_()]) {
    id<JavaTable> annotation = [table getAnnotationWithIOSClass:JavaTable_class_()];
    if ([@"" isEqual:[((id<JavaTable>) nil_chk(annotation)) name]]) {
      return JavaNamingHelper_toSQLNameDefaultWithNSString_([table getSimpleName]);
    }
    return [annotation name];
  }
  return JavaNamingHelper_toSQLNameDefaultWithNSString_([table getSimpleName]);
}

void JavaNamingHelper_init(JavaNamingHelper *self) {
  (void) NSObject_init(self);
}

JavaNamingHelper *new_JavaNamingHelper_init() {
  JavaNamingHelper *self = [JavaNamingHelper alloc];
  JavaNamingHelper_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaNamingHelper)
