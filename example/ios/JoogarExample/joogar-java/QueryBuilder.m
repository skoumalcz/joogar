//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/util/QueryBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JoogarRecord.h"
#include "QueryBuilder.h"
#include "android/text/TextUtils.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/sql/Date.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface JavaQueryBuilder ()

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause;

@end

static JavaUtilRegexPattern *JavaQueryBuilder_sLimitPattern_;
J2OBJC_STATIC_FIELD_GETTER(JavaQueryBuilder, sLimitPattern_, JavaUtilRegexPattern *)

__attribute__((unused)) static void JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause);

J2OBJC_INITIALIZED_DEFN(JavaQueryBuilder)

@implementation JavaQueryBuilder

+ (NSString *)getColumnTypeWithIOSClass:(IOSClass *)type {
  return JavaQueryBuilder_getColumnTypeWithIOSClass_(type);
}

+ (NSString *)generatePlaceholdersWithInt:(jint)numberOfArgs {
  return JavaQueryBuilder_generatePlaceholdersWithInt_(numberOfArgs);
}

+ (NSString *)buildQueryStringWithBoolean:(jboolean)distinct
                             withNSString:(NSString *)tables
                             withNSString:(NSString *)join
                        withNSStringArray:(IOSObjectArray *)columns
                             withNSString:(NSString *)where
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)orderBy
                             withNSString:(NSString *)limit {
  return JavaQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, tables, join, columns, where, groupBy, having, orderBy, limit);
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause {
  JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(s, name, clause);
}

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns {
  JavaQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(s, columns);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaQueryBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [JavaQueryBuilder class]) {
    JavaQueryBuilder_sLimitPattern_ = JavaUtilRegexPattern_compileWithNSString_(@"\\s*\\d+\\s*(,\\s*\\d+\\s*)?");
    J2OBJC_SET_INITIALIZED(JavaQueryBuilder)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getColumnTypeWithIOSClass:", "getColumnType", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "generatePlaceholdersWithInt:", "generatePlaceholders", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "buildQueryStringWithBoolean:withNSString:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withNSString:", "buildQueryString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "appendClauseWithJavaLangStringBuilder:withNSString:withNSString:", "appendClause", "V", 0xa, NULL, NULL },
    { "appendColumnsWithJavaLangStringBuilder:withNSStringArray:", "appendColumns", "V", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sLimitPattern_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &JavaQueryBuilder_sLimitPattern_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _JavaQueryBuilder = { 2, "QueryBuilder", "net.skoumal.joogar.shared.util", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_JavaQueryBuilder;
}

@end

NSString *JavaQueryBuilder_getColumnTypeWithIOSClass_(IOSClass *type) {
  JavaQueryBuilder_initialize();
  if (([((IOSClass *) nil_chk(type)) isEqual:JavaLangBoolean_class_()]) || ([type isEqual:JreLoadStatic(JavaLangBoolean, TYPE_)]) || ([type isEqual:JavaLangInteger_class_()]) || ([type isEqual:JreLoadStatic(JavaLangInteger, TYPE_)]) || ([type isEqual:JavaLangLong_class_()]) || ([type isEqual:JreLoadStatic(JavaLangLong, TYPE_)]) || ((![type isPrimitive]) && ([JavaJoogarRecord_class_() isAssignableFrom:type]))) {
    return @"INTEGER";
  }
  if (([type isEqual:JavaUtilDate_class_()]) || ([type isEqual:JavaSqlDate_class_()]) || ([type isEqual:JavaUtilCalendar_class_()])) {
    return @"INTEGER";
  }
  if ([((NSString *) nil_chk([type getName])) isEqual:@"[B"]) {
    return @"BLOB";
  }
  if (([type isEqual:JavaLangDouble_class_()]) || ([type isEqual:JreLoadStatic(JavaLangDouble, TYPE_)]) || ([type isEqual:JavaLangFloat_class_()]) || ([type isEqual:JreLoadStatic(JavaLangFloat, TYPE_)])) {
    return @"FLOAT";
  }
  if (([type isEqual:NSString_class_()]) || ([type isEqual:JreLoadStatic(JavaLangCharacter, TYPE_)])) {
    return @"TEXT";
  }
  return @"";
}

NSString *JavaQueryBuilder_generatePlaceholdersWithInt_(jint numberOfArgs) {
  JavaQueryBuilder_initialize();
  if (numberOfArgs < 1) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"The number of arguments must be greater than or equal to 1.");
  }
  JavaLangStringBuilder *stringBuilder = new_JavaLangStringBuilder_initWithInt_(numberOfArgs * 2 - 1);
  (void) [stringBuilder appendWithNSString:@"?"];
  for (jint i = 1; i < numberOfArgs; i++) {
    (void) [stringBuilder appendWithNSString:@",?"];
  }
  return [stringBuilder description];
}

NSString *JavaQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(jboolean distinct, NSString *tables, NSString *join, IOSObjectArray *columns, NSString *where, NSString *groupBy, NSString *having, NSString *orderBy, NSString *limit) {
  JavaQueryBuilder_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(groupBy) && !AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(having)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"HAVING clauses are only permitted when using a groupBy clause");
  }
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(limit) && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JavaQueryBuilder_sLimitPattern_)) matcherWithJavaLangCharSequence:limit])) matches]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid LIMIT clauses:", limit));
  }
  JavaLangStringBuilder *query = new_JavaLangStringBuilder_initWithInt_(120);
  (void) [query appendWithNSString:@"SELECT "];
  if (distinct) {
    (void) [query appendWithNSString:@"DISTINCT "];
  }
  if (columns != nil && columns->size_ != 0) {
    JavaQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(query, columns);
  }
  else {
    (void) [query appendWithNSString:@"* "];
  }
  (void) [query appendWithNSString:@"FROM "];
  (void) [query appendWithNSString:tables];
  if (join != nil) {
    (void) [query appendWithNSString:join];
  }
  JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" WHERE ", where);
  JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" GROUP BY ", groupBy);
  JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" HAVING ", having);
  JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", orderBy);
  JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", limit);
  return [query description];
}

void JavaQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause) {
  JavaQueryBuilder_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(clause)) {
    (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:name];
    (void) [s appendWithNSString:clause];
  }
}

void JavaQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns) {
  JavaQueryBuilder_initialize();
  jint n = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < n; i++) {
    NSString *column = IOSObjectArray_Get(columns, i);
    if (column != nil) {
      if (i > 0) {
        (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:@", "];
      }
      (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:column];
    }
  }
  (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithChar:' '];
}

void JavaQueryBuilder_init(JavaQueryBuilder *self) {
  (void) NSObject_init(self);
}

JavaQueryBuilder *new_JavaQueryBuilder_init() {
  JavaQueryBuilder *self = [JavaQueryBuilder alloc];
  JavaQueryBuilder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaQueryBuilder)
