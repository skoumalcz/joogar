//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/JoogarRecord.java
//

#ifndef _JoogarRecord_H_
#define _JoogarRecord_H_

#include "J2ObjC_header.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaJoogarDatabase;
@class JavaLangInteger;
@class JavaLangLong;
@protocol JavaJoogarCursor;
@protocol JavaUtilCollection;

@interface JavaJoogarRecord : NSObject {
 @public
  JavaLangLong *id__;
}

#pragma mark Public

- (instancetype)init;

+ (void)commitTransaction;

+ (void)commitTransactionWithIOSClass:(IOSClass *)gType;

+ (jlong)countWithIOSClass:(IOSClass *)type;

+ (jlong)countWithIOSClass:(IOSClass *)type
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs;

- (jboolean)delete__;

+ (jboolean)delete__WithId:(id)object;

+ (jint)deleteAllWithIOSClass:(IOSClass *)type;

+ (jint)deleteAllWithIOSClass:(IOSClass *)type
                 withNSString:(NSString *)whereClause
            withNSStringArray:(IOSObjectArray *)whereArgs;

+ (jboolean)deleteByIdWithIOSClass:(IOSClass *)type
                  withJavaLangLong:(JavaLangLong *)id_;

+ (void)deleteInTxWithJavaUtilCollection:(id<JavaUtilCollection>)objects;

+ (void)deleteInTxWithNSObjectArray:(IOSObjectArray *)objects;

+ (void)executeQueryWithNSString:(NSString *)query
               withNSStringArray:(IOSObjectArray *)arguments;

+ (void)executeQueryWithNSString:(NSString *)dbName
                    withNSString:(NSString *)query
               withNSStringArray:(IOSObjectArray *)arguments;

+ (id<JavaJoogarCursor>)findWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs;

+ (id<JavaJoogarCursor>)findWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                            withNSString:(NSString *)groupBy
                            withNSString:(NSString *)orderBy
                            withNSString:(NSString *)limit;

+ (id<JavaJoogarCursor>)findWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                            withNSString:(NSString *)groupBy
                            withNSString:(NSString *)orderBy
                            withNSString:(NSString *)limit
      withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)prefetches;

+ (id<JavaJoogarCursor>)findAllWithIOSClass:(IOSClass *)type;

+ (id)findByIdWithIOSClass:(IOSClass *)type
       withJavaLangInteger:(JavaLangInteger *)id_;

+ (id)findByIdWithIOSClass:(IOSClass *)type
          withJavaLangLong:(JavaLangLong *)id_;

+ (id<JavaJoogarCursor>)findByIdWithIOSClass:(IOSClass *)type
                           withNSStringArray:(IOSObjectArray *)ids;

+ (id<JavaJoogarCursor>)findWithQueryWithIOSClass:(IOSClass *)type
                                     withNSString:(NSString *)query
                                withNSStringArray:(IOSObjectArray *)arguments;

- (JavaLangLong *)getId;

+ (void)openTransaction;

+ (void)openTransactionWithIOSClass:(IOSClass *)gType;

+ (void)rollbackTransaction;

+ (void)rollbackTransactionWithIOSClass:(IOSClass *)gType;

- (jlong)save;

+ (void)saveWithJavaUtilCollection:(id<JavaUtilCollection>)objects;

+ (jlong)saveWithId:(id)object;

+ (void)saveWithNSObjectArray:(IOSObjectArray *)objects;

+ (void)saveInTxWithJavaUtilCollection:(id<JavaUtilCollection>)objects;

+ (void)saveInTxWithNSObjectArray:(IOSObjectArray *)objects;

- (void)setIdWithJavaLangLong:(JavaLangLong *)id_;

#pragma mark Package-Private

+ (jlong)saveWithJavaJoogarDatabase:(JavaJoogarDatabase *)db
                             withId:(id)object;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaJoogarRecord)

J2OBJC_FIELD_SETTER(JavaJoogarRecord, id__, JavaLangLong *)

FOUNDATION_EXPORT jint JavaJoogarRecord_deleteAllWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT jint JavaJoogarRecord_deleteAllWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs);

FOUNDATION_EXPORT void JavaJoogarRecord_saveInTxWithNSObjectArray_(IOSObjectArray *objects);

FOUNDATION_EXPORT void JavaJoogarRecord_saveInTxWithJavaUtilCollection_(id<JavaUtilCollection> objects);

FOUNDATION_EXPORT void JavaJoogarRecord_deleteInTxWithNSObjectArray_(IOSObjectArray *objects);

FOUNDATION_EXPORT void JavaJoogarRecord_deleteInTxWithJavaUtilCollection_(id<JavaUtilCollection> objects);

FOUNDATION_EXPORT id JavaJoogarRecord_findByIdWithIOSClass_withJavaLangLong_(IOSClass *type, JavaLangLong *id_);

FOUNDATION_EXPORT id JavaJoogarRecord_findByIdWithIOSClass_withJavaLangInteger_(IOSClass *type, JavaLangInteger *id_);

FOUNDATION_EXPORT id<JavaJoogarCursor> JavaJoogarRecord_findByIdWithIOSClass_withNSStringArray_(IOSClass *type, IOSObjectArray *ids);

FOUNDATION_EXPORT id<JavaJoogarCursor> JavaJoogarRecord_findAllWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT id<JavaJoogarCursor> JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs);

FOUNDATION_EXPORT id<JavaJoogarCursor> JavaJoogarRecord_findWithQueryWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *query, IOSObjectArray *arguments);

FOUNDATION_EXPORT void JavaJoogarRecord_executeQueryWithNSString_withNSStringArray_(NSString *query, IOSObjectArray *arguments);

FOUNDATION_EXPORT void JavaJoogarRecord_executeQueryWithNSString_withNSString_withNSStringArray_(NSString *dbName, NSString *query, IOSObjectArray *arguments);

FOUNDATION_EXPORT id<JavaJoogarCursor> JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs, NSString *groupBy, NSString *orderBy, NSString *limit);

FOUNDATION_EXPORT id<JavaJoogarCursor> JavaJoogarRecord_findWithIOSClass_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs, NSString *groupBy, NSString *orderBy, NSString *limit, IOSObjectArray *prefetches);

FOUNDATION_EXPORT jlong JavaJoogarRecord_countWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT jlong JavaJoogarRecord_countWithIOSClass_withNSString_withNSStringArray_(IOSClass *type, NSString *whereClause, IOSObjectArray *whereArgs);

FOUNDATION_EXPORT jlong JavaJoogarRecord_saveWithId_(id object);

FOUNDATION_EXPORT jlong JavaJoogarRecord_saveWithJavaJoogarDatabase_withId_(JavaJoogarDatabase *db, id object);

FOUNDATION_EXPORT jboolean JavaJoogarRecord_deleteByIdWithIOSClass_withJavaLangLong_(IOSClass *type, JavaLangLong *id_);

FOUNDATION_EXPORT jboolean JavaJoogarRecord_delete__WithId_(id object);

FOUNDATION_EXPORT void JavaJoogarRecord_openTransaction();

FOUNDATION_EXPORT void JavaJoogarRecord_openTransactionWithIOSClass_(IOSClass *gType);

FOUNDATION_EXPORT void JavaJoogarRecord_commitTransaction();

FOUNDATION_EXPORT void JavaJoogarRecord_commitTransactionWithIOSClass_(IOSClass *gType);

FOUNDATION_EXPORT void JavaJoogarRecord_rollbackTransaction();

FOUNDATION_EXPORT void JavaJoogarRecord_rollbackTransactionWithIOSClass_(IOSClass *gType);

FOUNDATION_EXPORT void JavaJoogarRecord_saveWithNSObjectArray_(IOSObjectArray *objects);

FOUNDATION_EXPORT void JavaJoogarRecord_saveWithJavaUtilCollection_(id<JavaUtilCollection> objects);

FOUNDATION_EXPORT void JavaJoogarRecord_init(JavaJoogarRecord *self);

FOUNDATION_EXPORT JavaJoogarRecord *new_JavaJoogarRecord_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaJoogarRecord)

@compatibility_alias NetSkoumalJoogarSharedJoogarRecord JavaJoogarRecord;

@interface JavaJoogarRecord_Prefetch : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaJoogarRecord_Prefetch)

FOUNDATION_EXPORT void JavaJoogarRecord_Prefetch_init(JavaJoogarRecord_Prefetch *self);

FOUNDATION_EXPORT JavaJoogarRecord_Prefetch *new_JavaJoogarRecord_Prefetch_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaJoogarRecord_Prefetch)

@interface JavaJoogarRecord_OneToOnePrefetch : JavaJoogarRecord_Prefetch

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)gField
                    withNSString:(NSString *)gConditionFrom
                    withNSString:(NSString *)gConditionTo
                     withBoolean:(jboolean)gOptional
withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)gChildPrefetches;

- (instancetype)initWithNSString:(NSString *)gField
                    withNSString:(NSString *)gFieldFrom
                    withNSString:(NSString *)gFieldTo
withJavaJoogarRecord_PrefetchArray:(IOSObjectArray *)gChildPrefetches;

- (IOSObjectArray *)getChildPrefetch;

- (NSString *)getField;

- (NSString *)getFieldFrom;

- (NSString *)getFieldTo;

- (jboolean)isOptional;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaJoogarRecord_OneToOnePrefetch)

FOUNDATION_EXPORT void JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(JavaJoogarRecord_OneToOnePrefetch *self, NSString *gField, NSString *gFieldFrom, NSString *gFieldTo, IOSObjectArray *gChildPrefetches);

FOUNDATION_EXPORT JavaJoogarRecord_OneToOnePrefetch *new_JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withJavaJoogarRecord_PrefetchArray_(NSString *gField, NSString *gFieldFrom, NSString *gFieldTo, IOSObjectArray *gChildPrefetches) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(JavaJoogarRecord_OneToOnePrefetch *self, NSString *gField, NSString *gConditionFrom, NSString *gConditionTo, jboolean gOptional, IOSObjectArray *gChildPrefetches);

FOUNDATION_EXPORT JavaJoogarRecord_OneToOnePrefetch *new_JavaJoogarRecord_OneToOnePrefetch_initWithNSString_withNSString_withNSString_withBoolean_withJavaJoogarRecord_PrefetchArray_(NSString *gField, NSString *gConditionFrom, NSString *gConditionTo, jboolean gOptional, IOSObjectArray *gChildPrefetches) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaJoogarRecord_OneToOnePrefetch)

#endif // _JoogarRecord_H_
