//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../joogar/src/main/java/net/skoumal/joogar/shared/util/JoogarUpgradeScriptComparator.java
//

#include "J2ObjC_source.h"
#include "JoogarUpgradeScriptComparator.h"
#include "java/lang/Character.h"

@interface JavaJoogarUpgradeScriptComparator ()

+ (jchar)charAtWithNSString:(NSString *)s
                    withInt:(jint)i;

- (jint)compareRightWithNSString:(NSString *)a
                    withNSString:(NSString *)b;

@end

__attribute__((unused)) static jchar JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(NSString *s, jint i);

__attribute__((unused)) static jint JavaJoogarUpgradeScriptComparator_compareRightWithNSString_withNSString_(JavaJoogarUpgradeScriptComparator *self, NSString *a, NSString *b);

@implementation JavaJoogarUpgradeScriptComparator

+ (jchar)charAtWithNSString:(NSString *)s
                    withInt:(jint)i {
  return JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(s, i);
}

- (jint)compareRightWithNSString:(NSString *)a
                    withNSString:(NSString *)b {
  return JavaJoogarUpgradeScriptComparator_compareRightWithNSString_withNSString_(self, a, b);
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  NSString *a = [nil_chk(o1) description];
  NSString *b = [nil_chk(o2) description];
  jint ia = 0;
  jint ib = 0;
  jint nza = 0;
  jint nzb = 0;
  while (true) {
    nza = nzb = 0;
    jchar ca = JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(a, ia);
    jchar cb = JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(b, ib);
    while ((JavaLangCharacter_isSpaceCharWithChar_(ca)) || (ca == '0')) {
      if (ca == '0') {
        nza++;
      }
      else {
        nza = 0;
      }
      ca = JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(a, ++ia);
    }
    while ((JavaLangCharacter_isSpaceCharWithChar_(cb)) || (cb == '0')) {
      if (cb == '0') {
        nzb++;
      }
      else {
        nzb = 0;
      }
      cb = JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(b, ++ib);
    }
    jint result = 0;
    if ((JavaLangCharacter_isDigitWithChar_(ca)) && (JavaLangCharacter_isDigitWithChar_(cb)) && ((result = JavaJoogarUpgradeScriptComparator_compareRightWithNSString_withNSString_(self, [((NSString *) nil_chk(a)) substring:ia], [((NSString *) nil_chk(b)) substring:ib])) != 0)) {
      return result;
    }
    if ((ca == 0) && (cb == 0)) {
      return nza - nzb;
    }
    if (ca < cb) {
      return -1;
    }
    if (ca > cb) {
      return 1;
    }
    ia++;
    ib++;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaJoogarUpgradeScriptComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "charAtWithNSString:withInt:", "charAt", "C", 0xa, NULL, NULL },
    { "compareRightWithNSString:withNSString:", "compareRight", "I", 0x2, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _JavaJoogarUpgradeScriptComparator = { 2, "JoogarUpgradeScriptComparator", "net.skoumal.joogar.shared.util", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Object;>;" };
  return &_JavaJoogarUpgradeScriptComparator;
}

@end

jchar JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(NSString *s, jint i) {
  JavaJoogarUpgradeScriptComparator_initialize();
  if (i >= ((jint) [((NSString *) nil_chk(s)) length])) {
    return 0x0000;
  }
  return [s charAtWithInt:i];
}

jint JavaJoogarUpgradeScriptComparator_compareRightWithNSString_withNSString_(JavaJoogarUpgradeScriptComparator *self, NSString *a, NSString *b) {
  jint bias = 0;
  jint ia = 0;
  jint ib = 0;
  while (true) {
    jchar ca = JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(a, ia);
    jchar cb = JavaJoogarUpgradeScriptComparator_charAtWithNSString_withInt_(b, ib);
    if ((!JavaLangCharacter_isDigitWithChar_(ca)) && (!JavaLangCharacter_isDigitWithChar_(cb))) {
      return bias;
    }
    if (!JavaLangCharacter_isDigitWithChar_(ca)) {
      return -1;
    }
    if (!JavaLangCharacter_isDigitWithChar_(cb)) {
      return 1;
    }
    if (ca < cb) {
      if (bias == 0) {
        bias = -1;
      }
    }
    else if (ca > cb) {
      if (bias == 0) bias = 1;
    }
    else if ((ca == 0) && (cb == 0)) return bias;
    ia++;
    ib++;
  }
}

void JavaJoogarUpgradeScriptComparator_init(JavaJoogarUpgradeScriptComparator *self) {
  (void) NSObject_init(self);
}

JavaJoogarUpgradeScriptComparator *new_JavaJoogarUpgradeScriptComparator_init() {
  JavaJoogarUpgradeScriptComparator *self = [JavaJoogarUpgradeScriptComparator alloc];
  JavaJoogarUpgradeScriptComparator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaJoogarUpgradeScriptComparator)
